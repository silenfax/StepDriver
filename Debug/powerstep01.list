
powerstep01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b10  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000164  20000070  08004e04  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00001000  200001d4  08004e04  000201d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d76d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ab1  00000000  00000000  0002d80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000dc0  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d08  00000000  00000000  00030080  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000066dc  00000000  00000000  00030d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004c4f  00000000  00000000  00037464  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c0b3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003fb0  00000000  00000000  0003c130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004cd8 	.word	0x08004cd8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004cd8 	.word	0x08004cd8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b97a 	b.w	800052c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	468c      	mov	ip, r1
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	9e08      	ldr	r6, [sp, #32]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d151      	bne.n	8000304 <__udivmoddi4+0xb4>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d96d      	bls.n	8000342 <__udivmoddi4+0xf2>
 8000266:	fab2 fe82 	clz	lr, r2
 800026a:	f1be 0f00 	cmp.w	lr, #0
 800026e:	d00b      	beq.n	8000288 <__udivmoddi4+0x38>
 8000270:	f1ce 0c20 	rsb	ip, lr, #32
 8000274:	fa01 f50e 	lsl.w	r5, r1, lr
 8000278:	fa20 fc0c 	lsr.w	ip, r0, ip
 800027c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000280:	ea4c 0c05 	orr.w	ip, ip, r5
 8000284:	fa00 f40e 	lsl.w	r4, r0, lr
 8000288:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800028c:	0c25      	lsrs	r5, r4, #16
 800028e:	fbbc f8fa 	udiv	r8, ip, sl
 8000292:	fa1f f987 	uxth.w	r9, r7
 8000296:	fb0a cc18 	mls	ip, sl, r8, ip
 800029a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800029e:	fb08 f309 	mul.w	r3, r8, r9
 80002a2:	42ab      	cmp	r3, r5
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x6c>
 80002a6:	19ed      	adds	r5, r5, r7
 80002a8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002ac:	f080 8123 	bcs.w	80004f6 <__udivmoddi4+0x2a6>
 80002b0:	42ab      	cmp	r3, r5
 80002b2:	f240 8120 	bls.w	80004f6 <__udivmoddi4+0x2a6>
 80002b6:	f1a8 0802 	sub.w	r8, r8, #2
 80002ba:	443d      	add	r5, r7
 80002bc:	1aed      	subs	r5, r5, r3
 80002be:	b2a4      	uxth	r4, r4
 80002c0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002c4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	fb00 f909 	mul.w	r9, r0, r9
 80002d0:	45a1      	cmp	r9, r4
 80002d2:	d909      	bls.n	80002e8 <__udivmoddi4+0x98>
 80002d4:	19e4      	adds	r4, r4, r7
 80002d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002da:	f080 810a 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80002de:	45a1      	cmp	r9, r4
 80002e0:	f240 8107 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80002e4:	3802      	subs	r0, #2
 80002e6:	443c      	add	r4, r7
 80002e8:	eba4 0409 	sub.w	r4, r4, r9
 80002ec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002f0:	2100      	movs	r1, #0
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d061      	beq.n	80003ba <__udivmoddi4+0x16a>
 80002f6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002fa:	2300      	movs	r3, #0
 80002fc:	6034      	str	r4, [r6, #0]
 80002fe:	6073      	str	r3, [r6, #4]
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xc8>
 8000308:	2e00      	cmp	r6, #0
 800030a:	d054      	beq.n	80003b6 <__udivmoddi4+0x166>
 800030c:	2100      	movs	r1, #0
 800030e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	f040 808e 	bne.w	800043e <__udivmoddi4+0x1ee>
 8000322:	42ab      	cmp	r3, r5
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xdc>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 80fa 	bhi.w	8000520 <__udivmoddi4+0x2d0>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb65 0503 	sbc.w	r5, r5, r3
 8000332:	2001      	movs	r0, #1
 8000334:	46ac      	mov	ip, r5
 8000336:	2e00      	cmp	r6, #0
 8000338:	d03f      	beq.n	80003ba <__udivmoddi4+0x16a>
 800033a:	e886 1010 	stmia.w	r6, {r4, ip}
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	b912      	cbnz	r2, 800034a <__udivmoddi4+0xfa>
 8000344:	2701      	movs	r7, #1
 8000346:	fbb7 f7f2 	udiv	r7, r7, r2
 800034a:	fab7 fe87 	clz	lr, r7
 800034e:	f1be 0f00 	cmp.w	lr, #0
 8000352:	d134      	bne.n	80003be <__udivmoddi4+0x16e>
 8000354:	1beb      	subs	r3, r5, r7
 8000356:	0c3a      	lsrs	r2, r7, #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000362:	0c25      	lsrs	r5, r4, #16
 8000364:	fb02 3318 	mls	r3, r2, r8, r3
 8000368:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800036c:	fb0c f308 	mul.w	r3, ip, r8
 8000370:	42ab      	cmp	r3, r5
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x134>
 8000374:	19ed      	adds	r5, r5, r7
 8000376:	f108 30ff 	add.w	r0, r8, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x132>
 800037c:	42ab      	cmp	r3, r5
 800037e:	f200 80d1 	bhi.w	8000524 <__udivmoddi4+0x2d4>
 8000382:	4680      	mov	r8, r0
 8000384:	1aed      	subs	r5, r5, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb5 f0f2 	udiv	r0, r5, r2
 800038c:	fb02 5510 	mls	r5, r2, r0, r5
 8000390:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000394:	fb0c fc00 	mul.w	ip, ip, r0
 8000398:	45a4      	cmp	ip, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x15c>
 800039c:	19e4      	adds	r4, r4, r7
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x15a>
 80003a4:	45a4      	cmp	ip, r4
 80003a6:	f200 80b8 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 040c 	sub.w	r4, r4, ip
 80003b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b4:	e79d      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003b6:	4631      	mov	r1, r6
 80003b8:	4630      	mov	r0, r6
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	f1ce 0420 	rsb	r4, lr, #32
 80003c2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003c6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ca:	fa20 f804 	lsr.w	r8, r0, r4
 80003ce:	0c3a      	lsrs	r2, r7, #16
 80003d0:	fa25 f404 	lsr.w	r4, r5, r4
 80003d4:	ea48 0803 	orr.w	r8, r8, r3
 80003d8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003dc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003e0:	fb02 4411 	mls	r4, r2, r1, r4
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ec:	fb01 f30c 	mul.w	r3, r1, ip
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x1bc>
 80003f8:	19ed      	adds	r5, r5, r7
 80003fa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003fe:	f080 808a 	bcs.w	8000516 <__udivmoddi4+0x2c6>
 8000402:	42ab      	cmp	r3, r5
 8000404:	f240 8087 	bls.w	8000516 <__udivmoddi4+0x2c6>
 8000408:	3902      	subs	r1, #2
 800040a:	443d      	add	r5, r7
 800040c:	1aeb      	subs	r3, r5, r3
 800040e:	fa1f f588 	uxth.w	r5, r8
 8000412:	fbb3 f0f2 	udiv	r0, r3, r2
 8000416:	fb02 3310 	mls	r3, r2, r0, r3
 800041a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800041e:	fb00 f30c 	mul.w	r3, r0, ip
 8000422:	42ab      	cmp	r3, r5
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1e6>
 8000426:	19ed      	adds	r5, r5, r7
 8000428:	f100 38ff 	add.w	r8, r0, #4294967295
 800042c:	d26f      	bcs.n	800050e <__udivmoddi4+0x2be>
 800042e:	42ab      	cmp	r3, r5
 8000430:	d96d      	bls.n	800050e <__udivmoddi4+0x2be>
 8000432:	3802      	subs	r0, #2
 8000434:	443d      	add	r5, r7
 8000436:	1aeb      	subs	r3, r5, r3
 8000438:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800043c:	e78f      	b.n	800035e <__udivmoddi4+0x10e>
 800043e:	f1c1 0720 	rsb	r7, r1, #32
 8000442:	fa22 f807 	lsr.w	r8, r2, r7
 8000446:	408b      	lsls	r3, r1
 8000448:	fa05 f401 	lsl.w	r4, r5, r1
 800044c:	ea48 0303 	orr.w	r3, r8, r3
 8000450:	fa20 fe07 	lsr.w	lr, r0, r7
 8000454:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000458:	40fd      	lsrs	r5, r7
 800045a:	ea4e 0e04 	orr.w	lr, lr, r4
 800045e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000462:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000466:	fb0c 5519 	mls	r5, ip, r9, r5
 800046a:	fa1f f883 	uxth.w	r8, r3
 800046e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000472:	fb09 f408 	mul.w	r4, r9, r8
 8000476:	42ac      	cmp	r4, r5
 8000478:	fa02 f201 	lsl.w	r2, r2, r1
 800047c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x244>
 8000482:	18ed      	adds	r5, r5, r3
 8000484:	f109 30ff 	add.w	r0, r9, #4294967295
 8000488:	d243      	bcs.n	8000512 <__udivmoddi4+0x2c2>
 800048a:	42ac      	cmp	r4, r5
 800048c:	d941      	bls.n	8000512 <__udivmoddi4+0x2c2>
 800048e:	f1a9 0902 	sub.w	r9, r9, #2
 8000492:	441d      	add	r5, r3
 8000494:	1b2d      	subs	r5, r5, r4
 8000496:	fa1f fe8e 	uxth.w	lr, lr
 800049a:	fbb5 f0fc 	udiv	r0, r5, ip
 800049e:	fb0c 5510 	mls	r5, ip, r0, r5
 80004a2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004a6:	fb00 f808 	mul.w	r8, r0, r8
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x26e>
 80004ae:	18e4      	adds	r4, r4, r3
 80004b0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004b4:	d229      	bcs.n	800050a <__udivmoddi4+0x2ba>
 80004b6:	45a0      	cmp	r8, r4
 80004b8:	d927      	bls.n	800050a <__udivmoddi4+0x2ba>
 80004ba:	3802      	subs	r0, #2
 80004bc:	441c      	add	r4, r3
 80004be:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c2:	eba4 0408 	sub.w	r4, r4, r8
 80004c6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ca:	454c      	cmp	r4, r9
 80004cc:	46c6      	mov	lr, r8
 80004ce:	464d      	mov	r5, r9
 80004d0:	d315      	bcc.n	80004fe <__udivmoddi4+0x2ae>
 80004d2:	d012      	beq.n	80004fa <__udivmoddi4+0x2aa>
 80004d4:	b156      	cbz	r6, 80004ec <__udivmoddi4+0x29c>
 80004d6:	ebba 030e 	subs.w	r3, sl, lr
 80004da:	eb64 0405 	sbc.w	r4, r4, r5
 80004de:	fa04 f707 	lsl.w	r7, r4, r7
 80004e2:	40cb      	lsrs	r3, r1
 80004e4:	431f      	orrs	r7, r3
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	6037      	str	r7, [r6, #0]
 80004ea:	6074      	str	r4, [r6, #4]
 80004ec:	2100      	movs	r1, #0
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6f8      	b.n	80002e8 <__udivmoddi4+0x98>
 80004f6:	4690      	mov	r8, r2
 80004f8:	e6e0      	b.n	80002bc <__udivmoddi4+0x6c>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2ea      	bcs.n	80004d4 <__udivmoddi4+0x284>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb69 0503 	sbc.w	r5, r9, r3
 8000506:	3801      	subs	r0, #1
 8000508:	e7e4      	b.n	80004d4 <__udivmoddi4+0x284>
 800050a:	4628      	mov	r0, r5
 800050c:	e7d7      	b.n	80004be <__udivmoddi4+0x26e>
 800050e:	4640      	mov	r0, r8
 8000510:	e791      	b.n	8000436 <__udivmoddi4+0x1e6>
 8000512:	4681      	mov	r9, r0
 8000514:	e7be      	b.n	8000494 <__udivmoddi4+0x244>
 8000516:	4601      	mov	r1, r0
 8000518:	e778      	b.n	800040c <__udivmoddi4+0x1bc>
 800051a:	3802      	subs	r0, #2
 800051c:	443c      	add	r4, r7
 800051e:	e745      	b.n	80003ac <__udivmoddi4+0x15c>
 8000520:	4608      	mov	r0, r1
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xe6>
 8000524:	f1a8 0802 	sub.w	r8, r8, #2
 8000528:	443d      	add	r5, r7
 800052a:	e72b      	b.n	8000384 <__udivmoddi4+0x134>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <set_param8>:
{
	return 0;
}

static void set_param8(powerstep01_Registers_t param, uint8_t value)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	4613      	mov	r3, r2
 800053e:	71bb      	strb	r3, [r7, #6]
	xfer_byte(POWERSTEP01_SET_PARAM | param);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f908 	bl	8000758 <xfer_byte>
	xfer_byte(value);
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	4618      	mov	r0, r3
 800054c:	f000 f904 	bl	8000758 <xfer_byte>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <set_param16>:


static void set_param16(powerstep01_Registers_t param, uint16_t value)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	80bb      	strh	r3, [r7, #4]
	xfer_byte(POWERSTEP01_SET_PARAM | param);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f8f4 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((value & 0xff00) >> 8));
 8000570:	88bb      	ldrh	r3, [r7, #4]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f8ed 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((value & 0x00ff) >> 0));
 800057e:	88bb      	ldrh	r3, [r7, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f8e8 	bl	8000758 <xfer_byte>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <set_param24>:

static void set_param24(powerstep01_Registers_t param, uint32_t value)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
	xfer_byte(POWERSTEP01_SET_PARAM | param);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f8da 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((value & 0x00ff0000) >> 16));
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f8d4 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((value & 0x0000ff00) >> 8));
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	0a1b      	lsrs	r3, r3, #8
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f8ce 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((value & 0x000000ff) >> 0));
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f8c9 	bl	8000758 <xfer_byte>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <set_param>:

void set_param(powerstep01_Registers_t param, uint32_t value)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
	switch(param)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	3b01      	subs	r3, #1
 80005e0:	2b19      	cmp	r3, #25
 80005e2:	d84d      	bhi.n	8000680 <set_param+0xb0>
 80005e4:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <set_param+0x1c>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	08000655 	.word	0x08000655
 80005f0:	08000661 	.word	0x08000661
 80005f4:	08000655 	.word	0x08000655
 80005f8:	08000655 	.word	0x08000655
 80005fc:	08000661 	.word	0x08000661
 8000600:	08000661 	.word	0x08000661
 8000604:	08000661 	.word	0x08000661
 8000608:	08000661 	.word	0x08000661
 800060c:	08000671 	.word	0x08000671
 8000610:	08000671 	.word	0x08000671
 8000614:	08000671 	.word	0x08000671
 8000618:	08000671 	.word	0x08000671
 800061c:	08000661 	.word	0x08000661
 8000620:	08000671 	.word	0x08000671
 8000624:	08000671 	.word	0x08000671
 8000628:	08000671 	.word	0x08000671
 800062c:	08000671 	.word	0x08000671
 8000630:	08000671 	.word	0x08000671
 8000634:	08000671 	.word	0x08000671
 8000638:	08000671 	.word	0x08000671
 800063c:	08000661 	.word	0x08000661
 8000640:	08000671 	.word	0x08000671
 8000644:	08000671 	.word	0x08000671
 8000648:	08000661 	.word	0x08000661
 800064c:	08000671 	.word	0x08000671
 8000650:	08000661 	.word	0x08000661
	{
		case POWERSTEP01_ABS_POS:
		case POWERSTEP01_SPEED:
		case POWERSTEP01_MARK:
			set_param24(param, value);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff99 	bl	8000590 <set_param24>
			break;
 800065e:	e010      	b.n	8000682 <set_param+0xb2>
		case POWERSTEP01_MIN_SPEED:
		case POWERSTEP01_FS_SPD:
		case POWERSTEP01_INT_SPD:
		case POWERSTEP01_GATECFG1:
		case POWERSTEP01_CONFIG:
			set_param16(param, (uint16_t)value);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b29a      	uxth	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff75 	bl	8000558 <set_param16>
			break;
 800066e:	e008      	b.n	8000682 <set_param+0xb2>
		case POWERSTEP01_STALL_TH:
		case POWERSTEP01_ST_SLP:
		case POWERSTEP01_ALARM_EN:
		case POWERSTEP01_GATECFG2:
		case POWERSTEP01_STEP_MODE:
			set_param8(param, (uint8_t)value);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff59 	bl	8000530 <set_param8>
			break;
 800067e:	e000      	b.n	8000682 <set_param+0xb2>

		default:
			break;
 8000680:	bf00      	nop
	}

}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop

0800068c <setHardHiZ>:
{
	xfer_byte(POWERSTEP01_SOFT_STOP);
}

void setHardHiZ(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	xfer_byte(POWERSTEP01_HARD_HIZ);
 8000690:	20a8      	movs	r0, #168	; 0xa8
 8000692:	f000 f861 	bl	8000758 <xfer_byte>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}

0800069a <Move>:
{
	xfer_byte(POWERSTEP01_SOFT_HIZ);
}

void Move(int32_t steps)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
	//check if steps value exeeds limits
	//send data
	if(steps > 0)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dd03      	ble.n	80006b0 <Move+0x16>
	{
		xfer_byte(POWERSTEP01_MOVE);
 80006a8:	2040      	movs	r0, #64	; 0x40
 80006aa:	f000 f855 	bl	8000758 <xfer_byte>
 80006ae:	e005      	b.n	80006bc <Move+0x22>
	}
	else
	{
		xfer_byte(POWERSTEP01_MOVE | 1);
 80006b0:	2041      	movs	r0, #65	; 0x41
 80006b2:	f000 f851 	bl	8000758 <xfer_byte>
		steps *= -1;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	425b      	negs	r3, r3
 80006ba:	607b      	str	r3, [r7, #4]
	}
	xfer_byte((uint8_t)((steps & 0x00ff0000) >> 16) );
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	141b      	asrs	r3, r3, #16
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f848 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((steps & 0x0000ff00) >> 8) );
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	121b      	asrs	r3, r3, #8
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 f842 	bl	8000758 <xfer_byte>
	xfer_byte((uint8_t)((steps & 0x000000ff) >> 0) );
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f83d 	bl	8000758 <xfer_byte>
	xfer_byte(0);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f83a 	bl	8000758 <xfer_byte>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <getStatus>:

uint16_t getStatus(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
	uint8_t byte1 = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	71fb      	strb	r3, [r7, #7]
	uint8_t byte2 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71bb      	strb	r3, [r7, #6]

	xfer_byte(POWERSTEP01_GET_STATUS);
 80006fa:	20d0      	movs	r0, #208	; 0xd0
 80006fc:	f000 f82c 	bl	8000758 <xfer_byte>

	byte1 = xfer_byte(0);
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f829 	bl	8000758 <xfer_byte>
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	byte2 = xfer_byte(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f824 	bl	8000758 <xfer_byte>
 8000710:	4603      	mov	r3, r0
 8000712:	71bb      	strb	r3, [r7, #6]

	return ((uint16_t)(byte1 << 8)) | byte2;
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	b29b      	uxth	r3, r3
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b29a      	uxth	r2, r3
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	b29b      	uxth	r3, r3
 8000720:	4313      	orrs	r3, r2
 8000722:	b29b      	uxth	r3, r3
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//DEBUG PRINTF
int __io_putchar(int ch)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	char v;
	v = (uint8_t )ch;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	73fb      	strb	r3, [r7, #15]
	return HAL_UART_Transmit(&huart6, (uint8_t *)&v, 1 ,1000);
 800073a:	f107 010f 	add.w	r1, r7, #15
 800073e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000742:	2201      	movs	r2, #1
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <__io_putchar+0x28>)
 8000746:	f003 f9b9 	bl	8003abc <HAL_UART_Transmit>
 800074a:	4603      	mov	r3, r0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000098 	.word	0x20000098

08000758 <xfer_byte>:

#include "powerstep01_lib.h"

uint8_t xfer_byte(uint8_t byte)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af02      	add	r7, sp, #8
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	uint8_t tx = byte;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	73fb      	strb	r3, [r7, #15]
	uint8_t rx = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2102      	movs	r1, #2
 800076e:	480c      	ldr	r0, [pc, #48]	; (80007a0 <xfer_byte+0x48>)
 8000770:	f000 ff44 	bl	80015fc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, 1000);
 8000774:	f107 020e 	add.w	r2, r7, #14
 8000778:	f107 010f 	add.w	r1, r7, #15
 800077c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <xfer_byte+0x4c>)
 8000786:	f001 ffc0 	bl	800270a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	2102      	movs	r1, #2
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <xfer_byte+0x48>)
 8000790:	f000 ff34 	bl	80015fc <HAL_GPIO_WritePin>
	return rx;
 8000794:	7bbb      	ldrb	r3, [r7, #14]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40020000 	.word	0x40020000
 80007a4:	2000011c 	.word	0x2000011c

080007a8 <init_stepper_motor>:

void init_stepper_motor(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	set_param(POWERSTEP01_KVAL_HOLD, 64);
 80007ac:	2140      	movs	r1, #64	; 0x40
 80007ae:	2009      	movs	r0, #9
 80007b0:	f7ff ff0e 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_KVAL_RUN, 64);
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	200a      	movs	r0, #10
 80007b8:	f7ff ff0a 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_KVAL_ACC, 64);
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	200b      	movs	r0, #11
 80007c0:	f7ff ff06 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_KVAL_DEC, 64);
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	200c      	movs	r0, #12
 80007c8:	f7ff ff02 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_OCD_TH, 31);
 80007cc:	211f      	movs	r1, #31
 80007ce:	2013      	movs	r0, #19
 80007d0:	f7ff fefe 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_STALL_TH, 31);
 80007d4:	211f      	movs	r1, #31
 80007d6:	2014      	movs	r0, #20
 80007d8:	f7ff fefa 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_STEP_MODE, 0);
 80007dc:	2100      	movs	r1, #0
 80007de:	2016      	movs	r0, #22
 80007e0:	f7ff fef6 	bl	80005d0 <set_param>
	set_param(POWERSTEP01_CONFIG, 0x3e08);
 80007e4:	f643 6108 	movw	r1, #15880	; 0x3e08
 80007e8:	201a      	movs	r0, #26
 80007ea:	f7ff fef1 	bl	80005d0 <set_param>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fc01 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f841 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 f989 	bl	8000b18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000806:	f000 f8b7 	bl	8000978 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800080a:	f000 f955 	bl	8000ab8 <MX_USART6_UART_Init>
  MX_TIM12_Init();
 800080e:	f000 f8f1 	bl	80009f4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */



  printf("powerstep01 bringup!\r\n");
 8000812:	4819      	ldr	r0, [pc, #100]	; (8000878 <main+0x84>)
 8000814:	f003 fe4e 	bl	80044b4 <puts>
  uint16_t status = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(1);
 800081c:	2001      	movs	r0, #1
 800081e:	f000 fc4d 	bl	80010bc <HAL_Delay>


  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2110      	movs	r1, #16
 8000826:	4815      	ldr	r0, [pc, #84]	; (800087c <main+0x88>)
 8000828:	f000 fee8 	bl	80015fc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 fc45 	bl	80010bc <HAL_Delay>

  setHardHiZ();
 8000832:	f7ff ff2b 	bl	800068c <setHardHiZ>
  init_stepper_motor();
 8000836:	f7ff ffb7 	bl	80007a8 <init_stepper_motor>
  setHardHiZ();
 800083a:	f7ff ff27 	bl	800068c <setHardHiZ>
  HAL_Delay(1);
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fc3c 	bl	80010bc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Move(1000);
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f7ff ff27 	bl	800069a <Move>


	     do {
	     	status = getStatus();
 800084c:	f7ff ff4e 	bl	80006ec <getStatus>
 8000850:	4603      	mov	r3, r0
 8000852:	80fb      	strh	r3, [r7, #6]
	     }while((status & POWERSTEP01_STATUS_MOT_STATUS) != 0);
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f6      	bne.n	800084c <main+0x58>

	     Move(-1000);
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <main+0x8c>)
 8000860:	f7ff ff1b 	bl	800069a <Move>

	     do {
	 		status = getStatus();
 8000864:	f7ff ff42 	bl	80006ec <getStatus>
 8000868:	4603      	mov	r3, r0
 800086a:	80fb      	strh	r3, [r7, #6]
	 	}while((status & POWERSTEP01_STATUS_MOT_STATUS) != 0);
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f6      	bne.n	8000864 <main+0x70>
	  Move(1000);
 8000876:	e7e5      	b.n	8000844 <main+0x50>
 8000878:	08004cf0 	.word	0x08004cf0
 800087c:	40021000 	.word	0x40021000
 8000880:	fffffc18 	.word	0xfffffc18

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0b4      	sub	sp, #208	; 0xd0
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 fdaa 	bl	80043ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fd9b 	bl	80043ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4a2e      	ldr	r2, [pc, #184]	; (8000970 <SystemClock_Config+0xec>)
 80008b8:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <SystemClock_Config+0xec>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	; 0x40
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <SystemClock_Config+0xec>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ce:	4a29      	ldr	r2, [pc, #164]	; (8000974 <SystemClock_Config+0xf0>)
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xf0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xf0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f6:	2310      	movs	r3, #16
 80008f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fe92 	bl	8001630 <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000912:	f000 f979 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000934:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 f91c 	bl	8001b78 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000946:	f000 f95f 	bl	8000c08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800094a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800094e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000950:	2300      	movs	r3, #0
 8000952:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fae3 	bl	8001f24 <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000964:	f000 f950 	bl	8000c08 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	37d0      	adds	r7, #208	; 0xd0
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_SPI1_Init+0x74>)
 800097e:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <MX_SPI1_Init+0x78>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_SPI1_Init+0x74>)
 8000984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_SPI1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_SPI1_Init+0x74>)
 8000992:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_SPI1_Init+0x74>)
 800099a:	2202      	movs	r2, #2
 800099c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_SPI1_Init+0x74>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_SPI1_Init+0x74>)
 80009a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_SPI1_Init+0x74>)
 80009ae:	2220      	movs	r2, #32
 80009b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_SPI1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_SPI1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_SPI1_Init+0x74>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_SPI1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_SPI1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_SPI1_Init+0x74>)
 80009d8:	f001 fdee 	bl	80025b8 <HAL_SPI_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f911 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000011c 	.word	0x2000011c
 80009f0:	40013000 	.word	0x40013000

080009f4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000a1a:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a1c:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <MX_TIM12_Init+0xc0>)
 8000a1e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 200;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a2e:	22c8      	movs	r2, #200	; 0xc8
 8000a30:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000a3e:	481c      	ldr	r0, [pc, #112]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a40:	f002 f9d4 	bl	8002dec <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000a4a:	f000 f8dd 	bl	8000c08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4815      	ldr	r0, [pc, #84]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a5c:	f002 fb8e 	bl	800317c <HAL_TIM_ConfigClockSource>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000a66:	f000 f8cf 	bl	8000c08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000a6a:	4811      	ldr	r0, [pc, #68]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a6c:	f002 fa15 	bl	8002e9a <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8000a76:	f000 f8c7 	bl	8000c08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7a:	2360      	movs	r3, #96	; 0x60
 8000a7c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000a7e:	2364      	movs	r3, #100	; 0x64
 8000a80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000a92:	f002 fa63 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8000a9c:	f000 f8b4 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM12_Init+0xbc>)
 8000aa2:	f000 f95b 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000180 	.word	0x20000180
 8000ab4:	40001800 	.word	0x40001800

08000ab8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_USART6_UART_Init+0x5c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_USART6_UART_Init+0x58>)
 8000afc:	f002 ff90 	bl	8003a20 <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b06:	f000 f87f 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000098 	.word	0x20000098
 8000b14:	40011400 	.word	0x40011400

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4a33      	ldr	r2, [pc, #204]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b90:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_GPIO_Init+0xe4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	4815      	ldr	r0, [pc, #84]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000bac:	f000 fd26 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	4813      	ldr	r0, [pc, #76]	; (8000c04 <MX_GPIO_Init+0xec>)
 8000bb6:	f000 fd21 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480b      	ldr	r0, [pc, #44]	; (8000c00 <MX_GPIO_Init+0xe8>)
 8000bd2:	f000 fb79 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_GPIO_Init+0xec>)
 8000bee:	f000 fb6b 	bl	80012c8 <HAL_GPIO_Init>

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40020000 	.word	0x40020000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <Error_Handler+0x6>

08000c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <HAL_MspInit+0x44>)
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_MspInit+0x44>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_MspInit+0x44>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_MspInit+0x44>)
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_MspInit+0x44>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x44>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_SPI_MspInit+0xb4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d143      	bne.n	8000d02 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7a:	4a25      	ldr	r2, [pc, #148]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c7c:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c94:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <HAL_SPI_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_SPI_MspInit+0xbc>)
 8000cde:	f000 faf3 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ce2:	2320      	movs	r3, #32
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <HAL_SPI_MspInit+0xc0>)
 8000cfe:	f000 fae3 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3728      	adds	r7, #40	; 0x28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_TIM_Base_MspInit+0x38>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10b      	bne.n	8000d46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_TIM_Base_MspInit+0x3c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40001800 	.word	0x40001800
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_TIM_MspPostInit+0x64>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d11b      	bne.n	8000db6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_TIM_MspPostInit+0x68>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d96:	2340      	movs	r3, #64	; 0x40
 8000d98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000da6:	2309      	movs	r3, #9
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_TIM_MspPostInit+0x6c>)
 8000db2:	f000 fa89 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40001800 	.word	0x40001800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40021c00 	.word	0x40021c00

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_UART_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d127      	bne.n	8000e3e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f043 0320 	orr.w	r3, r3, #32
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f003 0320 	and.w	r3, r3, #32
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_UART_MspInit+0x80>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000e1e:	23c0      	movs	r3, #192	; 0xc0
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	; (8000e50 <HAL_UART_MspInit+0x84>)
 8000e3a:	f000 fa45 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40011400 	.word	0x40011400
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020800 	.word	0x40020800

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f8ec 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eba:	68bc      	ldr	r4, [r7, #8]
 8000ebc:	1c63      	adds	r3, r4, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	f3af 8000 	nop.w
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <_read+0x12>
	}

return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}

08000ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e009      	b.n	8000f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fc15 	bl	800072c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf1      	blt.n	8000ef4 <_write+0x12>
	}
	return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x50>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x16>
		heap_end = &end;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_sbrk+0x50>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <_sbrk+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x50>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <_sbrk+0x50>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	466a      	mov	r2, sp
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d907      	bls.n	8000f56 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f46:	f003 fa27 	bl	8004398 <__errno>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	e006      	b.n	8000f64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_sbrk+0x50>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <_sbrk+0x50>)
 8000f60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000008c 	.word	0x2000008c
 8000f70:	200001d4 	.word	0x200001d4

08000f74 <_close>:

int _close(int file)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f9c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_isatty>:

int _isatty(int file)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	return 1;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
	return 0;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f92b 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f806 	bl	800101c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fdfe 	bl	8000c10 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x54>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x58>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f937 	bl	80012ae <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f90d 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x5c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000000 	.word	0x20000000
 8001074:	20000008 	.word	0x20000008
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	200001cc 	.word	0x200001cc

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200001cc 	.word	0x200001cc

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_Delay+0x40>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad2      	subs	r2, r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3f7      	bcc.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	05fa0000 	.word	0x05fa0000

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	490d      	ldr	r1, [pc, #52]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	4909      	ldr	r1, [pc, #36]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	2201      	movs	r2, #1
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	401a      	ands	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fe:	2101      	movs	r1, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	1e59      	subs	r1, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff90 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff49 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff5e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5f 	bl	8001164 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffb0 	bl	800121c <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	e169      	b.n	80015bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012e8:	2201      	movs	r2, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	f040 8158 	bne.w	80015b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d00b      	beq.n	8001326 <HAL_GPIO_Init+0x5e>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131a:	2b11      	cmp	r3, #17
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b12      	cmp	r3, #18
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x100>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	69b9      	ldr	r1, [r7, #24]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80b2 	beq.w	80015b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4a5f      	ldr	r2, [pc, #380]	; (80015d0 <HAL_GPIO_Init+0x308>)
 8001454:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <HAL_GPIO_Init+0x308>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_GPIO_Init+0x308>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800146a:	4a5a      	ldr	r2, [pc, #360]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a51      	ldr	r2, [pc, #324]	; (80015d8 <HAL_GPIO_Init+0x310>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d02b      	beq.n	80014ee <HAL_GPIO_Init+0x226>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a50      	ldr	r2, [pc, #320]	; (80015dc <HAL_GPIO_Init+0x314>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d025      	beq.n	80014ea <HAL_GPIO_Init+0x222>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4f      	ldr	r2, [pc, #316]	; (80015e0 <HAL_GPIO_Init+0x318>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d01f      	beq.n	80014e6 <HAL_GPIO_Init+0x21e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4e      	ldr	r2, [pc, #312]	; (80015e4 <HAL_GPIO_Init+0x31c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4d      	ldr	r2, [pc, #308]	; (80015e8 <HAL_GPIO_Init+0x320>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_GPIO_Init+0x324>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4b      	ldr	r2, [pc, #300]	; (80015f0 <HAL_GPIO_Init+0x328>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4a      	ldr	r2, [pc, #296]	; (80015f4 <HAL_GPIO_Init+0x32c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x20a>
 80014ce:	2307      	movs	r3, #7
 80014d0:	e00e      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d2:	2308      	movs	r3, #8
 80014d4:	e00c      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014d6:	2306      	movs	r3, #6
 80014d8:	e00a      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014da:	2305      	movs	r3, #5
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014de:	2304      	movs	r3, #4
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x228>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001500:	4934      	ldr	r1, [pc, #208]	; (80015d4 <HAL_GPIO_Init+0x30c>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_GPIO_Init+0x330>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_GPIO_Init+0x330>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_GPIO_Init+0x330>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_GPIO_Init+0x330>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_GPIO_Init+0x330>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f ae92 	bls.w	80012e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	3724      	adds	r7, #36	; 0x24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800
 80015e4:	40020c00 	.word	0x40020c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40021800 	.word	0x40021800
 80015f4:	40021c00 	.word	0x40021c00
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e291      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8087 	beq.w	8001762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001654:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b04      	cmp	r3, #4
 800165e:	d00c      	beq.n	800167a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001660:	4b93      	ldr	r3, [pc, #588]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d112      	bne.n	8001692 <HAL_RCC_OscConfig+0x62>
 800166c:	4b90      	ldr	r3, [pc, #576]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001674:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001678:	d10b      	bne.n	8001692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	4b8d      	ldr	r3, [pc, #564]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d06c      	beq.n	8001760 <HAL_RCC_OscConfig+0x130>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d168      	bne.n	8001760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e26b      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x7a>
 800169c:	4a84      	ldr	r2, [pc, #528]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800169e:	4b84      	ldr	r3, [pc, #528]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e02e      	b.n	8001708 <HAL_RCC_OscConfig+0xd8>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x9c>
 80016b2:	4a7f      	ldr	r2, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016b4:	4b7e      	ldr	r3, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4a7c      	ldr	r2, [pc, #496]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016c0:	4b7b      	ldr	r3, [pc, #492]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xd8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0xc0>
 80016d6:	4a76      	ldr	r2, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4a73      	ldr	r2, [pc, #460]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016e4:	4b72      	ldr	r3, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xd8>
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016f2:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4a6c      	ldr	r2, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80016fe:	4b6c      	ldr	r3, [pc, #432]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fcc8 	bl	80010a4 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fcc4 	bl	80010a4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e21f      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xe8>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fcb4 	bl	80010a4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff fcb0 	bl	80010a4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e20b      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x110>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d069      	beq.n	8001842 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x190>
 8001786:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x17a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e1df      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4941      	ldr	r1, [pc, #260]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ac:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e040      	b.n	8001842 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d023      	beq.n	8001810 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4a39      	ldr	r2, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fc66 	bl	80010a4 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fc62 	bl	80010a4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e1bd      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	492d      	ldr	r1, [pc, #180]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017fc:	4b2c      	ldr	r3, [pc, #176]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
 800180e:	e018      	b.n	8001842 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001812:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fc42 	bl	80010a4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fc3e 	bl	80010a4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e199      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d038      	beq.n	80018c0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001856:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800185a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001862:	f7ff fc1f 	bl	80010a4 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff fc1b 	bl	80010a4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e176      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800187e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x23a>
 8001888:	e01a      	b.n	80018c0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_RCC_OscConfig+0x280>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff fc05 	bl	80010a4 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189e:	f7ff fc01 	bl	80010a4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d903      	bls.n	80018b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e15c      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
 80018b0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	4b91      	ldr	r3, [pc, #580]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a4 	beq.w	8001a16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ce:	4b8b      	ldr	r3, [pc, #556]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10d      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4a88      	ldr	r2, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80018dc:	4b87      	ldr	r3, [pc, #540]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018f2:	2301      	movs	r3, #1
 80018f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f6:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d118      	bne.n	8001934 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001902:	4a7f      	ldr	r2, [pc, #508]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001904:	4b7e      	ldr	r3, [pc, #504]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190e:	f7ff fbc9 	bl	80010a4 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff fbc5 	bl	80010a4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b64      	cmp	r3, #100	; 0x64
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e120      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_RCC_OscConfig+0x4d0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x31a>
 800193c:	4a6f      	ldr	r2, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 800193e:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	e02d      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x33c>
 8001952:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	4a67      	ldr	r2, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	f023 0304 	bic.w	r3, r3, #4
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	e01c      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b05      	cmp	r3, #5
 8001972:	d10c      	bne.n	800198e <HAL_RCC_OscConfig+0x35e>
 8001974:	4a61      	ldr	r2, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001982:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	e00b      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
 800198e:	4a5b      	ldr	r2, [pc, #364]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001990:	4b5a      	ldr	r3, [pc, #360]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 800199c:	4b57      	ldr	r3, [pc, #348]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d015      	beq.n	80019da <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fb79 	bl	80010a4 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff fb75 	bl	80010a4 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0ce      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019cc:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ee      	beq.n	80019b6 <HAL_RCC_OscConfig+0x386>
 80019d8:	e014      	b.n	8001a04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fb63 	bl	80010a4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fb5f 	bl	80010a4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e0b8      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ee      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0a:	4a3c      	ldr	r2, [pc, #240]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 80a4 	beq.w	8001b68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d06b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d149      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a34:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb30 	bl	80010a4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff fb2c 	bl	80010a4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e087      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fb00 	bl	80010a4 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fafc 	bl	80010a4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e057      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x478>
 8001ac6:	e04f      	b.n	8001b68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fae6 	bl	80010a4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff fae2 	bl	80010a4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e03d      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_OscConfig+0x4cc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x4ac>
 8001afa:	e035      	b.n	8001b68 <HAL_RCC_OscConfig+0x538>
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x544>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d028      	beq.n	8001b64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d121      	bne.n	8001b64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d11a      	bne.n	8001b64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d111      	bne.n	8001b64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0d0      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d210      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4967      	ldr	r1, [pc, #412]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 020f 	bic.w	r2, r3, #15
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0b8      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd8:	4a59      	ldr	r2, [pc, #356]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bda:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001be2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf0:	4a53      	ldr	r2, [pc, #332]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf2:	4b53      	ldr	r3, [pc, #332]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4950      	ldr	r1, [pc, #320]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	4b50      	ldr	r3, [pc, #320]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d040      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d115      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e07f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	4b41      	ldr	r3, [pc, #260]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e073      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e06b      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5a:	4939      	ldr	r1, [pc, #228]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5c:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f023 0203 	bic.w	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c6c:	f7ff fa1a 	bl	80010a4 <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c74:	f7ff fa16 	bl	80010a4 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e053      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 020c 	and.w	r2, r3, #12
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1eb      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 020f 	and.w	r2, r3, #15
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d910      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4924      	ldr	r1, [pc, #144]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 020f 	bic.w	r2, r3, #15
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 020f 	and.w	r2, r3, #15
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e032      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4919      	ldr	r1, [pc, #100]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cf6:	4912      	ldr	r1, [pc, #72]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0a:	f000 f821 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4601      	mov	r1, r0
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_ClockConfig+0x1c8>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_RCC_ClockConfig+0x1cc>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1d0>)
 8001d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x1d4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f976 	bl	800101c <HAL_InitTick>

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023c00 	.word	0x40023c00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	08004d08 	.word	0x08004d08
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60fa      	str	r2, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	617a      	str	r2, [r7, #20]
 8001d60:	2200      	movs	r2, #0
 8001d62:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8001d64:	2200      	movs	r2, #0
 8001d66:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d68:	4a51      	ldr	r2, [pc, #324]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d6a:	6892      	ldr	r2, [r2, #8]
 8001d6c:	f002 020c 	and.w	r2, r2, #12
 8001d70:	2a04      	cmp	r2, #4
 8001d72:	d007      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x34>
 8001d74:	2a08      	cmp	r2, #8
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	f040 8090 	bne.w	8001e9e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d80:	613b      	str	r3, [r7, #16]
      break;
 8001d82:	e08f      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d86:	613b      	str	r3, [r7, #16]
      break;
 8001d88:	e08c      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8a:	4a49      	ldr	r2, [pc, #292]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d8c:	6852      	ldr	r2, [r2, #4]
 8001d8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001d92:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001d94:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d96:	6852      	ldr	r2, [r2, #4]
 8001d98:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	f04f 0400 	mov.w	r4, #0
 8001daa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	ea03 0301 	and.w	r3, r3, r1
 8001db6:	ea04 0402 	and.w	r4, r4, r2
 8001dba:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dbc:	fb02 f104 	mul.w	r1, r2, r4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	fb02 f203 	mul.w	r2, r2, r3
 8001dc6:	440a      	add	r2, r1
 8001dc8:	493b      	ldr	r1, [pc, #236]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dca:	fba3 0101 	umull	r0, r1, r3, r1
 8001dce:	1853      	adds	r3, r2, r1
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4623      	mov	r3, r4
 8001ddc:	f7fe fa20 	bl	8000220 <__aeabi_uldivmod>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e04c      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de8:	4a31      	ldr	r2, [pc, #196]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dea:	6852      	ldr	r2, [r2, #4]
 8001dec:	0992      	lsrs	r2, r2, #6
 8001dee:	4611      	mov	r1, r2
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001df8:	f04f 0600 	mov.w	r6, #0
 8001dfc:	ea05 0501 	and.w	r5, r5, r1
 8001e00:	ea06 0602 	and.w	r6, r6, r2
 8001e04:	4629      	mov	r1, r5
 8001e06:	4632      	mov	r2, r6
 8001e08:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001e0c:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001e10:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8001e14:	4651      	mov	r1, sl
 8001e16:	465a      	mov	r2, fp
 8001e18:	46aa      	mov	sl, r5
 8001e1a:	46b3      	mov	fp, r6
 8001e1c:	4655      	mov	r5, sl
 8001e1e:	465e      	mov	r6, fp
 8001e20:	1b4d      	subs	r5, r1, r5
 8001e22:	eb62 0606 	sbc.w	r6, r2, r6
 8001e26:	4629      	mov	r1, r5
 8001e28:	4632      	mov	r2, r6
 8001e2a:	0194      	lsls	r4, r2, #6
 8001e2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e30:	018b      	lsls	r3, r1, #6
 8001e32:	1a5b      	subs	r3, r3, r1
 8001e34:	eb64 0402 	sbc.w	r4, r4, r2
 8001e38:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001e3c:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001e40:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8001e44:	4643      	mov	r3, r8
 8001e46:	464c      	mov	r4, r9
 8001e48:	4655      	mov	r5, sl
 8001e4a:	465e      	mov	r6, fp
 8001e4c:	18ed      	adds	r5, r5, r3
 8001e4e:	eb46 0604 	adc.w	r6, r6, r4
 8001e52:	462b      	mov	r3, r5
 8001e54:	4634      	mov	r4, r6
 8001e56:	02a2      	lsls	r2, r4, #10
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	029b      	lsls	r3, r3, #10
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f04f 0400 	mov.w	r4, #0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4623      	mov	r3, r4
 8001e78:	f7fe f9d2 	bl	8000220 <__aeabi_uldivmod>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	460c      	mov	r4, r1
 8001e80:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco / pllp;
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	613b      	str	r3, [r7, #16]
      break;
 8001e9c:	e002      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ea0:	613b      	str	r3, [r7, #16]
      break;
 8001ea2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea4:	693b      	ldr	r3, [r7, #16]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	017d7840 	.word	0x017d7840

08001ebc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4601      	mov	r1, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08004d18 	.word	0x08004d18

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4601      	mov	r1, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4a03      	ldr	r2, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08004d18 	.word	0x08004d18

08001f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d012      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f48:	4a65      	ldr	r2, [pc, #404]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f52:	6093      	str	r3, [r2, #8]
 8001f54:	4962      	ldr	r1, [pc, #392]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f56:	4b62      	ldr	r3, [pc, #392]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f7a:	4959      	ldr	r1, [pc, #356]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f7c:	4b58      	ldr	r3, [pc, #352]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f98:	d101      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d017      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fb6:	494a      	ldr	r1, [pc, #296]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fb8:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd4:	d101      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 808b 	beq.w	800210a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ff6:	4b3a      	ldr	r3, [pc, #232]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8002000:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800200c:	4a35      	ldr	r2, [pc, #212]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002018:	f7ff f844 	bl	80010a4 <HAL_GetTick>
 800201c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7ff f840 	bl	80010a4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2bc      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800203e:	4b28      	ldr	r3, [pc, #160]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002046:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d035      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x196>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d02e      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002064:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002074:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800207e:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b01      	cmp	r3, #1
 800208e:	d114      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7ff f808 	bl	80010a4 <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7ff f804 	bl	80010a4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e27e      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ee      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020c6:	d111      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020ca:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80020d8:	400b      	ands	r3, r1
 80020da:	4313      	orrs	r3, r2
 80020dc:	6083      	str	r3, [r0, #8]
 80020de:	e00b      	b.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000
 80020e8:	0ffffcff 	.word	0x0ffffcff
 80020ec:	4aa4      	ldr	r2, [pc, #656]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020ee:	4ba4      	ldr	r3, [pc, #656]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020f6:	6093      	str	r3, [r2, #8]
 80020f8:	49a1      	ldr	r1, [pc, #644]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020fa:	4ba1      	ldr	r3, [pc, #644]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	4313      	orrs	r3, r2
 8002108:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002116:	4a9a      	ldr	r2, [pc, #616]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002118:	4b99      	ldr	r3, [pc, #612]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800211a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800211e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002122:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002126:	4996      	ldr	r1, [pc, #600]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002128:	4b95      	ldr	r3, [pc, #596]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800212a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002144:	498e      	ldr	r1, [pc, #568]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002166:	4986      	ldr	r1, [pc, #536]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002168:	4b85      	ldr	r3, [pc, #532]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002188:	497d      	ldr	r1, [pc, #500]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002198:	4313      	orrs	r3, r2
 800219a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021aa:	4975      	ldr	r1, [pc, #468]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021ac:	4b74      	ldr	r3, [pc, #464]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021cc:	496c      	ldr	r1, [pc, #432]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021ce:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f023 020c 	bic.w	r2, r3, #12
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ee:	4964      	ldr	r1, [pc, #400]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00a      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002210:	495b      	ldr	r1, [pc, #364]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002232:	4953      	ldr	r1, [pc, #332]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002234:	4b52      	ldr	r3, [pc, #328]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002254:	494a      	ldr	r1, [pc, #296]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002276:	4942      	ldr	r1, [pc, #264]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002278:	4b41      	ldr	r3, [pc, #260]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800229a:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d011      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ba:	4931      	ldr	r1, [pc, #196]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022d8:	d101      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80022da:	2301      	movs	r3, #1
 80022dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ea:	4925      	ldr	r1, [pc, #148]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ec:	4b24      	ldr	r3, [pc, #144]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800230c:	491c      	ldr	r1, [pc, #112]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002314:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800232e:	4914      	ldr	r1, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002330:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d006      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 809d 	beq.w	8002492 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002358:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fe9e 	bl	80010a4 <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800236a:	e00b      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800236c:	f7fe fe9a 	bl	80010a4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d904      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e116      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x688>
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002384:	4b8b      	ldr	r3, [pc, #556]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ed      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d113      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023a4:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80023a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023aa:	0e1b      	lsrs	r3, r3, #24
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80023b2:	4980      	ldr	r1, [pc, #512]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	019a      	lsls	r2, r3, #6
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	071b      	lsls	r3, r3, #28
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d024      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f6:	d11f      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023f8:	4b6e      	ldr	r3, [pc, #440]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80023fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fe:	0f1b      	lsrs	r3, r3, #28
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002406:	496b      	ldr	r1, [pc, #428]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	019a      	lsls	r2, r3, #6
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	061b      	lsls	r3, r3, #24
 8002414:	431a      	orrs	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	071b      	lsls	r3, r3, #28
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002420:	4964      	ldr	r1, [pc, #400]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002428:	f023 021f 	bic.w	r2, r3, #31
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	3b01      	subs	r3, #1
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00d      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002444:	495b      	ldr	r1, [pc, #364]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	019a      	lsls	r2, r3, #6
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	071b      	lsls	r3, r3, #28
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002460:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002462:	4b54      	ldr	r3, [pc, #336]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800246a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe fe1a 	bl	80010a4 <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002474:	f7fe fe16 	bl	80010a4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e092      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002486:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 8088 	bne.w	80025aa <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800249a:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800249c:	4b45      	ldr	r3, [pc, #276]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a6:	f7fe fdfd 	bl	80010a4 <HAL_GetTick>
 80024aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024ae:	f7fe fdf9 	bl	80010a4 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e075      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024c0:	4b3c      	ldr	r3, [pc, #240]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024cc:	d0ef      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d024      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d120      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f6:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002504:	492b      	ldr	r1, [pc, #172]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	019a      	lsls	r2, r3, #6
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	041b      	lsls	r3, r3, #16
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	061b      	lsls	r3, r3, #24
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002526:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	3b01      	subs	r3, #1
 8002530:	021b      	lsls	r3, r3, #8
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d018      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254c:	d113      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	0e1b      	lsrs	r3, r3, #24
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800255c:	4915      	ldr	r1, [pc, #84]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	019a      	lsls	r2, r3, #6
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002582:	f7fe fd8f 	bl	80010a4 <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800258a:	f7fe fd8b 	bl	80010a4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b64      	cmp	r3, #100	; 0x64
 8002596:	d901      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e007      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a8:	d1ef      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800

080025b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e09b      	b.n	8002702 <HAL_SPI_Init+0x14a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d108      	bne.n	80025e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025da:	d009      	beq.n	80025f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
 80025e2:	e005      	b.n	80025f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fb24 	bl	8000c58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002630:	d902      	bls.n	8002638 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e002      	b.n	800263e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002646:	d007      	beq.n	8002658 <HAL_SPI_Init+0xa0>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002650:	d002      	beq.n	8002658 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6852      	ldr	r2, [r2, #4]
 8002660:	f402 7182 	and.w	r1, r2, #260	; 0x104
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6892      	ldr	r2, [r2, #8]
 8002668:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6912      	ldr	r2, [r2, #16]
 8002672:	f002 0202 	and.w	r2, r2, #2
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6952      	ldr	r2, [r2, #20]
 800267c:	f002 0201 	and.w	r2, r2, #1
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6992      	ldr	r2, [r2, #24]
 8002686:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	69d2      	ldr	r2, [r2, #28]
 8002690:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002694:	4311      	orrs	r1, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a12      	ldr	r2, [r2, #32]
 800269a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800269e:	4311      	orrs	r1, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026a4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6992      	ldr	r2, [r2, #24]
 80026b4:	0c12      	lsrs	r2, r2, #16
 80026b6:	f002 0104 	and.w	r1, r2, #4
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026be:	f002 0210 	and.w	r2, r2, #16
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026c8:	f002 0208 	and.w	r2, r2, #8
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80026d6:	4311      	orrs	r1, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026de:	430a      	orrs	r2, r1
 80026e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	69d2      	ldr	r2, [r2, #28]
 80026ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b08a      	sub	sp, #40	; 0x28
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002718:	2301      	movs	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_SPI_TransmitReceive+0x26>
 800272c:	2302      	movs	r3, #2
 800272e:	e1f8      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x418>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002738:	f7fe fcb4 	bl	80010a4 <HAL_GetTick>
 800273c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002744:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002754:	7efb      	ldrb	r3, [r7, #27]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d00e      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x6e>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002760:	d106      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d102      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x66>
 800276a:	7efb      	ldrb	r3, [r7, #27]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d003      	beq.n	8002778 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002770:	2302      	movs	r3, #2
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002776:	e1ca      	b.n	8002b0e <HAL_SPI_TransmitReceive+0x404>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_SPI_TransmitReceive+0x80>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_SPI_TransmitReceive+0x80>
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002790:	e1bd      	b.n	8002b0e <HAL_SPI_TransmitReceive+0x404>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b04      	cmp	r3, #4
 800279c:	d003      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2205      	movs	r2, #5
 80027a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	887a      	ldrh	r2, [r7, #2]
 80027b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027e8:	d802      	bhi.n	80027f0 <HAL_SPI_TransmitReceive+0xe6>
 80027ea:	8a3b      	ldrh	r3, [r7, #16]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d908      	bls.n	8002802 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	6852      	ldr	r2, [r2, #4]
 80027fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	e007      	b.n	8002812 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6852      	ldr	r2, [r2, #4]
 800280c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002810:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d007      	beq.n	8002830 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002838:	d97c      	bls.n	8002934 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x13e>
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d169      	bne.n	800291c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	1c9a      	adds	r2, r3, #2
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800286c:	e056      	b.n	800291c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b02      	cmp	r3, #2
 800287a:	d11b      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x1aa>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002880:	b29b      	uxth	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d016      	beq.n	80028b4 <HAL_SPI_TransmitReceive+0x1aa>
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	d113      	bne.n	80028b4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d11c      	bne.n	80028fc <HAL_SPI_TransmitReceive+0x1f2>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	68d2      	ldr	r2, [r2, #12]
 80028d8:	b292      	uxth	r2, r2
 80028da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	1c9a      	adds	r2, r3, #2
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028f8:	2301      	movs	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028fc:	f7fe fbd2 	bl	80010a4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	1ad2      	subs	r2, r2, r3
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	429a      	cmp	r2, r3
 800290a:	d307      	bcc.n	800291c <HAL_SPI_TransmitReceive+0x212>
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002912:	d003      	beq.n	800291c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800291a:	e0f8      	b.n	8002b0e <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1a3      	bne.n	800286e <HAL_SPI_TransmitReceive+0x164>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d19d      	bne.n	800286e <HAL_SPI_TransmitReceive+0x164>
 8002932:	e0de      	b.n	8002af2 <HAL_SPI_TransmitReceive+0x3e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x23a>
 800293c:	8a7b      	ldrh	r3, [r7, #18]
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 80ca 	bne.w	8002ad8 <HAL_SPI_TransmitReceive+0x3ce>
    {
      if (hspi->TxXferCount > 1U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d912      	bls.n	8002974 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295e:	1c9a      	adds	r2, r3, #2
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b02      	subs	r3, #2
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002972:	e0b1      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x3ce>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800299a:	e09d      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x3ce>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d134      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x30a>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02f      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x30a>
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d12c      	bne.n	8002a14 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d912      	bls.n	80029ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029cc:	8812      	ldrh	r2, [r2, #0]
 80029ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b02      	subs	r3, #2
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e8:	e012      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d147      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x3a8>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d041      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0x3a8>
      {
        if (hspi->RxXferCount > 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d923      	bls.n	8002a82 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	68d2      	ldr	r2, [r2, #12]
 8002a44:	b292      	uxth	r2, r2
 8002a46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	1c9a      	adds	r2, r3, #2
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b02      	subs	r3, #2
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d81e      	bhi.n	8002aae <HAL_SPI_TransmitReceive+0x3a4>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	6852      	ldr	r2, [r2, #4]
 8002a7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	e015      	b.n	8002aae <HAL_SPI_TransmitReceive+0x3a4>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	320c      	adds	r2, #12
 8002a8c:	7812      	ldrb	r2, [r2, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ab2:	f7fe faf7 	bl	80010a4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	1ad2      	subs	r2, r2, r3
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d303      	bcc.n	8002aca <HAL_SPI_TransmitReceive+0x3c0>
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d102      	bne.n	8002ad0 <HAL_SPI_TransmitReceive+0x3c6>
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <HAL_SPI_TransmitReceive+0x3ce>
      {
        errorcode = HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ad6:	e01a      	b.n	8002b0e <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f af5c 	bne.w	800299c <HAL_SPI_TransmitReceive+0x292>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f af55 	bne.w	800299c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f932 	bl	8002d60 <SPI_EndRxTxTransaction>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x404>
  {
    errorcode = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3728      	adds	r7, #40	; 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
	...

08002b2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b3c:	f7fe fab2 	bl	80010a4 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	1a9a      	subs	r2, r3, r2
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b4c:	f7fe faaa 	bl	80010a4 <HAL_GetTick>
 8002b50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	015b      	lsls	r3, r3, #5
 8002b58:	0d1b      	lsrs	r3, r3, #20
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b62:	e054      	b.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d050      	beq.n	8002c0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b6c:	f7fe fa9a 	bl	80010a4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	1ad2      	subs	r2, r2, r3
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d202      	bcs.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d13d      	bne.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	6852      	ldr	r2, [r2, #4]
 8002b8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b9a:	d111      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba4:	d004      	beq.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d107      	bne.n	8002bc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc8:	d10f      	bne.n	8002bea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e017      	b.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	bf0c      	ite	eq
 8002c1e:	2301      	moveq	r3, #1
 8002c20:	2300      	movne	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	461a      	mov	r2, r3
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d19b      	bne.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002c4a:	f7fe fa2b 	bl	80010a4 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	1a9a      	subs	r2, r3, r2
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c5a:	f7fe fa23 	bl	80010a4 <HAL_GetTick>
 8002c5e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c60:	4b3e      	ldr	r3, [pc, #248]	; (8002d5c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00da      	lsls	r2, r3, #3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	0d1b      	lsrs	r3, r3, #20
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c78:	e062      	b.n	8002d40 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c80:	d109      	bne.n	8002c96 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002c94:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9c:	d050      	beq.n	8002d40 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c9e:	f7fe fa01 	bl	80010a4 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d202      	bcs.n	8002cb4 <SPI_WaitFifoStateUntilTimeout+0x78>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d13d      	bne.n	8002d30 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	6852      	ldr	r2, [r2, #4]
 8002cbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ccc:	d111      	bne.n	8002cf2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cd6:	d004      	beq.n	8002ce2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce0:	d107      	bne.n	8002cf2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfa:	d10f      	bne.n	8002d1c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	6812      	ldr	r2, [r2, #0]
 8002d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e010      	b.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	401a      	ands	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d194      	bne.n	8002c7a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff ff5f 	bl	8002c3c <SPI_WaitFifoStateUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e027      	b.n	8002de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff fec4 	bl	8002b2c <SPI_WaitFlagStateUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d007      	beq.n	8002dba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e014      	b.n	8002de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff ff38 	bl	8002c3c <SPI_WaitFifoStateUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd6:	f043 0220 	orr.w	r2, r3, #32
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e000      	b.n	8002de4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e049      	b.n	8002e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd ff82 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	f000 fa60 	bl	80032f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e049      	b.n	8002f40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f841 	bl	8002f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 fa09 	bl	80032f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0fd      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x216>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b14      	cmp	r3, #20
 8002f82:	f200 80f0 	bhi.w	8003166 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08003167 	.word	0x08003167
 8002f94:	08003167 	.word	0x08003167
 8002f98:	08003167 	.word	0x08003167
 8002f9c:	08003021 	.word	0x08003021
 8002fa0:	08003167 	.word	0x08003167
 8002fa4:	08003167 	.word	0x08003167
 8002fa8:	08003167 	.word	0x08003167
 8002fac:	08003063 	.word	0x08003063
 8002fb0:	08003167 	.word	0x08003167
 8002fb4:	08003167 	.word	0x08003167
 8002fb8:	08003167 	.word	0x08003167
 8002fbc:	080030a3 	.word	0x080030a3
 8002fc0:	08003167 	.word	0x08003167
 8002fc4:	08003167 	.word	0x08003167
 8002fc8:	08003167 	.word	0x08003167
 8002fcc:	080030e5 	.word	0x080030e5
 8002fd0:	08003167 	.word	0x08003167
 8002fd4:	08003167 	.word	0x08003167
 8002fd8:	08003167 	.word	0x08003167
 8002fdc:	08003125 	.word	0x08003125
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa22 	bl	8003430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	6992      	ldr	r2, [r2, #24]
 8002ff6:	f042 0208 	orr.w	r2, r2, #8
 8002ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	6992      	ldr	r2, [r2, #24]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	6991      	ldr	r1, [r2, #24]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	6912      	ldr	r2, [r2, #16]
 800301a:	430a      	orrs	r2, r1
 800301c:	619a      	str	r2, [r3, #24]
      break;
 800301e:	e0a3      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fa74 	bl	8003514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	6992      	ldr	r2, [r2, #24]
 8003036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	6992      	ldr	r2, [r2, #24]
 8003046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	6991      	ldr	r1, [r2, #24]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	6912      	ldr	r2, [r2, #16]
 800305a:	0212      	lsls	r2, r2, #8
 800305c:	430a      	orrs	r2, r1
 800305e:	619a      	str	r2, [r3, #24]
      break;
 8003060:	e082      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 facb 	bl	8003604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	69d2      	ldr	r2, [r2, #28]
 8003078:	f042 0208 	orr.w	r2, r2, #8
 800307c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	69d2      	ldr	r2, [r2, #28]
 8003088:	f022 0204 	bic.w	r2, r2, #4
 800308c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	69d1      	ldr	r1, [r2, #28]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	6912      	ldr	r2, [r2, #16]
 800309c:	430a      	orrs	r2, r1
 800309e:	61da      	str	r2, [r3, #28]
      break;
 80030a0:	e062      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fb21 	bl	80036f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	69d2      	ldr	r2, [r2, #28]
 80030b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	69d2      	ldr	r2, [r2, #28]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	69d1      	ldr	r1, [r2, #28]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	6912      	ldr	r2, [r2, #16]
 80030dc:	0212      	lsls	r2, r2, #8
 80030de:	430a      	orrs	r2, r1
 80030e0:	61da      	str	r2, [r3, #28]
      break;
 80030e2:	e041      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 fb58 	bl	80037a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030fa:	f042 0208 	orr.w	r2, r2, #8
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800310a:	f022 0204 	bic.w	r2, r2, #4
 800310e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	6912      	ldr	r2, [r2, #16]
 800311e:	430a      	orrs	r2, r1
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003122:	e021      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fb8a 	bl	8003844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800313a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800313e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	6812      	ldr	r2, [r2, #0]
 8003158:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	6912      	ldr	r2, [r2, #16]
 800315e:	0212      	lsls	r2, r2, #8
 8003160:	430a      	orrs	r2, r1
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003164:	e000      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8003166:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop

0800317c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x18>
 8003190:	2302      	movs	r3, #2
 8003192:	e0a6      	b.n	80032e2 <HAL_TIM_ConfigClockSource+0x166>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_TIM_ConfigClockSource+0x170>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d067      	beq.n	800329c <HAL_TIM_ConfigClockSource+0x120>
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d80b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x6c>
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d073      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x140>
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d802      	bhi.n	80031de <HAL_TIM_ConfigClockSource+0x62>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d06f      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031dc:	e078      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d06c      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x140>
 80031e2:	2b30      	cmp	r3, #48	; 0x30
 80031e4:	d06a      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031e6:	e073      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d00d      	beq.n	8003208 <HAL_TIM_ConfigClockSource+0x8c>
 80031ec:	2b70      	cmp	r3, #112	; 0x70
 80031ee:	d804      	bhi.n	80031fa <HAL_TIM_ConfigClockSource+0x7e>
 80031f0:	2b50      	cmp	r3, #80	; 0x50
 80031f2:	d033      	beq.n	800325c <HAL_TIM_ConfigClockSource+0xe0>
 80031f4:	2b60      	cmp	r3, #96	; 0x60
 80031f6:	d041      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031f8:	e06a      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	d066      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x152>
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d017      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003206:	e063      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f000 fbe2 	bl	80039e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800322a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	609a      	str	r2, [r3, #8]
      break;
 8003234:	e04c      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f000 fbcb 	bl	80039e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003258:	609a      	str	r2, [r3, #8]
      break;
 800325a:	e039      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	461a      	mov	r2, r3
 800326a:	f000 fb3f 	bl	80038ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2150      	movs	r1, #80	; 0x50
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fb98 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 800327a:	e029      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	461a      	mov	r2, r3
 800328a:	f000 fb5e 	bl	800394a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2160      	movs	r1, #96	; 0x60
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb88 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 800329a:	e019      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f000 fb1f 	bl	80038ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fb78 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80032ba:	e009      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f000 fb6f 	bl	80039aa <TIM_ITRx_SetConfig>
        break;
 80032cc:	e000      	b.n	80032d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80032ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	fffeff88 	.word	0xfffeff88

080032f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a40      	ldr	r2, [pc, #256]	; (8003404 <TIM_Base_SetConfig+0x114>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d013      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d00f      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3d      	ldr	r2, [pc, #244]	; (8003408 <TIM_Base_SetConfig+0x118>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00b      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3c      	ldr	r2, [pc, #240]	; (800340c <TIM_Base_SetConfig+0x11c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a3b      	ldr	r2, [pc, #236]	; (8003410 <TIM_Base_SetConfig+0x120>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a3a      	ldr	r2, [pc, #232]	; (8003414 <TIM_Base_SetConfig+0x124>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d108      	bne.n	8003342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <TIM_Base_SetConfig+0x114>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02b      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d027      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2c      	ldr	r2, [pc, #176]	; (8003408 <TIM_Base_SetConfig+0x118>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d023      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a2b      	ldr	r2, [pc, #172]	; (800340c <TIM_Base_SetConfig+0x11c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d01f      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a2a      	ldr	r2, [pc, #168]	; (8003410 <TIM_Base_SetConfig+0x120>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01b      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a29      	ldr	r2, [pc, #164]	; (8003414 <TIM_Base_SetConfig+0x124>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d017      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a28      	ldr	r2, [pc, #160]	; (8003418 <TIM_Base_SetConfig+0x128>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <TIM_Base_SetConfig+0x12c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a26      	ldr	r2, [pc, #152]	; (8003420 <TIM_Base_SetConfig+0x130>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a25      	ldr	r2, [pc, #148]	; (8003424 <TIM_Base_SetConfig+0x134>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a24      	ldr	r2, [pc, #144]	; (8003428 <TIM_Base_SetConfig+0x138>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a23      	ldr	r2, [pc, #140]	; (800342c <TIM_Base_SetConfig+0x13c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d108      	bne.n	80033b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <TIM_Base_SetConfig+0x114>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_Base_SetConfig+0xf8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0c      	ldr	r2, [pc, #48]	; (8003414 <TIM_Base_SetConfig+0x124>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d103      	bne.n	80033f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	615a      	str	r2, [r3, #20]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40010400 	.word	0x40010400
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800
 8003424:	40001800 	.word	0x40001800
 8003428:	40001c00 	.word	0x40001c00
 800342c:	40002000 	.word	0x40002000

08003430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <TIM_OC1_SetConfig+0xd8>)
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 0302 	bic.w	r3, r3, #2
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a21      	ldr	r2, [pc, #132]	; (800350c <TIM_OC1_SetConfig+0xdc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_OC1_SetConfig+0x64>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a20      	ldr	r2, [pc, #128]	; (8003510 <TIM_OC1_SetConfig+0xe0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d10c      	bne.n	80034ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0308 	bic.w	r3, r3, #8
 800349a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a16      	ldr	r2, [pc, #88]	; (800350c <TIM_OC1_SetConfig+0xdc>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_OC1_SetConfig+0x8e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <TIM_OC1_SetConfig+0xe0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d111      	bne.n	80034e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	621a      	str	r2, [r3, #32]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	fffeff8f 	.word	0xfffeff8f
 800350c:	40010000 	.word	0x40010000
 8003510:	40010400 	.word	0x40010400

08003514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f023 0210 	bic.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4b2e      	ldr	r3, [pc, #184]	; (80035f8 <TIM_OC2_SetConfig+0xe4>)
 8003540:	4013      	ands	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	021b      	lsls	r3, r3, #8
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 0320 	bic.w	r3, r3, #32
 800355e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a23      	ldr	r2, [pc, #140]	; (80035fc <TIM_OC2_SetConfig+0xe8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d003      	beq.n	800357c <TIM_OC2_SetConfig+0x68>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <TIM_OC2_SetConfig+0xec>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d10d      	bne.n	8003598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4313      	orrs	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <TIM_OC2_SetConfig+0xe8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_OC2_SetConfig+0x94>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <TIM_OC2_SetConfig+0xec>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d113      	bne.n	80035d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	feff8fff 	.word	0xfeff8fff
 80035fc:	40010000 	.word	0x40010000
 8003600:	40010400 	.word	0x40010400

08003604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <TIM_OC3_SetConfig+0xe0>)
 8003630:	4013      	ands	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0303 	bic.w	r3, r3, #3
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800364c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	021b      	lsls	r3, r3, #8
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a22      	ldr	r2, [pc, #136]	; (80036e8 <TIM_OC3_SetConfig+0xe4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_OC3_SetConfig+0x66>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <TIM_OC3_SetConfig+0xe8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10d      	bne.n	8003686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <TIM_OC3_SetConfig+0xe4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_OC3_SetConfig+0x92>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <TIM_OC3_SetConfig+0xe8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d113      	bne.n	80036be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800369c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	fffeff8f 	.word	0xfffeff8f
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40010400 	.word	0x40010400

080036f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <TIM_OC4_SetConfig+0xa4>)
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800373a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a13      	ldr	r2, [pc, #76]	; (8003798 <TIM_OC4_SetConfig+0xa8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC4_SetConfig+0x68>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <TIM_OC4_SetConfig+0xac>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d109      	bne.n	800376c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800375e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	feff8fff 	.word	0xfeff8fff
 8003798:	40010000 	.word	0x40010000
 800379c:	40010400 	.word	0x40010400

080037a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <TIM_OC5_SetConfig+0x98>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <TIM_OC5_SetConfig+0x9c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_OC5_SetConfig+0x5e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <TIM_OC5_SetConfig+0xa0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d109      	bne.n	8003812 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	621a      	str	r2, [r3, #32]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	fffeff8f 	.word	0xfffeff8f
 800383c:	40010000 	.word	0x40010000
 8003840:	40010400 	.word	0x40010400

08003844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <TIM_OC6_SetConfig+0x9c>)
 8003870:	4013      	ands	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	021b      	lsls	r3, r3, #8
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4313      	orrs	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	051b      	lsls	r3, r3, #20
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <TIM_OC6_SetConfig+0xa0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC6_SetConfig+0x60>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <TIM_OC6_SetConfig+0xa4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d109      	bne.n	80038b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	feff8fff 	.word	0xfeff8fff
 80038e4:	40010000 	.word	0x40010000
 80038e8:	40010400 	.word	0x40010400

080038ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 030a 	bic.w	r3, r3, #10
 8003928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0210 	bic.w	r2, r3, #16
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	031b      	lsls	r3, r3, #12
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f043 0307 	orr.w	r3, r3, #7
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	021a      	lsls	r2, r3, #8
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	609a      	str	r2, [r3, #8]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e040      	b.n	8003ab4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd f9c2 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6812      	ldr	r2, [r2, #0]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8be 	bl	8003be0 <UART_SetConfig>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e022      	b.n	8003ab4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb12 	bl	80040a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	6852      	ldr	r2, [r2, #4]
 8003a86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fb99 	bl	80041e4 <UART_CheckIdleState>
 8003ab2:	4603      	mov	r3, r0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d17f      	bne.n	8003bd4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Transmit+0x24>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e078      	b.n	8003bd6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Transmit+0x36>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e071      	b.n	8003bd6 <HAL_UART_Transmit+0x11a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2221      	movs	r2, #33	; 0x21
 8003b06:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b08:	f7fd facc 	bl	80010a4 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	88fa      	ldrh	r2, [r7, #6]
 8003b1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	d108      	bne.n	8003b3a <HAL_UART_Transmit+0x7e>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e003      	b.n	8003b42 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b4a:	e02b      	b.n	8003ba4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fb77 	bl	800424a <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e037      	b.n	8003bd6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e007      	b.n	8003b92 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1cd      	bne.n	8003b4c <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2140      	movs	r1, #64	; 0x40
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fb45 	bl	800424a <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e005      	b.n	8003bd6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	4bb3      	ldr	r3, [pc, #716]	; (8003edc <UART_SetConfig+0x2fc>)
 8003c10:	400b      	ands	r3, r1
 8003c12:	6979      	ldr	r1, [r7, #20]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	6852      	ldr	r2, [r2, #4]
 8003c22:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	68d2      	ldr	r2, [r2, #12]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4aa2      	ldr	r2, [pc, #648]	; (8003ee0 <UART_SetConfig+0x300>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d121      	bne.n	8003ca0 <UART_SetConfig+0xc0>
 8003c5c:	4ba1      	ldr	r3, [pc, #644]	; (8003ee4 <UART_SetConfig+0x304>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d816      	bhi.n	8003c98 <UART_SetConfig+0xb8>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0x90>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c87 	.word	0x08003c87
 8003c7c:	08003c93 	.word	0x08003c93
 8003c80:	2301      	movs	r3, #1
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e150      	b.n	8003f28 <UART_SetConfig+0x348>
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e14d      	b.n	8003f28 <UART_SetConfig+0x348>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	77fb      	strb	r3, [r7, #31]
 8003c90:	e14a      	b.n	8003f28 <UART_SetConfig+0x348>
 8003c92:	2308      	movs	r3, #8
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e147      	b.n	8003f28 <UART_SetConfig+0x348>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	bf00      	nop
 8003c9e:	e143      	b.n	8003f28 <UART_SetConfig+0x348>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a90      	ldr	r2, [pc, #576]	; (8003ee8 <UART_SetConfig+0x308>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d134      	bne.n	8003d14 <UART_SetConfig+0x134>
 8003caa:	4b8e      	ldr	r3, [pc, #568]	; (8003ee4 <UART_SetConfig+0x304>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d829      	bhi.n	8003d0c <UART_SetConfig+0x12c>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0xe0>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d0d 	.word	0x08003d0d
 8003cc8:	08003d0d 	.word	0x08003d0d
 8003ccc:	08003d0d 	.word	0x08003d0d
 8003cd0:	08003d01 	.word	0x08003d01
 8003cd4:	08003d0d 	.word	0x08003d0d
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003d0d 	.word	0x08003d0d
 8003ce0:	08003cfb 	.word	0x08003cfb
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d0d 	.word	0x08003d0d
 8003cf0:	08003d07 	.word	0x08003d07
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e116      	b.n	8003f28 <UART_SetConfig+0x348>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e113      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d00:	2304      	movs	r3, #4
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e110      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d06:	2308      	movs	r3, #8
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e10d      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	bf00      	nop
 8003d12:	e109      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a74      	ldr	r2, [pc, #464]	; (8003eec <UART_SetConfig+0x30c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d120      	bne.n	8003d60 <UART_SetConfig+0x180>
 8003d1e:	4b71      	ldr	r3, [pc, #452]	; (8003ee4 <UART_SetConfig+0x304>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d00f      	beq.n	8003d4c <UART_SetConfig+0x16c>
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d802      	bhi.n	8003d36 <UART_SetConfig+0x156>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <UART_SetConfig+0x160>
 8003d34:	e010      	b.n	8003d58 <UART_SetConfig+0x178>
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d005      	beq.n	8003d46 <UART_SetConfig+0x166>
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d009      	beq.n	8003d52 <UART_SetConfig+0x172>
 8003d3e:	e00b      	b.n	8003d58 <UART_SetConfig+0x178>
 8003d40:	2300      	movs	r3, #0
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e0f0      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d46:	2302      	movs	r3, #2
 8003d48:	77fb      	strb	r3, [r7, #31]
 8003d4a:	e0ed      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	77fb      	strb	r3, [r7, #31]
 8003d50:	e0ea      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d52:	2308      	movs	r3, #8
 8003d54:	77fb      	strb	r3, [r7, #31]
 8003d56:	e0e7      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	bf00      	nop
 8003d5e:	e0e3      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a62      	ldr	r2, [pc, #392]	; (8003ef0 <UART_SetConfig+0x310>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d120      	bne.n	8003dac <UART_SetConfig+0x1cc>
 8003d6a:	4b5e      	ldr	r3, [pc, #376]	; (8003ee4 <UART_SetConfig+0x304>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d00f      	beq.n	8003d98 <UART_SetConfig+0x1b8>
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d802      	bhi.n	8003d82 <UART_SetConfig+0x1a2>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <UART_SetConfig+0x1ac>
 8003d80:	e010      	b.n	8003da4 <UART_SetConfig+0x1c4>
 8003d82:	2b80      	cmp	r3, #128	; 0x80
 8003d84:	d005      	beq.n	8003d92 <UART_SetConfig+0x1b2>
 8003d86:	2bc0      	cmp	r3, #192	; 0xc0
 8003d88:	d009      	beq.n	8003d9e <UART_SetConfig+0x1be>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x1c4>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e0ca      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e0c7      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e0c4      	b.n	8003f28 <UART_SetConfig+0x348>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e0c1      	b.n	8003f28 <UART_SetConfig+0x348>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	bf00      	nop
 8003daa:	e0bd      	b.n	8003f28 <UART_SetConfig+0x348>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <UART_SetConfig+0x314>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d124      	bne.n	8003e00 <UART_SetConfig+0x220>
 8003db6:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <UART_SetConfig+0x304>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc4:	d012      	beq.n	8003dec <UART_SetConfig+0x20c>
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d802      	bhi.n	8003dd2 <UART_SetConfig+0x1f2>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d007      	beq.n	8003de0 <UART_SetConfig+0x200>
 8003dd0:	e012      	b.n	8003df8 <UART_SetConfig+0x218>
 8003dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd6:	d006      	beq.n	8003de6 <UART_SetConfig+0x206>
 8003dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ddc:	d009      	beq.n	8003df2 <UART_SetConfig+0x212>
 8003dde:	e00b      	b.n	8003df8 <UART_SetConfig+0x218>
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e0a0      	b.n	8003f28 <UART_SetConfig+0x348>
 8003de6:	2302      	movs	r3, #2
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e09d      	b.n	8003f28 <UART_SetConfig+0x348>
 8003dec:	2304      	movs	r3, #4
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e09a      	b.n	8003f28 <UART_SetConfig+0x348>
 8003df2:	2308      	movs	r3, #8
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e097      	b.n	8003f28 <UART_SetConfig+0x348>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	bf00      	nop
 8003dfe:	e093      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <UART_SetConfig+0x318>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d124      	bne.n	8003e54 <UART_SetConfig+0x274>
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <UART_SetConfig+0x304>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e18:	d012      	beq.n	8003e40 <UART_SetConfig+0x260>
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1e:	d802      	bhi.n	8003e26 <UART_SetConfig+0x246>
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <UART_SetConfig+0x254>
 8003e24:	e012      	b.n	8003e4c <UART_SetConfig+0x26c>
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e2a:	d006      	beq.n	8003e3a <UART_SetConfig+0x25a>
 8003e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e30:	d009      	beq.n	8003e46 <UART_SetConfig+0x266>
 8003e32:	e00b      	b.n	8003e4c <UART_SetConfig+0x26c>
 8003e34:	2301      	movs	r3, #1
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e076      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e073      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e40:	2304      	movs	r3, #4
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e070      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e46:	2308      	movs	r3, #8
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e06d      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	bf00      	nop
 8003e52:	e069      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <UART_SetConfig+0x31c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d124      	bne.n	8003ea8 <UART_SetConfig+0x2c8>
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <UART_SetConfig+0x304>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6c:	d012      	beq.n	8003e94 <UART_SetConfig+0x2b4>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d802      	bhi.n	8003e7a <UART_SetConfig+0x29a>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <UART_SetConfig+0x2a8>
 8003e78:	e012      	b.n	8003ea0 <UART_SetConfig+0x2c0>
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7e:	d006      	beq.n	8003e8e <UART_SetConfig+0x2ae>
 8003e80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e84:	d009      	beq.n	8003e9a <UART_SetConfig+0x2ba>
 8003e86:	e00b      	b.n	8003ea0 <UART_SetConfig+0x2c0>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e04c      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e049      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e94:	2304      	movs	r3, #4
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e046      	b.n	8003f28 <UART_SetConfig+0x348>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e043      	b.n	8003f28 <UART_SetConfig+0x348>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	bf00      	nop
 8003ea6:	e03f      	b.n	8003f28 <UART_SetConfig+0x348>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <UART_SetConfig+0x320>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d138      	bne.n	8003f24 <UART_SetConfig+0x344>
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <UART_SetConfig+0x304>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec0:	d026      	beq.n	8003f10 <UART_SetConfig+0x330>
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec6:	d802      	bhi.n	8003ece <UART_SetConfig+0x2ee>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01b      	beq.n	8003f04 <UART_SetConfig+0x324>
 8003ecc:	e026      	b.n	8003f1c <UART_SetConfig+0x33c>
 8003ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed2:	d01a      	beq.n	8003f0a <UART_SetConfig+0x32a>
 8003ed4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ed8:	d01d      	beq.n	8003f16 <UART_SetConfig+0x336>
 8003eda:	e01f      	b.n	8003f1c <UART_SetConfig+0x33c>
 8003edc:	efff69f3 	.word	0xefff69f3
 8003ee0:	40011000 	.word	0x40011000
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40004400 	.word	0x40004400
 8003eec:	40004800 	.word	0x40004800
 8003ef0:	40004c00 	.word	0x40004c00
 8003ef4:	40005000 	.word	0x40005000
 8003ef8:	40011400 	.word	0x40011400
 8003efc:	40007800 	.word	0x40007800
 8003f00:	40007c00 	.word	0x40007c00
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e00e      	b.n	8003f28 <UART_SetConfig+0x348>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e00b      	b.n	8003f28 <UART_SetConfig+0x348>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e008      	b.n	8003f28 <UART_SetConfig+0x348>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e005      	b.n	8003f28 <UART_SetConfig+0x348>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	bf00      	nop
 8003f22:	e001      	b.n	8003f28 <UART_SetConfig+0x348>
 8003f24:	2310      	movs	r3, #16
 8003f26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	d15c      	bne.n	8003fec <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8003f32:	7ffb      	ldrb	r3, [r7, #31]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d828      	bhi.n	8003f8a <UART_SetConfig+0x3aa>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0x360>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f65 	.word	0x08003f65
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f8b 	.word	0x08003f8b
 8003f50:	08003f7b 	.word	0x08003f7b
 8003f54:	08003f8b 	.word	0x08003f8b
 8003f58:	08003f8b 	.word	0x08003f8b
 8003f5c:	08003f8b 	.word	0x08003f8b
 8003f60:	08003f83 	.word	0x08003f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f64:	f7fd ffb6 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8003f68:	61b8      	str	r0, [r7, #24]
        break;
 8003f6a:	e013      	b.n	8003f94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f6c:	f7fd ffc6 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8003f70:	61b8      	str	r0, [r7, #24]
        break;
 8003f72:	e00f      	b.n	8003f94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <UART_SetConfig+0x4bc>)
 8003f76:	61bb      	str	r3, [r7, #24]
        break;
 8003f78:	e00c      	b.n	8003f94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fd fee9 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8003f7e:	61b8      	str	r0, [r7, #24]
        break;
 8003f80:	e008      	b.n	8003f94 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f86:	61bb      	str	r3, [r7, #24]
        break;
 8003f88:	e004      	b.n	8003f94 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	77bb      	strb	r3, [r7, #30]
        break;
 8003f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d074      	beq.n	8004084 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	005a      	lsls	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	441a      	add	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b0f      	cmp	r3, #15
 8003fb6:	d916      	bls.n	8003fe6 <UART_SetConfig+0x406>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fbe:	d212      	bcs.n	8003fe6 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f023 030f 	bic.w	r3, r3, #15
 8003fc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	89fb      	ldrh	r3, [r7, #14]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	89fa      	ldrh	r2, [r7, #14]
 8003fe2:	60da      	str	r2, [r3, #12]
 8003fe4:	e04e      	b.n	8004084 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	77bb      	strb	r3, [r7, #30]
 8003fea:	e04b      	b.n	8004084 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fec:	7ffb      	ldrb	r3, [r7, #31]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d827      	bhi.n	8004042 <UART_SetConfig+0x462>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x418>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004025 	.word	0x08004025
 8004000:	0800402d 	.word	0x0800402d
 8004004:	08004043 	.word	0x08004043
 8004008:	08004033 	.word	0x08004033
 800400c:	08004043 	.word	0x08004043
 8004010:	08004043 	.word	0x08004043
 8004014:	08004043 	.word	0x08004043
 8004018:	0800403b 	.word	0x0800403b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fd ff5a 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8004020:	61b8      	str	r0, [r7, #24]
        break;
 8004022:	e013      	b.n	800404c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7fd ff6a 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8004028:	61b8      	str	r0, [r7, #24]
        break;
 800402a:	e00f      	b.n	800404c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <UART_SetConfig+0x4bc>)
 800402e:	61bb      	str	r3, [r7, #24]
        break;
 8004030:	e00c      	b.n	800404c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004032:	f7fd fe8d 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8004036:	61b8      	str	r0, [r7, #24]
        break;
 8004038:	e008      	b.n	800404c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403e:	61bb      	str	r3, [r7, #24]
        break;
 8004040:	e004      	b.n	800404c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	77bb      	strb	r3, [r7, #30]
        break;
 800404a:	bf00      	nop
    }

    if (pclk != 0U)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d018      	beq.n	8004084 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	085a      	lsrs	r2, r3, #1
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	441a      	add	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	b29b      	uxth	r3, r3
 8004066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d908      	bls.n	8004080 <UART_SetConfig+0x4a0>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d204      	bcs.n	8004080 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	e001      	b.n	8004084 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004090:	7fbb      	ldrb	r3, [r7, #30]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	00f42400 	.word	0x00f42400

080040a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	6852      	ldr	r2, [r2, #4]
 80040be:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	6852      	ldr	r2, [r2, #4]
 80040e0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040e8:	430a      	orrs	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6812      	ldr	r2, [r2, #0]
 8004100:	6852      	ldr	r2, [r2, #4]
 8004102:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6812      	ldr	r2, [r2, #0]
 8004122:	6852      	ldr	r2, [r2, #4]
 8004124:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	6892      	ldr	r2, [r2, #8]
 8004146:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800414e:	430a      	orrs	r2, r1
 8004150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	6892      	ldr	r2, [r2, #8]
 8004168:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	6852      	ldr	r2, [r2, #4]
 800418a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d10a      	bne.n	80041b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	6852      	ldr	r2, [r2, #4]
 80041aa:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	6852      	ldr	r2, [r2, #4]
 80041cc:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af02      	add	r7, sp, #8
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f4:	f7fc ff56 	bl	80010a4 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d10e      	bne.n	8004226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f817 	bl	800424a <UART_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e00d      	b.n	8004242 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	603b      	str	r3, [r7, #0]
 8004256:	4613      	mov	r3, r2
 8004258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425a:	e05e      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d05a      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004264:	f7fc ff1e 	bl	80010a4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	1ad2      	subs	r2, r2, r3
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	429a      	cmp	r2, r3
 8004272:	d802      	bhi.n	800427a <UART_WaitOnFlagUntilTimeout+0x30>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d11b      	bne.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6812      	ldr	r2, [r2, #0]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004288:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	6892      	ldr	r2, [r2, #8]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e043      	b.n	800433a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d02c      	beq.n	800431a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d124      	bne.n	800431a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	6812      	ldr	r2, [r2, #0]
 80042e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042e8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	6892      	ldr	r2, [r2, #8]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e00f      	b.n	800433a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	429a      	cmp	r2, r3
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	429a      	cmp	r2, r3
 8004336:	d091      	beq.n	800425c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800437c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004348:	480d      	ldr	r0, [pc, #52]	; (8004380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800434a:	490e      	ldr	r1, [pc, #56]	; (8004384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800434c:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800434e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004350:	e002      	b.n	8004358 <LoopCopyDataInit>

08004352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004356:	3304      	adds	r3, #4

08004358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800435a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800435c:	d3f9      	bcc.n	8004352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800435e:	4a0b      	ldr	r2, [pc, #44]	; (800438c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004360:	4c0b      	ldr	r4, [pc, #44]	; (8004390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004364:	e001      	b.n	800436a <LoopFillZerobss>

08004366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004368:	3204      	adds	r2, #4

0800436a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800436a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800436c:	d3fb      	bcc.n	8004366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800436e:	f7fc fe35 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004372:	f000 f817 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004376:	f7fc fa3d 	bl	80007f4 <main>
  bx  lr    
 800437a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800437c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8004380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004384:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004388:	08004d94 	.word	0x08004d94
  ldr r2, =_sbss
 800438c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004390:	200001d4 	.word	0x200001d4

08004394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004394:	e7fe      	b.n	8004394 <ADC_IRQHandler>
	...

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	; (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	4e0d      	ldr	r6, [pc, #52]	; (80043dc <__libc_init_array+0x38>)
 80043a8:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <__libc_init_array+0x3c>)
 80043aa:	1ba4      	subs	r4, r4, r6
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	2500      	movs	r5, #0
 80043b0:	42a5      	cmp	r5, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	4e0b      	ldr	r6, [pc, #44]	; (80043e4 <__libc_init_array+0x40>)
 80043b6:	4c0c      	ldr	r4, [pc, #48]	; (80043e8 <__libc_init_array+0x44>)
 80043b8:	f000 fc8e 	bl	8004cd8 <_init>
 80043bc:	1ba4      	subs	r4, r4, r6
 80043be:	10a4      	asrs	r4, r4, #2
 80043c0:	2500      	movs	r5, #0
 80043c2:	42a5      	cmp	r5, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043cc:	4798      	blx	r3
 80043ce:	3501      	adds	r5, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043d6:	4798      	blx	r3
 80043d8:	3501      	adds	r5, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08004d8c 	.word	0x08004d8c
 80043e0:	08004d8c 	.word	0x08004d8c
 80043e4:	08004d8c 	.word	0x08004d8c
 80043e8:	08004d90 	.word	0x08004d90

080043ec <memset>:
 80043ec:	4402      	add	r2, r0
 80043ee:	4603      	mov	r3, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>

080043fc <_puts_r>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	460e      	mov	r6, r1
 8004400:	4605      	mov	r5, r0
 8004402:	b118      	cbz	r0, 800440c <_puts_r+0x10>
 8004404:	6983      	ldr	r3, [r0, #24]
 8004406:	b90b      	cbnz	r3, 800440c <_puts_r+0x10>
 8004408:	f000 fa0e 	bl	8004828 <__sinit>
 800440c:	69ab      	ldr	r3, [r5, #24]
 800440e:	68ac      	ldr	r4, [r5, #8]
 8004410:	b913      	cbnz	r3, 8004418 <_puts_r+0x1c>
 8004412:	4628      	mov	r0, r5
 8004414:	f000 fa08 	bl	8004828 <__sinit>
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <_puts_r+0xac>)
 800441a:	429c      	cmp	r4, r3
 800441c:	d117      	bne.n	800444e <_puts_r+0x52>
 800441e:	686c      	ldr	r4, [r5, #4]
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	d51d      	bpl.n	8004462 <_puts_r+0x66>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	b1db      	cbz	r3, 8004462 <_puts_r+0x66>
 800442a:	3e01      	subs	r6, #1
 800442c:	68a3      	ldr	r3, [r4, #8]
 800442e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004432:	3b01      	subs	r3, #1
 8004434:	60a3      	str	r3, [r4, #8]
 8004436:	b9e9      	cbnz	r1, 8004474 <_puts_r+0x78>
 8004438:	2b00      	cmp	r3, #0
 800443a:	da2e      	bge.n	800449a <_puts_r+0x9e>
 800443c:	4622      	mov	r2, r4
 800443e:	210a      	movs	r1, #10
 8004440:	4628      	mov	r0, r5
 8004442:	f000 f83f 	bl	80044c4 <__swbuf_r>
 8004446:	3001      	adds	r0, #1
 8004448:	d011      	beq.n	800446e <_puts_r+0x72>
 800444a:	200a      	movs	r0, #10
 800444c:	bd70      	pop	{r4, r5, r6, pc}
 800444e:	4b17      	ldr	r3, [pc, #92]	; (80044ac <_puts_r+0xb0>)
 8004450:	429c      	cmp	r4, r3
 8004452:	d101      	bne.n	8004458 <_puts_r+0x5c>
 8004454:	68ac      	ldr	r4, [r5, #8]
 8004456:	e7e3      	b.n	8004420 <_puts_r+0x24>
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <_puts_r+0xb4>)
 800445a:	429c      	cmp	r4, r3
 800445c:	bf08      	it	eq
 800445e:	68ec      	ldreq	r4, [r5, #12]
 8004460:	e7de      	b.n	8004420 <_puts_r+0x24>
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f87f 	bl	8004568 <__swsetup_r>
 800446a:	2800      	cmp	r0, #0
 800446c:	d0dd      	beq.n	800442a <_puts_r+0x2e>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	2b00      	cmp	r3, #0
 8004476:	da04      	bge.n	8004482 <_puts_r+0x86>
 8004478:	69a2      	ldr	r2, [r4, #24]
 800447a:	4293      	cmp	r3, r2
 800447c:	db06      	blt.n	800448c <_puts_r+0x90>
 800447e:	290a      	cmp	r1, #10
 8004480:	d004      	beq.n	800448c <_puts_r+0x90>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	7019      	strb	r1, [r3, #0]
 800448a:	e7cf      	b.n	800442c <_puts_r+0x30>
 800448c:	4622      	mov	r2, r4
 800448e:	4628      	mov	r0, r5
 8004490:	f000 f818 	bl	80044c4 <__swbuf_r>
 8004494:	3001      	adds	r0, #1
 8004496:	d1c9      	bne.n	800442c <_puts_r+0x30>
 8004498:	e7e9      	b.n	800446e <_puts_r+0x72>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	200a      	movs	r0, #10
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	6022      	str	r2, [r4, #0]
 80044a2:	7018      	strb	r0, [r3, #0]
 80044a4:	bd70      	pop	{r4, r5, r6, pc}
 80044a6:	bf00      	nop
 80044a8:	08004d44 	.word	0x08004d44
 80044ac:	08004d64 	.word	0x08004d64
 80044b0:	08004d24 	.word	0x08004d24

080044b4 <puts>:
 80044b4:	4b02      	ldr	r3, [pc, #8]	; (80044c0 <puts+0xc>)
 80044b6:	4601      	mov	r1, r0
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	f7ff bf9f 	b.w	80043fc <_puts_r>
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <__swbuf_r>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	460e      	mov	r6, r1
 80044c8:	4614      	mov	r4, r2
 80044ca:	4605      	mov	r5, r0
 80044cc:	b118      	cbz	r0, 80044d6 <__swbuf_r+0x12>
 80044ce:	6983      	ldr	r3, [r0, #24]
 80044d0:	b90b      	cbnz	r3, 80044d6 <__swbuf_r+0x12>
 80044d2:	f000 f9a9 	bl	8004828 <__sinit>
 80044d6:	4b21      	ldr	r3, [pc, #132]	; (800455c <__swbuf_r+0x98>)
 80044d8:	429c      	cmp	r4, r3
 80044da:	d12a      	bne.n	8004532 <__swbuf_r+0x6e>
 80044dc:	686c      	ldr	r4, [r5, #4]
 80044de:	69a3      	ldr	r3, [r4, #24]
 80044e0:	60a3      	str	r3, [r4, #8]
 80044e2:	89a3      	ldrh	r3, [r4, #12]
 80044e4:	071a      	lsls	r2, r3, #28
 80044e6:	d52e      	bpl.n	8004546 <__swbuf_r+0x82>
 80044e8:	6923      	ldr	r3, [r4, #16]
 80044ea:	b363      	cbz	r3, 8004546 <__swbuf_r+0x82>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	6820      	ldr	r0, [r4, #0]
 80044f0:	1ac0      	subs	r0, r0, r3
 80044f2:	6963      	ldr	r3, [r4, #20]
 80044f4:	b2f6      	uxtb	r6, r6
 80044f6:	4298      	cmp	r0, r3
 80044f8:	4637      	mov	r7, r6
 80044fa:	db04      	blt.n	8004506 <__swbuf_r+0x42>
 80044fc:	4621      	mov	r1, r4
 80044fe:	4628      	mov	r0, r5
 8004500:	f000 f928 	bl	8004754 <_fflush_r>
 8004504:	bb28      	cbnz	r0, 8004552 <__swbuf_r+0x8e>
 8004506:	68a3      	ldr	r3, [r4, #8]
 8004508:	3b01      	subs	r3, #1
 800450a:	60a3      	str	r3, [r4, #8]
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	6022      	str	r2, [r4, #0]
 8004512:	701e      	strb	r6, [r3, #0]
 8004514:	6963      	ldr	r3, [r4, #20]
 8004516:	3001      	adds	r0, #1
 8004518:	4298      	cmp	r0, r3
 800451a:	d004      	beq.n	8004526 <__swbuf_r+0x62>
 800451c:	89a3      	ldrh	r3, [r4, #12]
 800451e:	07db      	lsls	r3, r3, #31
 8004520:	d519      	bpl.n	8004556 <__swbuf_r+0x92>
 8004522:	2e0a      	cmp	r6, #10
 8004524:	d117      	bne.n	8004556 <__swbuf_r+0x92>
 8004526:	4621      	mov	r1, r4
 8004528:	4628      	mov	r0, r5
 800452a:	f000 f913 	bl	8004754 <_fflush_r>
 800452e:	b190      	cbz	r0, 8004556 <__swbuf_r+0x92>
 8004530:	e00f      	b.n	8004552 <__swbuf_r+0x8e>
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <__swbuf_r+0x9c>)
 8004534:	429c      	cmp	r4, r3
 8004536:	d101      	bne.n	800453c <__swbuf_r+0x78>
 8004538:	68ac      	ldr	r4, [r5, #8]
 800453a:	e7d0      	b.n	80044de <__swbuf_r+0x1a>
 800453c:	4b09      	ldr	r3, [pc, #36]	; (8004564 <__swbuf_r+0xa0>)
 800453e:	429c      	cmp	r4, r3
 8004540:	bf08      	it	eq
 8004542:	68ec      	ldreq	r4, [r5, #12]
 8004544:	e7cb      	b.n	80044de <__swbuf_r+0x1a>
 8004546:	4621      	mov	r1, r4
 8004548:	4628      	mov	r0, r5
 800454a:	f000 f80d 	bl	8004568 <__swsetup_r>
 800454e:	2800      	cmp	r0, #0
 8004550:	d0cc      	beq.n	80044ec <__swbuf_r+0x28>
 8004552:	f04f 37ff 	mov.w	r7, #4294967295
 8004556:	4638      	mov	r0, r7
 8004558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455a:	bf00      	nop
 800455c:	08004d44 	.word	0x08004d44
 8004560:	08004d64 	.word	0x08004d64
 8004564:	08004d24 	.word	0x08004d24

08004568 <__swsetup_r>:
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <__swsetup_r+0xcc>)
 800456a:	b570      	push	{r4, r5, r6, lr}
 800456c:	681d      	ldr	r5, [r3, #0]
 800456e:	4606      	mov	r6, r0
 8004570:	460c      	mov	r4, r1
 8004572:	b125      	cbz	r5, 800457e <__swsetup_r+0x16>
 8004574:	69ab      	ldr	r3, [r5, #24]
 8004576:	b913      	cbnz	r3, 800457e <__swsetup_r+0x16>
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f955 	bl	8004828 <__sinit>
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <__swsetup_r+0xd0>)
 8004580:	429c      	cmp	r4, r3
 8004582:	d10f      	bne.n	80045a4 <__swsetup_r+0x3c>
 8004584:	686c      	ldr	r4, [r5, #4]
 8004586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800458a:	b29a      	uxth	r2, r3
 800458c:	0715      	lsls	r5, r2, #28
 800458e:	d42c      	bmi.n	80045ea <__swsetup_r+0x82>
 8004590:	06d0      	lsls	r0, r2, #27
 8004592:	d411      	bmi.n	80045b8 <__swsetup_r+0x50>
 8004594:	2209      	movs	r2, #9
 8004596:	6032      	str	r2, [r6, #0]
 8004598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <__swsetup_r+0xd4>)
 80045a6:	429c      	cmp	r4, r3
 80045a8:	d101      	bne.n	80045ae <__swsetup_r+0x46>
 80045aa:	68ac      	ldr	r4, [r5, #8]
 80045ac:	e7eb      	b.n	8004586 <__swsetup_r+0x1e>
 80045ae:	4b24      	ldr	r3, [pc, #144]	; (8004640 <__swsetup_r+0xd8>)
 80045b0:	429c      	cmp	r4, r3
 80045b2:	bf08      	it	eq
 80045b4:	68ec      	ldreq	r4, [r5, #12]
 80045b6:	e7e6      	b.n	8004586 <__swsetup_r+0x1e>
 80045b8:	0751      	lsls	r1, r2, #29
 80045ba:	d512      	bpl.n	80045e2 <__swsetup_r+0x7a>
 80045bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045be:	b141      	cbz	r1, 80045d2 <__swsetup_r+0x6a>
 80045c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045c4:	4299      	cmp	r1, r3
 80045c6:	d002      	beq.n	80045ce <__swsetup_r+0x66>
 80045c8:	4630      	mov	r0, r6
 80045ca:	f000 fa1b 	bl	8004a04 <_free_r>
 80045ce:	2300      	movs	r3, #0
 80045d0:	6363      	str	r3, [r4, #52]	; 0x34
 80045d2:	89a3      	ldrh	r3, [r4, #12]
 80045d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045d8:	81a3      	strh	r3, [r4, #12]
 80045da:	2300      	movs	r3, #0
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	6923      	ldr	r3, [r4, #16]
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	f043 0308 	orr.w	r3, r3, #8
 80045e8:	81a3      	strh	r3, [r4, #12]
 80045ea:	6923      	ldr	r3, [r4, #16]
 80045ec:	b94b      	cbnz	r3, 8004602 <__swsetup_r+0x9a>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f8:	d003      	beq.n	8004602 <__swsetup_r+0x9a>
 80045fa:	4621      	mov	r1, r4
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f9c1 	bl	8004984 <__smakebuf_r>
 8004602:	89a2      	ldrh	r2, [r4, #12]
 8004604:	f012 0301 	ands.w	r3, r2, #1
 8004608:	d00c      	beq.n	8004624 <__swsetup_r+0xbc>
 800460a:	2300      	movs	r3, #0
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	6963      	ldr	r3, [r4, #20]
 8004610:	425b      	negs	r3, r3
 8004612:	61a3      	str	r3, [r4, #24]
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	b953      	cbnz	r3, 800462e <__swsetup_r+0xc6>
 8004618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800461c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004620:	d1ba      	bne.n	8004598 <__swsetup_r+0x30>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	0792      	lsls	r2, r2, #30
 8004626:	bf58      	it	pl
 8004628:	6963      	ldrpl	r3, [r4, #20]
 800462a:	60a3      	str	r3, [r4, #8]
 800462c:	e7f2      	b.n	8004614 <__swsetup_r+0xac>
 800462e:	2000      	movs	r0, #0
 8004630:	e7f7      	b.n	8004622 <__swsetup_r+0xba>
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c
 8004638:	08004d44 	.word	0x08004d44
 800463c:	08004d64 	.word	0x08004d64
 8004640:	08004d24 	.word	0x08004d24

08004644 <__sflush_r>:
 8004644:	898a      	ldrh	r2, [r1, #12]
 8004646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	0710      	lsls	r0, r2, #28
 800464e:	460c      	mov	r4, r1
 8004650:	d45a      	bmi.n	8004708 <__sflush_r+0xc4>
 8004652:	684b      	ldr	r3, [r1, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	dc05      	bgt.n	8004664 <__sflush_r+0x20>
 8004658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	dc02      	bgt.n	8004664 <__sflush_r+0x20>
 800465e:	2000      	movs	r0, #0
 8004660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004666:	2e00      	cmp	r6, #0
 8004668:	d0f9      	beq.n	800465e <__sflush_r+0x1a>
 800466a:	2300      	movs	r3, #0
 800466c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004670:	682f      	ldr	r7, [r5, #0]
 8004672:	602b      	str	r3, [r5, #0]
 8004674:	d033      	beq.n	80046de <__sflush_r+0x9a>
 8004676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	075a      	lsls	r2, r3, #29
 800467c:	d505      	bpl.n	800468a <__sflush_r+0x46>
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	1ac0      	subs	r0, r0, r3
 8004682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004684:	b10b      	cbz	r3, 800468a <__sflush_r+0x46>
 8004686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004688:	1ac0      	subs	r0, r0, r3
 800468a:	2300      	movs	r3, #0
 800468c:	4602      	mov	r2, r0
 800468e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004690:	6a21      	ldr	r1, [r4, #32]
 8004692:	4628      	mov	r0, r5
 8004694:	47b0      	blx	r6
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	d106      	bne.n	80046aa <__sflush_r+0x66>
 800469c:	6829      	ldr	r1, [r5, #0]
 800469e:	291d      	cmp	r1, #29
 80046a0:	d84b      	bhi.n	800473a <__sflush_r+0xf6>
 80046a2:	4a2b      	ldr	r2, [pc, #172]	; (8004750 <__sflush_r+0x10c>)
 80046a4:	40ca      	lsrs	r2, r1
 80046a6:	07d6      	lsls	r6, r2, #31
 80046a8:	d547      	bpl.n	800473a <__sflush_r+0xf6>
 80046aa:	2200      	movs	r2, #0
 80046ac:	6062      	str	r2, [r4, #4]
 80046ae:	04d9      	lsls	r1, r3, #19
 80046b0:	6922      	ldr	r2, [r4, #16]
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	d504      	bpl.n	80046c0 <__sflush_r+0x7c>
 80046b6:	1c42      	adds	r2, r0, #1
 80046b8:	d101      	bne.n	80046be <__sflush_r+0x7a>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	b903      	cbnz	r3, 80046c0 <__sflush_r+0x7c>
 80046be:	6560      	str	r0, [r4, #84]	; 0x54
 80046c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046c2:	602f      	str	r7, [r5, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	d0ca      	beq.n	800465e <__sflush_r+0x1a>
 80046c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046cc:	4299      	cmp	r1, r3
 80046ce:	d002      	beq.n	80046d6 <__sflush_r+0x92>
 80046d0:	4628      	mov	r0, r5
 80046d2:	f000 f997 	bl	8004a04 <_free_r>
 80046d6:	2000      	movs	r0, #0
 80046d8:	6360      	str	r0, [r4, #52]	; 0x34
 80046da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046de:	6a21      	ldr	r1, [r4, #32]
 80046e0:	2301      	movs	r3, #1
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b0      	blx	r6
 80046e6:	1c41      	adds	r1, r0, #1
 80046e8:	d1c6      	bne.n	8004678 <__sflush_r+0x34>
 80046ea:	682b      	ldr	r3, [r5, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0c3      	beq.n	8004678 <__sflush_r+0x34>
 80046f0:	2b1d      	cmp	r3, #29
 80046f2:	d001      	beq.n	80046f8 <__sflush_r+0xb4>
 80046f4:	2b16      	cmp	r3, #22
 80046f6:	d101      	bne.n	80046fc <__sflush_r+0xb8>
 80046f8:	602f      	str	r7, [r5, #0]
 80046fa:	e7b0      	b.n	800465e <__sflush_r+0x1a>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	690f      	ldr	r7, [r1, #16]
 800470a:	2f00      	cmp	r7, #0
 800470c:	d0a7      	beq.n	800465e <__sflush_r+0x1a>
 800470e:	0793      	lsls	r3, r2, #30
 8004710:	680e      	ldr	r6, [r1, #0]
 8004712:	bf08      	it	eq
 8004714:	694b      	ldreq	r3, [r1, #20]
 8004716:	600f      	str	r7, [r1, #0]
 8004718:	bf18      	it	ne
 800471a:	2300      	movne	r3, #0
 800471c:	eba6 0807 	sub.w	r8, r6, r7
 8004720:	608b      	str	r3, [r1, #8]
 8004722:	f1b8 0f00 	cmp.w	r8, #0
 8004726:	dd9a      	ble.n	800465e <__sflush_r+0x1a>
 8004728:	4643      	mov	r3, r8
 800472a:	463a      	mov	r2, r7
 800472c:	6a21      	ldr	r1, [r4, #32]
 800472e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004730:	4628      	mov	r0, r5
 8004732:	47b0      	blx	r6
 8004734:	2800      	cmp	r0, #0
 8004736:	dc07      	bgt.n	8004748 <__sflush_r+0x104>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004748:	4407      	add	r7, r0
 800474a:	eba8 0800 	sub.w	r8, r8, r0
 800474e:	e7e8      	b.n	8004722 <__sflush_r+0xde>
 8004750:	20400001 	.word	0x20400001

08004754 <_fflush_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	690b      	ldr	r3, [r1, #16]
 8004758:	4605      	mov	r5, r0
 800475a:	460c      	mov	r4, r1
 800475c:	b1db      	cbz	r3, 8004796 <_fflush_r+0x42>
 800475e:	b118      	cbz	r0, 8004768 <_fflush_r+0x14>
 8004760:	6983      	ldr	r3, [r0, #24]
 8004762:	b90b      	cbnz	r3, 8004768 <_fflush_r+0x14>
 8004764:	f000 f860 	bl	8004828 <__sinit>
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <_fflush_r+0x48>)
 800476a:	429c      	cmp	r4, r3
 800476c:	d109      	bne.n	8004782 <_fflush_r+0x2e>
 800476e:	686c      	ldr	r4, [r5, #4]
 8004770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004774:	b17b      	cbz	r3, 8004796 <_fflush_r+0x42>
 8004776:	4621      	mov	r1, r4
 8004778:	4628      	mov	r0, r5
 800477a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800477e:	f7ff bf61 	b.w	8004644 <__sflush_r>
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <_fflush_r+0x4c>)
 8004784:	429c      	cmp	r4, r3
 8004786:	d101      	bne.n	800478c <_fflush_r+0x38>
 8004788:	68ac      	ldr	r4, [r5, #8]
 800478a:	e7f1      	b.n	8004770 <_fflush_r+0x1c>
 800478c:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <_fflush_r+0x50>)
 800478e:	429c      	cmp	r4, r3
 8004790:	bf08      	it	eq
 8004792:	68ec      	ldreq	r4, [r5, #12]
 8004794:	e7ec      	b.n	8004770 <_fflush_r+0x1c>
 8004796:	2000      	movs	r0, #0
 8004798:	bd38      	pop	{r3, r4, r5, pc}
 800479a:	bf00      	nop
 800479c:	08004d44 	.word	0x08004d44
 80047a0:	08004d64 	.word	0x08004d64
 80047a4:	08004d24 	.word	0x08004d24

080047a8 <_cleanup_r>:
 80047a8:	4901      	ldr	r1, [pc, #4]	; (80047b0 <_cleanup_r+0x8>)
 80047aa:	f000 b8a9 	b.w	8004900 <_fwalk_reent>
 80047ae:	bf00      	nop
 80047b0:	08004755 	.word	0x08004755

080047b4 <std.isra.0>:
 80047b4:	2300      	movs	r3, #0
 80047b6:	b510      	push	{r4, lr}
 80047b8:	4604      	mov	r4, r0
 80047ba:	6003      	str	r3, [r0, #0]
 80047bc:	6043      	str	r3, [r0, #4]
 80047be:	6083      	str	r3, [r0, #8]
 80047c0:	8181      	strh	r1, [r0, #12]
 80047c2:	6643      	str	r3, [r0, #100]	; 0x64
 80047c4:	81c2      	strh	r2, [r0, #14]
 80047c6:	6103      	str	r3, [r0, #16]
 80047c8:	6143      	str	r3, [r0, #20]
 80047ca:	6183      	str	r3, [r0, #24]
 80047cc:	4619      	mov	r1, r3
 80047ce:	2208      	movs	r2, #8
 80047d0:	305c      	adds	r0, #92	; 0x5c
 80047d2:	f7ff fe0b 	bl	80043ec <memset>
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <std.isra.0+0x38>)
 80047d8:	6263      	str	r3, [r4, #36]	; 0x24
 80047da:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <std.isra.0+0x3c>)
 80047dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80047de:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <std.isra.0+0x40>)
 80047e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <std.isra.0+0x44>)
 80047e4:	6224      	str	r4, [r4, #32]
 80047e6:	6323      	str	r3, [r4, #48]	; 0x30
 80047e8:	bd10      	pop	{r4, pc}
 80047ea:	bf00      	nop
 80047ec:	08004b7d 	.word	0x08004b7d
 80047f0:	08004b9f 	.word	0x08004b9f
 80047f4:	08004bd7 	.word	0x08004bd7
 80047f8:	08004bfb 	.word	0x08004bfb

080047fc <__sfmoreglue>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	1e4a      	subs	r2, r1, #1
 8004800:	2568      	movs	r5, #104	; 0x68
 8004802:	4355      	muls	r5, r2
 8004804:	460e      	mov	r6, r1
 8004806:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800480a:	f000 f949 	bl	8004aa0 <_malloc_r>
 800480e:	4604      	mov	r4, r0
 8004810:	b140      	cbz	r0, 8004824 <__sfmoreglue+0x28>
 8004812:	2100      	movs	r1, #0
 8004814:	e880 0042 	stmia.w	r0, {r1, r6}
 8004818:	300c      	adds	r0, #12
 800481a:	60a0      	str	r0, [r4, #8]
 800481c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004820:	f7ff fde4 	bl	80043ec <memset>
 8004824:	4620      	mov	r0, r4
 8004826:	bd70      	pop	{r4, r5, r6, pc}

08004828 <__sinit>:
 8004828:	6983      	ldr	r3, [r0, #24]
 800482a:	b510      	push	{r4, lr}
 800482c:	4604      	mov	r4, r0
 800482e:	bb33      	cbnz	r3, 800487e <__sinit+0x56>
 8004830:	6483      	str	r3, [r0, #72]	; 0x48
 8004832:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004834:	6503      	str	r3, [r0, #80]	; 0x50
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <__sinit+0x58>)
 8004838:	4a12      	ldr	r2, [pc, #72]	; (8004884 <__sinit+0x5c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6282      	str	r2, [r0, #40]	; 0x28
 800483e:	4298      	cmp	r0, r3
 8004840:	bf04      	itt	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	6183      	streq	r3, [r0, #24]
 8004846:	f000 f81f 	bl	8004888 <__sfp>
 800484a:	6060      	str	r0, [r4, #4]
 800484c:	4620      	mov	r0, r4
 800484e:	f000 f81b 	bl	8004888 <__sfp>
 8004852:	60a0      	str	r0, [r4, #8]
 8004854:	4620      	mov	r0, r4
 8004856:	f000 f817 	bl	8004888 <__sfp>
 800485a:	2200      	movs	r2, #0
 800485c:	60e0      	str	r0, [r4, #12]
 800485e:	2104      	movs	r1, #4
 8004860:	6860      	ldr	r0, [r4, #4]
 8004862:	f7ff ffa7 	bl	80047b4 <std.isra.0>
 8004866:	2201      	movs	r2, #1
 8004868:	2109      	movs	r1, #9
 800486a:	68a0      	ldr	r0, [r4, #8]
 800486c:	f7ff ffa2 	bl	80047b4 <std.isra.0>
 8004870:	2202      	movs	r2, #2
 8004872:	2112      	movs	r1, #18
 8004874:	68e0      	ldr	r0, [r4, #12]
 8004876:	f7ff ff9d 	bl	80047b4 <std.isra.0>
 800487a:	2301      	movs	r3, #1
 800487c:	61a3      	str	r3, [r4, #24]
 800487e:	bd10      	pop	{r4, pc}
 8004880:	08004d20 	.word	0x08004d20
 8004884:	080047a9 	.word	0x080047a9

08004888 <__sfp>:
 8004888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488a:	4b1c      	ldr	r3, [pc, #112]	; (80048fc <__sfp+0x74>)
 800488c:	681e      	ldr	r6, [r3, #0]
 800488e:	69b3      	ldr	r3, [r6, #24]
 8004890:	4607      	mov	r7, r0
 8004892:	b913      	cbnz	r3, 800489a <__sfp+0x12>
 8004894:	4630      	mov	r0, r6
 8004896:	f7ff ffc7 	bl	8004828 <__sinit>
 800489a:	3648      	adds	r6, #72	; 0x48
 800489c:	68b4      	ldr	r4, [r6, #8]
 800489e:	6873      	ldr	r3, [r6, #4]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	d503      	bpl.n	80048ac <__sfp+0x24>
 80048a4:	6833      	ldr	r3, [r6, #0]
 80048a6:	b133      	cbz	r3, 80048b6 <__sfp+0x2e>
 80048a8:	6836      	ldr	r6, [r6, #0]
 80048aa:	e7f7      	b.n	800489c <__sfp+0x14>
 80048ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048b0:	b16d      	cbz	r5, 80048ce <__sfp+0x46>
 80048b2:	3468      	adds	r4, #104	; 0x68
 80048b4:	e7f4      	b.n	80048a0 <__sfp+0x18>
 80048b6:	2104      	movs	r1, #4
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff ff9f 	bl	80047fc <__sfmoreglue>
 80048be:	6030      	str	r0, [r6, #0]
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d1f1      	bne.n	80048a8 <__sfp+0x20>
 80048c4:	230c      	movs	r3, #12
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4604      	mov	r4, r0
 80048ca:	4620      	mov	r0, r4
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048d2:	81e3      	strh	r3, [r4, #14]
 80048d4:	2301      	movs	r3, #1
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	6665      	str	r5, [r4, #100]	; 0x64
 80048da:	6025      	str	r5, [r4, #0]
 80048dc:	60a5      	str	r5, [r4, #8]
 80048de:	6065      	str	r5, [r4, #4]
 80048e0:	6125      	str	r5, [r4, #16]
 80048e2:	6165      	str	r5, [r4, #20]
 80048e4:	61a5      	str	r5, [r4, #24]
 80048e6:	2208      	movs	r2, #8
 80048e8:	4629      	mov	r1, r5
 80048ea:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048ee:	f7ff fd7d 	bl	80043ec <memset>
 80048f2:	6365      	str	r5, [r4, #52]	; 0x34
 80048f4:	63a5      	str	r5, [r4, #56]	; 0x38
 80048f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80048f8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80048fa:	e7e6      	b.n	80048ca <__sfp+0x42>
 80048fc:	08004d20 	.word	0x08004d20

08004900 <_fwalk_reent>:
 8004900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004904:	4680      	mov	r8, r0
 8004906:	4689      	mov	r9, r1
 8004908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800490c:	2600      	movs	r6, #0
 800490e:	b914      	cbnz	r4, 8004916 <_fwalk_reent+0x16>
 8004910:	4630      	mov	r0, r6
 8004912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004916:	68a5      	ldr	r5, [r4, #8]
 8004918:	6867      	ldr	r7, [r4, #4]
 800491a:	3f01      	subs	r7, #1
 800491c:	d501      	bpl.n	8004922 <_fwalk_reent+0x22>
 800491e:	6824      	ldr	r4, [r4, #0]
 8004920:	e7f5      	b.n	800490e <_fwalk_reent+0xe>
 8004922:	89ab      	ldrh	r3, [r5, #12]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d907      	bls.n	8004938 <_fwalk_reent+0x38>
 8004928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800492c:	3301      	adds	r3, #1
 800492e:	d003      	beq.n	8004938 <_fwalk_reent+0x38>
 8004930:	4629      	mov	r1, r5
 8004932:	4640      	mov	r0, r8
 8004934:	47c8      	blx	r9
 8004936:	4306      	orrs	r6, r0
 8004938:	3568      	adds	r5, #104	; 0x68
 800493a:	e7ee      	b.n	800491a <_fwalk_reent+0x1a>

0800493c <__swhatbuf_r>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	460e      	mov	r6, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	2900      	cmp	r1, #0
 8004946:	b090      	sub	sp, #64	; 0x40
 8004948:	4614      	mov	r4, r2
 800494a:	461d      	mov	r5, r3
 800494c:	da07      	bge.n	800495e <__swhatbuf_r+0x22>
 800494e:	2300      	movs	r3, #0
 8004950:	602b      	str	r3, [r5, #0]
 8004952:	89b3      	ldrh	r3, [r6, #12]
 8004954:	061a      	lsls	r2, r3, #24
 8004956:	d410      	bmi.n	800497a <__swhatbuf_r+0x3e>
 8004958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495c:	e00e      	b.n	800497c <__swhatbuf_r+0x40>
 800495e:	aa01      	add	r2, sp, #4
 8004960:	f000 f972 	bl	8004c48 <_fstat_r>
 8004964:	2800      	cmp	r0, #0
 8004966:	dbf2      	blt.n	800494e <__swhatbuf_r+0x12>
 8004968:	9a02      	ldr	r2, [sp, #8]
 800496a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800496e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004972:	425a      	negs	r2, r3
 8004974:	415a      	adcs	r2, r3
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	e7ee      	b.n	8004958 <__swhatbuf_r+0x1c>
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	2000      	movs	r0, #0
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	b010      	add	sp, #64	; 0x40
 8004982:	bd70      	pop	{r4, r5, r6, pc}

08004984 <__smakebuf_r>:
 8004984:	898b      	ldrh	r3, [r1, #12]
 8004986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004988:	079d      	lsls	r5, r3, #30
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	d507      	bpl.n	80049a0 <__smakebuf_r+0x1c>
 8004990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2301      	movs	r3, #1
 800499a:	6163      	str	r3, [r4, #20]
 800499c:	b002      	add	sp, #8
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	ab01      	add	r3, sp, #4
 80049a2:	466a      	mov	r2, sp
 80049a4:	f7ff ffca 	bl	800493c <__swhatbuf_r>
 80049a8:	9900      	ldr	r1, [sp, #0]
 80049aa:	4605      	mov	r5, r0
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f877 	bl	8004aa0 <_malloc_r>
 80049b2:	b948      	cbnz	r0, 80049c8 <__smakebuf_r+0x44>
 80049b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d4ef      	bmi.n	800499c <__smakebuf_r+0x18>
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	e7e3      	b.n	8004990 <__smakebuf_r+0xc>
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <__smakebuf_r+0x7c>)
 80049ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	6163      	str	r3, [r4, #20]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	6120      	str	r0, [r4, #16]
 80049de:	b15b      	cbz	r3, 80049f8 <__smakebuf_r+0x74>
 80049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 f941 	bl	8004c6c <_isatty_r>
 80049ea:	b128      	cbz	r0, 80049f8 <__smakebuf_r+0x74>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	431d      	orrs	r5, r3
 80049fc:	81a5      	strh	r5, [r4, #12]
 80049fe:	e7cd      	b.n	800499c <__smakebuf_r+0x18>
 8004a00:	080047a9 	.word	0x080047a9

08004a04 <_free_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4605      	mov	r5, r0
 8004a08:	2900      	cmp	r1, #0
 8004a0a:	d045      	beq.n	8004a98 <_free_r+0x94>
 8004a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a10:	1f0c      	subs	r4, r1, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfb8      	it	lt
 8004a16:	18e4      	addlt	r4, r4, r3
 8004a18:	f000 f94a 	bl	8004cb0 <__malloc_lock>
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <_free_r+0x98>)
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	4610      	mov	r0, r2
 8004a22:	b933      	cbnz	r3, 8004a32 <_free_r+0x2e>
 8004a24:	6063      	str	r3, [r4, #4]
 8004a26:	6014      	str	r4, [r2, #0]
 8004a28:	4628      	mov	r0, r5
 8004a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a2e:	f000 b940 	b.w	8004cb2 <__malloc_unlock>
 8004a32:	42a3      	cmp	r3, r4
 8004a34:	d90c      	bls.n	8004a50 <_free_r+0x4c>
 8004a36:	6821      	ldr	r1, [r4, #0]
 8004a38:	1862      	adds	r2, r4, r1
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	bf04      	itt	eq
 8004a3e:	681a      	ldreq	r2, [r3, #0]
 8004a40:	685b      	ldreq	r3, [r3, #4]
 8004a42:	6063      	str	r3, [r4, #4]
 8004a44:	bf04      	itt	eq
 8004a46:	1852      	addeq	r2, r2, r1
 8004a48:	6022      	streq	r2, [r4, #0]
 8004a4a:	6004      	str	r4, [r0, #0]
 8004a4c:	e7ec      	b.n	8004a28 <_free_r+0x24>
 8004a4e:	4613      	mov	r3, r2
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	b10a      	cbz	r2, 8004a58 <_free_r+0x54>
 8004a54:	42a2      	cmp	r2, r4
 8004a56:	d9fa      	bls.n	8004a4e <_free_r+0x4a>
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	1858      	adds	r0, r3, r1
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d10b      	bne.n	8004a78 <_free_r+0x74>
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	4401      	add	r1, r0
 8004a64:	1858      	adds	r0, r3, r1
 8004a66:	4282      	cmp	r2, r0
 8004a68:	6019      	str	r1, [r3, #0]
 8004a6a:	d1dd      	bne.n	8004a28 <_free_r+0x24>
 8004a6c:	6810      	ldr	r0, [r2, #0]
 8004a6e:	6852      	ldr	r2, [r2, #4]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	4401      	add	r1, r0
 8004a74:	6019      	str	r1, [r3, #0]
 8004a76:	e7d7      	b.n	8004a28 <_free_r+0x24>
 8004a78:	d902      	bls.n	8004a80 <_free_r+0x7c>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	e7d3      	b.n	8004a28 <_free_r+0x24>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	1821      	adds	r1, r4, r0
 8004a84:	428a      	cmp	r2, r1
 8004a86:	bf04      	itt	eq
 8004a88:	6811      	ldreq	r1, [r2, #0]
 8004a8a:	6852      	ldreq	r2, [r2, #4]
 8004a8c:	6062      	str	r2, [r4, #4]
 8004a8e:	bf04      	itt	eq
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	605c      	str	r4, [r3, #4]
 8004a96:	e7c7      	b.n	8004a28 <_free_r+0x24>
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000090 	.word	0x20000090

08004aa0 <_malloc_r>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	1ccd      	adds	r5, r1, #3
 8004aa4:	f025 0503 	bic.w	r5, r5, #3
 8004aa8:	3508      	adds	r5, #8
 8004aaa:	2d0c      	cmp	r5, #12
 8004aac:	bf38      	it	cc
 8004aae:	250c      	movcc	r5, #12
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	db01      	blt.n	8004aba <_malloc_r+0x1a>
 8004ab6:	42a9      	cmp	r1, r5
 8004ab8:	d903      	bls.n	8004ac2 <_malloc_r+0x22>
 8004aba:	230c      	movs	r3, #12
 8004abc:	6033      	str	r3, [r6, #0]
 8004abe:	2000      	movs	r0, #0
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	f000 f8f5 	bl	8004cb0 <__malloc_lock>
 8004ac6:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <_malloc_r+0xb4>)
 8004ac8:	6814      	ldr	r4, [r2, #0]
 8004aca:	4621      	mov	r1, r4
 8004acc:	b991      	cbnz	r1, 8004af4 <_malloc_r+0x54>
 8004ace:	4c22      	ldr	r4, [pc, #136]	; (8004b58 <_malloc_r+0xb8>)
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	b91b      	cbnz	r3, 8004adc <_malloc_r+0x3c>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 f841 	bl	8004b5c <_sbrk_r>
 8004ada:	6020      	str	r0, [r4, #0]
 8004adc:	4629      	mov	r1, r5
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f000 f83c 	bl	8004b5c <_sbrk_r>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	d126      	bne.n	8004b36 <_malloc_r+0x96>
 8004ae8:	230c      	movs	r3, #12
 8004aea:	6033      	str	r3, [r6, #0]
 8004aec:	4630      	mov	r0, r6
 8004aee:	f000 f8e0 	bl	8004cb2 <__malloc_unlock>
 8004af2:	e7e4      	b.n	8004abe <_malloc_r+0x1e>
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	1b5b      	subs	r3, r3, r5
 8004af8:	d41a      	bmi.n	8004b30 <_malloc_r+0x90>
 8004afa:	2b0b      	cmp	r3, #11
 8004afc:	d90f      	bls.n	8004b1e <_malloc_r+0x7e>
 8004afe:	600b      	str	r3, [r1, #0]
 8004b00:	50cd      	str	r5, [r1, r3]
 8004b02:	18cc      	adds	r4, r1, r3
 8004b04:	4630      	mov	r0, r6
 8004b06:	f000 f8d4 	bl	8004cb2 <__malloc_unlock>
 8004b0a:	f104 000b 	add.w	r0, r4, #11
 8004b0e:	1d23      	adds	r3, r4, #4
 8004b10:	f020 0007 	bic.w	r0, r0, #7
 8004b14:	1ac3      	subs	r3, r0, r3
 8004b16:	d01b      	beq.n	8004b50 <_malloc_r+0xb0>
 8004b18:	425a      	negs	r2, r3
 8004b1a:	50e2      	str	r2, [r4, r3]
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
 8004b1e:	428c      	cmp	r4, r1
 8004b20:	bf0d      	iteet	eq
 8004b22:	6863      	ldreq	r3, [r4, #4]
 8004b24:	684b      	ldrne	r3, [r1, #4]
 8004b26:	6063      	strne	r3, [r4, #4]
 8004b28:	6013      	streq	r3, [r2, #0]
 8004b2a:	bf18      	it	ne
 8004b2c:	460c      	movne	r4, r1
 8004b2e:	e7e9      	b.n	8004b04 <_malloc_r+0x64>
 8004b30:	460c      	mov	r4, r1
 8004b32:	6849      	ldr	r1, [r1, #4]
 8004b34:	e7ca      	b.n	8004acc <_malloc_r+0x2c>
 8004b36:	1cc4      	adds	r4, r0, #3
 8004b38:	f024 0403 	bic.w	r4, r4, #3
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d005      	beq.n	8004b4c <_malloc_r+0xac>
 8004b40:	1a21      	subs	r1, r4, r0
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 f80a 	bl	8004b5c <_sbrk_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d0cd      	beq.n	8004ae8 <_malloc_r+0x48>
 8004b4c:	6025      	str	r5, [r4, #0]
 8004b4e:	e7d9      	b.n	8004b04 <_malloc_r+0x64>
 8004b50:	bd70      	pop	{r4, r5, r6, pc}
 8004b52:	bf00      	nop
 8004b54:	20000090 	.word	0x20000090
 8004b58:	20000094 	.word	0x20000094

08004b5c <_sbrk_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4c06      	ldr	r4, [pc, #24]	; (8004b78 <_sbrk_r+0x1c>)
 8004b60:	2300      	movs	r3, #0
 8004b62:	4605      	mov	r5, r0
 8004b64:	4608      	mov	r0, r1
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	f7fc f9d8 	bl	8000f1c <_sbrk>
 8004b6c:	1c43      	adds	r3, r0, #1
 8004b6e:	d102      	bne.n	8004b76 <_sbrk_r+0x1a>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	b103      	cbz	r3, 8004b76 <_sbrk_r+0x1a>
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	bd38      	pop	{r3, r4, r5, pc}
 8004b78:	200001d0 	.word	0x200001d0

08004b7c <__sread>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	460c      	mov	r4, r1
 8004b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b84:	f000 f896 	bl	8004cb4 <_read_r>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	bfab      	itete	ge
 8004b8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b90:	181b      	addge	r3, r3, r0
 8004b92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b96:	bfac      	ite	ge
 8004b98:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b9a:	81a3      	strhlt	r3, [r4, #12]
 8004b9c:	bd10      	pop	{r4, pc}

08004b9e <__swrite>:
 8004b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba2:	461f      	mov	r7, r3
 8004ba4:	898b      	ldrh	r3, [r1, #12]
 8004ba6:	05db      	lsls	r3, r3, #23
 8004ba8:	4605      	mov	r5, r0
 8004baa:	460c      	mov	r4, r1
 8004bac:	4616      	mov	r6, r2
 8004bae:	d505      	bpl.n	8004bbc <__swrite+0x1e>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb8:	f000 f868 	bl	8004c8c <_lseek_r>
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc6:	81a3      	strh	r3, [r4, #12]
 8004bc8:	4632      	mov	r2, r6
 8004bca:	463b      	mov	r3, r7
 8004bcc:	4628      	mov	r0, r5
 8004bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd2:	f000 b817 	b.w	8004c04 <_write_r>

08004bd6 <__sseek>:
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	460c      	mov	r4, r1
 8004bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bde:	f000 f855 	bl	8004c8c <_lseek_r>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	bf15      	itete	ne
 8004be8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bf2:	81a3      	strheq	r3, [r4, #12]
 8004bf4:	bf18      	it	ne
 8004bf6:	81a3      	strhne	r3, [r4, #12]
 8004bf8:	bd10      	pop	{r4, pc}

08004bfa <__sclose>:
 8004bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfe:	f000 b813 	b.w	8004c28 <_close_r>
	...

08004c04 <_write_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4c07      	ldr	r4, [pc, #28]	; (8004c24 <_write_r+0x20>)
 8004c08:	4605      	mov	r5, r0
 8004c0a:	4608      	mov	r0, r1
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	6022      	str	r2, [r4, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f7fc f965 	bl	8000ee2 <_write>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_write_r+0x1e>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_write_r+0x1e>
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	200001d0 	.word	0x200001d0

08004c28 <_close_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4c06      	ldr	r4, [pc, #24]	; (8004c44 <_close_r+0x1c>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4605      	mov	r5, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	f7fc f99e 	bl	8000f74 <_close>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_close_r+0x1a>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_close_r+0x1a>
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	200001d0 	.word	0x200001d0

08004c48 <_fstat_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4c07      	ldr	r4, [pc, #28]	; (8004c68 <_fstat_r+0x20>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4605      	mov	r5, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	f7fc f999 	bl	8000f8c <_fstat>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d102      	bne.n	8004c64 <_fstat_r+0x1c>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	b103      	cbz	r3, 8004c64 <_fstat_r+0x1c>
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	bf00      	nop
 8004c68:	200001d0 	.word	0x200001d0

08004c6c <_isatty_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4c06      	ldr	r4, [pc, #24]	; (8004c88 <_isatty_r+0x1c>)
 8004c70:	2300      	movs	r3, #0
 8004c72:	4605      	mov	r5, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	f7fc f998 	bl	8000fac <_isatty>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_isatty_r+0x1a>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_isatty_r+0x1a>
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	200001d0 	.word	0x200001d0

08004c8c <_lseek_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4c07      	ldr	r4, [pc, #28]	; (8004cac <_lseek_r+0x20>)
 8004c90:	4605      	mov	r5, r0
 8004c92:	4608      	mov	r0, r1
 8004c94:	4611      	mov	r1, r2
 8004c96:	2200      	movs	r2, #0
 8004c98:	6022      	str	r2, [r4, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f7fc f991 	bl	8000fc2 <_lseek>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_lseek_r+0x1e>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_lseek_r+0x1e>
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	200001d0 	.word	0x200001d0

08004cb0 <__malloc_lock>:
 8004cb0:	4770      	bx	lr

08004cb2 <__malloc_unlock>:
 8004cb2:	4770      	bx	lr

08004cb4 <_read_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4c07      	ldr	r4, [pc, #28]	; (8004cd4 <_read_r+0x20>)
 8004cb8:	4605      	mov	r5, r0
 8004cba:	4608      	mov	r0, r1
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	6022      	str	r2, [r4, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f7fc f8f0 	bl	8000ea8 <_read>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_read_r+0x1e>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_read_r+0x1e>
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	200001d0 	.word	0x200001d0

08004cd8 <_init>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr

08004ce4 <_fini>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr
