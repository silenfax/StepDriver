
powerstep01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000565c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005934  08005934  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  080059ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080059ac  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eae7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db1  00000000  00000000  0002eb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00030938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000316b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002389c  00000000  00000000  00032380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b0  00000000  00000000  00055c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df826  00000000  00000000  000643cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143bf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004104  00000000  00000000  00143c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005824 	.word	0x08005824

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005824 	.word	0x08005824

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//DENUG PRINTF
int __io_putchar(int ch)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	char v;
	v = (uint8_t )ch;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	73fb      	strb	r3, [r7, #15]
	return HAL_UART_Transmit(&huart6, (uint8_t *)&v, 1 ,1000);
 80005c6:	f107 010f 	add.w	r1, r7, #15
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	2201      	movs	r2, #1
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <__io_putchar+0x28>)
 80005d2:	f003 fce1 	bl	8003f98 <HAL_UART_Transmit>
 80005d6:	4603      	mov	r3, r0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000098 	.word	0x20000098

080005e4 <setHiZ>:

#include "powerstep01_def.h"


void setHiZ(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
  uint8_t tx = POWERSTEP01_HARD_HIZ;
 80005ea:	23a8      	movs	r3, #168	; 0xa8
 80005ec:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2102      	movs	r1, #2
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <setHiZ+0x34>)
 80005f4:	f001 f8f2 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &tx,1,1000);
 80005f8:	1df9      	adds	r1, r7, #7
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	2201      	movs	r2, #1
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <setHiZ+0x38>)
 8000602:	f002 f974 	bl	80028ee <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2102      	movs	r1, #2
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <setHiZ+0x34>)
 800060c:	f001 f8e6 	bl	80017dc <HAL_GPIO_WritePin>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020000 	.word	0x40020000
 800061c:	2000011c 	.word	0x2000011c

08000620 <getStatus>:


uint16_t getStatus(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
  uint8_t tx = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	71fb      	strb	r3, [r7, #7]
  uint8_t byte1 = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	71bb      	strb	r3, [r7, #6]
  uint8_t byte2 = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	717b      	strb	r3, [r7, #5]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2102      	movs	r1, #2
 8000636:	4823      	ldr	r0, [pc, #140]	; (80006c4 <getStatus+0xa4>)
 8000638:	f001 f8d0 	bl	80017dc <HAL_GPIO_WritePin>

  tx = POWERSTEP01_GET_STATUS;
 800063c:	23d0      	movs	r3, #208	; 0xd0
 800063e:	71fb      	strb	r3, [r7, #7]
//  tx = POWERSTEP01_GET_PARAM | POWERSTEP01_CONFIG;
  HAL_SPI_TransmitReceive(&hspi1, &tx, &byte1, 1,1000);
 8000640:	1dba      	adds	r2, r7, #6
 8000642:	1df9      	adds	r1, r7, #7
 8000644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	481e      	ldr	r0, [pc, #120]	; (80006c8 <getStatus+0xa8>)
 800064e:	f002 fabc 	bl	8002bca <HAL_SPI_TransmitReceive>
  tx = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2102      	movs	r1, #2
 800065a:	481a      	ldr	r0, [pc, #104]	; (80006c4 <getStatus+0xa4>)
 800065c:	f001 f8be 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2102      	movs	r1, #2
 8000664:	4817      	ldr	r0, [pc, #92]	; (80006c4 <getStatus+0xa4>)
 8000666:	f001 f8b9 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &byte1, 1,1000);
 800066a:	1dba      	adds	r2, r7, #6
 800066c:	1df9      	adds	r1, r7, #7
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2301      	movs	r3, #1
 8000676:	4814      	ldr	r0, [pc, #80]	; (80006c8 <getStatus+0xa8>)
 8000678:	f002 faa7 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2102      	movs	r1, #2
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <getStatus+0xa4>)
 8000682:	f001 f8ab 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <getStatus+0xa4>)
 800068c:	f001 f8a6 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &byte2, 1,1000);
 8000690:	1d7a      	adds	r2, r7, #5
 8000692:	1df9      	adds	r1, r7, #7
 8000694:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	2301      	movs	r3, #1
 800069c:	480a      	ldr	r0, [pc, #40]	; (80006c8 <getStatus+0xa8>)
 800069e:	f002 fa94 	bl	8002bca <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2102      	movs	r1, #2
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <getStatus+0xa4>)
 80006a8:	f001 f898 	bl	80017dc <HAL_GPIO_WritePin>
  return ((uint16_t)(byte1 << 8)) | byte2;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	797b      	ldrb	r3, [r7, #5]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b29b      	uxth	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020000 	.word	0x40020000
 80006c8:	2000011c 	.word	0x2000011c

080006cc <test_move>:

void test_move(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af02      	add	r7, sp, #8

  uint8_t tx = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71bb      	strb	r3, [r7, #6]
  uint8_t rx = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	717b      	strb	r3, [r7, #5]
  uint8_t byte2 = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2102      	movs	r1, #2
 80006e2:	482b      	ldr	r0, [pc, #172]	; (8000790 <test_move+0xc4>)
 80006e4:	f001 f87a 	bl	80017dc <HAL_GPIO_WritePin>

  tx = POWERSTEP01_MOVE;
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 80006ec:	1d7a      	adds	r2, r7, #5
 80006ee:	1db9      	adds	r1, r7, #6
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2301      	movs	r3, #1
 80006f8:	4826      	ldr	r0, [pc, #152]	; (8000794 <test_move+0xc8>)
 80006fa:	f002 fa66 	bl	8002bca <HAL_SPI_TransmitReceive>

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2102      	movs	r1, #2
 8000702:	4823      	ldr	r0, [pc, #140]	; (8000790 <test_move+0xc4>)
 8000704:	f001 f86a 	bl	80017dc <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2102      	movs	r1, #2
 800070c:	4820      	ldr	r0, [pc, #128]	; (8000790 <test_move+0xc4>)
 800070e:	f001 f865 	bl	80017dc <HAL_GPIO_WritePin>
  tx = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 8000716:	1d7a      	adds	r2, r7, #5
 8000718:	1db9      	adds	r1, r7, #6
 800071a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2301      	movs	r3, #1
 8000722:	481c      	ldr	r0, [pc, #112]	; (8000794 <test_move+0xc8>)
 8000724:	f002 fa51 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2102      	movs	r1, #2
 800072c:	4818      	ldr	r0, [pc, #96]	; (8000790 <test_move+0xc4>)
 800072e:	f001 f855 	bl	80017dc <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2102      	movs	r1, #2
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <test_move+0xc4>)
 8000738:	f001 f850 	bl	80017dc <HAL_GPIO_WritePin>
  tx = 200;
 800073c:	23c8      	movs	r3, #200	; 0xc8
 800073e:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 8000740:	1d7a      	adds	r2, r7, #5
 8000742:	1db9      	adds	r1, r7, #6
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <test_move+0xc8>)
 800074e:	f002 fa3c 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2102      	movs	r1, #2
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <test_move+0xc4>)
 8000758:	f001 f840 	bl	80017dc <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <test_move+0xc4>)
 8000762:	f001 f83b 	bl	80017dc <HAL_GPIO_WritePin>
  tx = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	71bb      	strb	r3, [r7, #6]
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 800076a:	1d7a      	adds	r2, r7, #5
 800076c:	1db9      	adds	r1, r7, #6
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2301      	movs	r3, #1
 8000776:	4807      	ldr	r0, [pc, #28]	; (8000794 <test_move+0xc8>)
 8000778:	f002 fa27 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2102      	movs	r1, #2
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <test_move+0xc4>)
 8000782:	f001 f82b 	bl	80017dc <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000
 8000794:	2000011c 	.word	0x2000011c

08000798 <set_param8>:

void set_param8(powerstep01_Registers_t param, uint8_t value)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af02      	add	r7, sp, #8
 800079e:	4603      	mov	r3, r0
 80007a0:	460a      	mov	r2, r1
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	4613      	mov	r3, r2
 80007a6:	71bb      	strb	r3, [r7, #6]
  uint8_t tx = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
  uint8_t rx = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	73bb      	strb	r3, [r7, #14]

  tx = POWERSTEP01_SET_PARAM | param;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2102      	movs	r1, #2
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <set_param8+0x7c>)
 80007ba:	f001 f80f 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 80007be:	f107 020e 	add.w	r2, r7, #14
 80007c2:	f107 010f 	add.w	r1, r7, #15
 80007c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2301      	movs	r3, #1
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <set_param8+0x80>)
 80007d0:	f002 f9fb 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	480e      	ldr	r0, [pc, #56]	; (8000814 <set_param8+0x7c>)
 80007da:	f000 ffff 	bl	80017dc <HAL_GPIO_WritePin>

  tx = value;
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2102      	movs	r1, #2
 80007e6:	480b      	ldr	r0, [pc, #44]	; (8000814 <set_param8+0x7c>)
 80007e8:	f000 fff8 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 80007ec:	f107 020e 	add.w	r2, r7, #14
 80007f0:	f107 010f 	add.w	r1, r7, #15
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <set_param8+0x80>)
 80007fe:	f002 f9e4 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2102      	movs	r1, #2
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <set_param8+0x7c>)
 8000808:	f000 ffe8 	bl	80017dc <HAL_GPIO_WritePin>

}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020000 	.word	0x40020000
 8000818:	2000011c 	.word	0x2000011c

0800081c <set_param16>:


void set_param16(powerstep01_Registers_t param, uint16_t value)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
  uint8_t tx = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	73fb      	strb	r3, [r7, #15]
  uint8_t rx = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

  tx = POWERSTEP01_SET_PARAM | param;
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	73fb      	strb	r3, [r7, #15]

  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2102      	movs	r1, #2
 800083c:	4824      	ldr	r0, [pc, #144]	; (80008d0 <set_param16+0xb4>)
 800083e:	f000 ffcd 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 8000842:	f107 020e 	add.w	r2, r7, #14
 8000846:	f107 010f 	add.w	r1, r7, #15
 800084a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	2301      	movs	r3, #1
 8000852:	4820      	ldr	r0, [pc, #128]	; (80008d4 <set_param16+0xb8>)
 8000854:	f002 f9b9 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2102      	movs	r1, #2
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <set_param16+0xb4>)
 800085e:	f000 ffbd 	bl	80017dc <HAL_GPIO_WritePin>

  tx = (uint8_t)(value >> 8);
 8000862:	88bb      	ldrh	r3, [r7, #4]
 8000864:	0a1b      	lsrs	r3, r3, #8
 8000866:	b29b      	uxth	r3, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2102      	movs	r1, #2
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <set_param16+0xb4>)
 8000872:	f000 ffb3 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 8000876:	f107 020e 	add.w	r2, r7, #14
 800087a:	f107 010f 	add.w	r1, r7, #15
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2301      	movs	r3, #1
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <set_param16+0xb8>)
 8000888:	f002 f99f 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2102      	movs	r1, #2
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <set_param16+0xb4>)
 8000892:	f000 ffa3 	bl	80017dc <HAL_GPIO_WritePin>


  tx = (uint8_t)(value & 0x00ff);
 8000896:	88bb      	ldrh	r3, [r7, #4]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2102      	movs	r1, #2
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <set_param16+0xb4>)
 80008a2:	f000 ff9b 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1,1000);
 80008a6:	f107 020e 	add.w	r2, r7, #14
 80008aa:	f107 010f 	add.w	r1, r7, #15
 80008ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <set_param16+0xb8>)
 80008b8:	f002 f987 	bl	8002bca <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2102      	movs	r1, #2
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <set_param16+0xb4>)
 80008c2:	f000 ff8b 	bl	80017dc <HAL_GPIO_WritePin>

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40020000 	.word	0x40020000
 80008d4:	2000011c 	.word	0x2000011c

080008d8 <init_stepper>:

void init_stepper(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  set_param8(POWERSTEP01_KVAL_HOLD, 64);
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	2009      	movs	r0, #9
 80008e0:	f7ff ff5a 	bl	8000798 <set_param8>
  set_param8(POWERSTEP01_KVAL_RUN, 64);
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	200a      	movs	r0, #10
 80008e8:	f7ff ff56 	bl	8000798 <set_param8>
  set_param8(POWERSTEP01_KVAL_ACC, 64);
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	200b      	movs	r0, #11
 80008f0:	f7ff ff52 	bl	8000798 <set_param8>
  set_param8(POWERSTEP01_KVAL_DEC, 64);
 80008f4:	2140      	movs	r1, #64	; 0x40
 80008f6:	200c      	movs	r0, #12
 80008f8:	f7ff ff4e 	bl	8000798 <set_param8>
  set_param8(POWERSTEP01_OCD_TH, 31);
 80008fc:	211f      	movs	r1, #31
 80008fe:	2013      	movs	r0, #19
 8000900:	f7ff ff4a 	bl	8000798 <set_param8>
  set_param8(POWERSTEP01_STALL_TH, 31);
 8000904:	211f      	movs	r1, #31
 8000906:	2014      	movs	r0, #20
 8000908:	f7ff ff46 	bl	8000798 <set_param8>
  set_param8(POWERSTEP01_STEP_MODE, 0);
 800090c:	2100      	movs	r1, #0
 800090e:	2016      	movs	r0, #22
 8000910:	f7ff ff42 	bl	8000798 <set_param8>
  set_param16(POWERSTEP01_CONFIG, 0x3e08);
 8000914:	f643 6108 	movw	r1, #15880	; 0x3e08
 8000918:	201a      	movs	r0, #26
 800091a:	f7ff ff7f 	bl	800081c <set_param16>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 fc54 	bl	80011d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f85f 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 f9a7 	bl	8000c84 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000936:	f000 f8d5 	bl	8000ae4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 800093a:	f000 f973 	bl	8000c24 <MX_USART6_UART_Init>
  MX_TIM12_Init();
 800093e:	f000 f90f 	bl	8000b60 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */



  printf("powerstep01 bringup!\r\n");
 8000942:	4827      	ldr	r0, [pc, #156]	; (80009e0 <main+0xbc>)
 8000944:	f004 f828 	bl	8004998 <puts>
  uint16_t status = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	80fb      	strh	r3, [r7, #6]
  //HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
  HAL_Delay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fc9f 	bl	8001290 <HAL_Delay>


  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	4823      	ldr	r0, [pc, #140]	; (80009e4 <main+0xc0>)
 8000958:	f000 ff40 	bl	80017dc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fc97 	bl	8001290 <HAL_Delay>

  setHiZ();
 8000962:	f7ff fe3f 	bl	80005e4 <setHiZ>
  HAL_Delay(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f000 fc92 	bl	8001290 <HAL_Delay>
  init_stepper();
 800096c:	f7ff ffb4 	bl	80008d8 <init_stepper>
  HAL_Delay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f000 fc8d 	bl	8001290 <HAL_Delay>
  setHiZ();
 8000976:	f7ff fe35 	bl	80005e4 <setHiZ>
  HAL_Delay(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f000 fc88 	bl	8001290 <HAL_Delay>

 // test_move();

  HAL_Delay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f000 fc85 	bl	8001290 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    printf("before test = 0x%x\r\n", status);
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	4619      	mov	r1, r3
 800098a:	4817      	ldr	r0, [pc, #92]	; (80009e8 <main+0xc4>)
 800098c:	f003 ff7e 	bl	800488c <iprintf>
    test_move();
 8000990:	f7ff fe9c 	bl	80006cc <test_move>
    HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f000 fc7b 	bl	8001290 <HAL_Delay>
    status = getStatus();
 800099a:	f7ff fe41 	bl	8000620 <getStatus>
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
    printf("status = 0x%x\r\n", status);
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <main+0xc8>)
 80009a8:	f003 ff70 	bl	800488c <iprintf>
    HAL_Delay(1000);
 80009ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b0:	f000 fc6e 	bl	8001290 <HAL_Delay>
    setHiZ();
 80009b4:	f7ff fe16 	bl	80005e4 <setHiZ>
    status = getStatus();
 80009b8:	f7ff fe32 	bl	8000620 <getStatus>
 80009bc:	4603      	mov	r3, r0
 80009be:	80fb      	strh	r3, [r7, #6]
    printf("status = 0x%x\r\n", status);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <main+0xc8>)
 80009c6:	f003 ff61 	bl	800488c <iprintf>
    status = getStatus();
 80009ca:	f7ff fe29 	bl	8000620 <getStatus>
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]
    printf("status = 0x%x\r\n", status);
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	4619      	mov	r1, r3
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <main+0xc8>)
 80009d8:	f003 ff58 	bl	800488c <iprintf>
    printf("before test = 0x%x\r\n", status);
 80009dc:	e7d3      	b.n	8000986 <main+0x62>
 80009de:	bf00      	nop
 80009e0:	0800583c 	.word	0x0800583c
 80009e4:	40021000 	.word	0x40021000
 80009e8:	08005854 	.word	0x08005854
 80009ec:	0800586c 	.word	0x0800586c

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0b4      	sub	sp, #208	; 0xd0
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 ff3c 	bl	800487c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 ff2d 	bl	800487c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <SystemClock_Config+0xec>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <SystemClock_Config+0xec>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <SystemClock_Config+0xec>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <SystemClock_Config+0xf0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a42:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <SystemClock_Config+0xf0>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <SystemClock_Config+0xf0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a56:	2302      	movs	r3, #2
 8000a58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a62:	2310      	movs	r3, #16
 8000a64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fecc 	bl	8001810 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000a7e:	f000 f979 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f956 	bl	8001d58 <HAL_RCC_ClockConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ab2:	f000 f95f 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000aba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000abc:	2300      	movs	r3, #0
 8000abe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fb1d 	bl	8002104 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000ad0:	f000 f950 	bl	8000d74 <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	37d0      	adds	r7, #208	; 0xd0
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_SPI1_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000afe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b32:	2207      	movs	r2, #7
 8000b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_SPI1_Init+0x74>)
 8000b44:	f001 fe28 	bl	8002798 <HAL_SPI_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 f911 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000011c 	.word	0x2000011c
 8000b5c:	40013000 	.word	0x40013000

08000b60 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
 8000b82:	615a      	str	r2, [r3, #20]
 8000b84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000b88:	4a25      	ldr	r2, [pc, #148]	; (8000c20 <MX_TIM12_Init+0xc0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000b8c:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000b9a:	2264      	movs	r2, #100	; 0x64
 8000b9c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000baa:	481c      	ldr	r0, [pc, #112]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000bac:	f002 fb80 	bl	80032b0 <HAL_TIM_Base_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000bb6:	f000 f8dd 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4815      	ldr	r0, [pc, #84]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000bc8:	f002 fd3a 	bl	8003640 <HAL_TIM_ConfigClockSource>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM12_Init+0x76>
  {
    Error_Handler();
 8000bd2:	f000 f8cf 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000bd8:	f002 fbc1 	bl	800335e <HAL_TIM_PWM_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM12_Init+0x86>
  {
    Error_Handler();
 8000be2:	f000 f8c7 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be6:	2360      	movs	r3, #96	; 0x60
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000bea:	2332      	movs	r3, #50	; 0x32
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4807      	ldr	r0, [pc, #28]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000bfe:	f002 fc0f 	bl	8003420 <HAL_TIM_PWM_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM12_Init+0xac>
  {
    Error_Handler();
 8000c08:	f000 f8b4 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_TIM12_Init+0xbc>)
 8000c0e:	f000 f95d 	bl	8000ecc <HAL_TIM_MspPostInit>

}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	; 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000180 	.word	0x20000180
 8000c20:	40001800 	.word	0x40001800

08000c24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c2a:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <MX_USART6_UART_Init+0x5c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_USART6_UART_Init+0x58>)
 8000c68:	f003 f948 	bl	8003efc <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f87f 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	40011400 	.word	0x40011400

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	; 0x28
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a32      	ldr	r2, [pc, #200]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a2c      	ldr	r2, [pc, #176]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a26      	ldr	r2, [pc, #152]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_GPIO_Init+0xe4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2110      	movs	r1, #16
 8000d16:	4815      	ldr	r0, [pc, #84]	; (8000d6c <MX_GPIO_Init+0xe8>)
 8000d18:	f000 fd60 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4813      	ldr	r0, [pc, #76]	; (8000d70 <MX_GPIO_Init+0xec>)
 8000d22:	f000 fd5b 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000d26:	2310      	movs	r3, #16
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <MX_GPIO_Init+0xe8>)
 8000d3e:	f000 fbb1 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000d42:	2302      	movs	r3, #2
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_GPIO_Init+0xec>)
 8000d5a:	f000 fba3 	bl	80014a4 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40020000 	.word	0x40020000

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <HAL_SPI_MspInit+0xb4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d143      	bne.n	8000e72 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_SPI_MspInit+0xb8>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000e32:	2330      	movs	r3, #48	; 0x30
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e42:	2305      	movs	r3, #5
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <HAL_SPI_MspInit+0xbc>)
 8000e4e:	f000 fb29 	bl	80014a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e52:	2320      	movs	r3, #32
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e62:	2305      	movs	r3, #5
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_SPI_MspInit+0xc0>)
 8000e6e:	f000 fb19 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40013000 	.word	0x40013000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40020000 	.word	0x40020000

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_TIM_Base_MspInit+0x38>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d10b      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8000ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40001800 	.word	0x40001800
 8000ec8:	40023800 	.word	0x40023800

08000ecc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM12)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <HAL_TIM_MspPostInit+0x64>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d11b      	bne.n	8000f26 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_TIM_MspPostInit+0x68>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f16:	2309      	movs	r3, #9
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_TIM_MspPostInit+0x6c>)
 8000f22:	f000 fabf 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001800 	.word	0x40001800
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40021c00 	.word	0x40021c00

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d127      	bne.n	8000fae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0x80>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000f8e:	23c0      	movs	r3, #192	; 0xc0
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0x84>)
 8000faa:	f000 fa7b 	bl	80014a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f91e 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	e00a      	b.n	8001040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800102a:	f3af 8000 	nop.w
 800102e:	4601      	mov	r1, r0
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	b2ca      	uxtb	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf0      	blt.n	800102a <_read+0x12>
	}

return len;
 8001048:	687b      	ldr	r3, [r7, #4]
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff faa3 	bl	80005b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x12>
	}
	return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_close>:

int _close(int file)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	return -1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b2:	605a      	str	r2, [r3, #4]
	return 0;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_isatty>:

int _isatty(int file)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	return 1;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
	return 0;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f003 fb80 	bl	8004828 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20040000 	.word	0x20040000
 8001154:	00000400 	.word	0x00000400
 8001158:	2000008c 	.word	0x2000008c
 800115c:	200001e0 	.word	0x200001e0

08001160 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a0:	4c0b      	ldr	r4, [pc, #44]	; (80011d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ae:	f7ff ffd7 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f003 fb3f 	bl	8004834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fbb5 	bl	8000924 <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011c8:	0800593c 	.word	0x0800593c
  ldr r2, =_sbss
 80011cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011d0:	200001e0 	.word	0x200001e0

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>

080011d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011da:	2003      	movs	r0, #3
 80011dc:	f000 f92e 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f805 	bl	80011f0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011e6:	f7ff fdcb 	bl	8000d80 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x54>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <HAL_InitTick+0x58>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f93b 	bl	800148a <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f911 	bl	8001452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	; (800124c <HAL_InitTick+0x5c>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000000 	.word	0x20000000
 8001248:	20000008 	.word	0x20000008
 800124c:	20000004 	.word	0x20000004

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000008 	.word	0x20000008
 8001274:	200001cc 	.word	0x200001cc

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	200001cc 	.word	0x200001cc

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <__NVIC_SetPriorityGrouping+0x40>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	4313      	orrs	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x40>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0000 	.word	0x05fa0000

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff47 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5c 	bl	8001320 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff8e 	bl	8001390 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5d 	bl	800133c <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb0 	bl	80013f8 <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	e169      	b.n	8001798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014c4:	2201      	movs	r2, #1
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	f040 8158 	bne.w	8001792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00b      	beq.n	8001502 <HAL_GPIO_Init+0x5e>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f6:	2b11      	cmp	r3, #17
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x100>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b12      	cmp	r3, #18
 80015a2:	d123      	bne.n	80015ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0203 	and.w	r2, r3, #3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80b2 	beq.w	8001792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a5f      	ldr	r2, [pc, #380]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001646:	4a5b      	ldr	r2, [pc, #364]	; (80017b4 <HAL_GPIO_Init+0x310>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <HAL_GPIO_Init+0x314>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x318>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	; (80017c0 <HAL_GPIO_Init+0x31c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x320>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_GPIO_Init+0x324>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_GPIO_Init+0x328>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_GPIO_Init+0x32c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4b      	ldr	r2, [pc, #300]	; (80017d4 <HAL_GPIO_Init+0x330>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x20a>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	; (80017b4 <HAL_GPIO_Init+0x310>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_GPIO_Init+0x334>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <HAL_GPIO_Init+0x334>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_GPIO_Init+0x334>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae92 	bls.w	80014c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40013c00 	.word	0x40013c00

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017f8:	e003      	b.n	8001802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e291      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001834:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b04      	cmp	r3, #4
 800183e:	d00c      	beq.n	800185a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001840:	4b93      	ldr	r3, [pc, #588]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b08      	cmp	r3, #8
 800184a:	d112      	bne.n	8001872 <HAL_RCC_OscConfig+0x62>
 800184c:	4b90      	ldr	r3, [pc, #576]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001858:	d10b      	bne.n	8001872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185a:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d06c      	beq.n	8001940 <HAL_RCC_OscConfig+0x130>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d168      	bne.n	8001940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e26b      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x7a>
 800187c:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a83      	ldr	r2, [pc, #524]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e02e      	b.n	80018e8 <HAL_RCC_OscConfig+0xd8>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x9c>
 8001892:	4b7f      	ldr	r3, [pc, #508]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a7e      	ldr	r2, [pc, #504]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b7c      	ldr	r3, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7b      	ldr	r2, [pc, #492]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e01d      	b.n	80018e8 <HAL_RCC_OscConfig+0xd8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b4:	d10c      	bne.n	80018d0 <HAL_RCC_OscConfig+0xc0>
 80018b6:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a75      	ldr	r2, [pc, #468]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a72      	ldr	r2, [pc, #456]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e00b      	b.n	80018e8 <HAL_RCC_OscConfig+0xd8>
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a6e      	ldr	r2, [pc, #440]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b6c      	ldr	r3, [pc, #432]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a6b      	ldr	r2, [pc, #428]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fcc2 	bl	8001278 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fcbe 	bl	8001278 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e21f      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190a:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0xe8>
 8001916:	e014      	b.n	8001942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fcae 	bl	8001278 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fcaa 	bl	8001278 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e20b      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x110>
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d069      	beq.n	8001a22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194e:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b4d      	ldr	r3, [pc, #308]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
 8001962:	2b08      	cmp	r3, #8
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x190>
 8001966:	4b4a      	ldr	r3, [pc, #296]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x17a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1df      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	493d      	ldr	r1, [pc, #244]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e040      	b.n	8001a22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a38      	ldr	r2, [pc, #224]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fc60 	bl	8001278 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019bc:	f7ff fc5c 	bl	8001278 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1bd      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4929      	ldr	r1, [pc, #164]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
 80019ee:	e018      	b.n	8001a22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 80019f6:	f023 0301 	bic.w	r3, r3, #1
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fc3c 	bl	8001278 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff fc38 	bl	8001278 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e199      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d038      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d019      	beq.n	8001a6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff fc19 	bl	8001278 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fc15 	bl	8001278 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e176      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x23a>
 8001a68:	e01a      	b.n	8001aa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_RCC_OscConfig+0x280>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbff 	bl	8001278 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fbfb 	bl	8001278 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d903      	bls.n	8001a94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e15c      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
 8001a90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	4b91      	ldr	r3, [pc, #580]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a4 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aae:	4b8b      	ldr	r3, [pc, #556]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	4b88      	ldr	r3, [pc, #544]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a87      	ldr	r2, [pc, #540]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad6:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <HAL_RCC_OscConfig+0x4d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d118      	bne.n	8001b14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x4d0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x4d0>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fbc3 	bl	8001278 <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af6:	f7ff fbbf 	bl	8001278 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e120      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b08:	4b75      	ldr	r3, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x4d0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x31a>
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_OscConfig+0x376>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x33c>
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4a:	e01c      	b.n	8001b86 <HAL_RCC_OscConfig+0x376>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x35e>
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	4a5d      	ldr	r2, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6c:	e00b      	b.n	8001b86 <HAL_RCC_OscConfig+0x376>
 8001b6e:	4b5b      	ldr	r3, [pc, #364]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a5a      	ldr	r2, [pc, #360]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a57      	ldr	r2, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d015      	beq.n	8001bba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb73 	bl	8001278 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff fb6f 	bl	8001278 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0ce      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ee      	beq.n	8001b96 <HAL_RCC_OscConfig+0x386>
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff fb5d 	bl	8001278 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fb59 	bl	8001278 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0b8      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1ee      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001be4:	7dfb      	ldrb	r3, [r7, #23]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d105      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80a4 	beq.w	8001d48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d06b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d149      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a30      	ldr	r2, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb2a 	bl	8001278 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fb26 	bl	8001278 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e087      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fafa 	bl	8001278 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff faf6 	bl	8001278 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e057      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x478>
 8001ca6:	e04f      	b.n	8001d48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fae0 	bl	8001278 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff fadc 	bl	8001278 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e03d      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_RCC_OscConfig+0x4cc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4ac>
 8001cda:	e035      	b.n	8001d48 <HAL_RCC_OscConfig+0x538>
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x544>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0d0      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 020f 	bic.w	r2, r3, #15
 8001d86:	4965      	ldr	r1, [pc, #404]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d040      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e073      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fa14 	bl	8001278 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff fa10 	bl	8001278 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e053      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d210      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 020f 	bic.w	r2, r3, #15
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e032      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f821 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x1cc>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1d0>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1d4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f970 	bl	80011f0 <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00
 8001f20:	40023800 	.word	0x40023800
 8001f24:	0800587c 	.word	0x0800587c
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f36:	2100      	movs	r1, #0
 8001f38:	6079      	str	r1, [r7, #4]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	60f9      	str	r1, [r7, #12]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f42:	2100      	movs	r1, #0
 8001f44:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f46:	4952      	ldr	r1, [pc, #328]	; (8002090 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f48:	6889      	ldr	r1, [r1, #8]
 8001f4a:	f001 010c 	and.w	r1, r1, #12
 8001f4e:	2908      	cmp	r1, #8
 8001f50:	d00d      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x3e>
 8001f52:	2908      	cmp	r1, #8
 8001f54:	f200 8094 	bhi.w	8002080 <HAL_RCC_GetSysClockFreq+0x150>
 8001f58:	2900      	cmp	r1, #0
 8001f5a:	d002      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x32>
 8001f5c:	2904      	cmp	r1, #4
 8001f5e:	d003      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x38>
 8001f60:	e08e      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f62:	4b4c      	ldr	r3, [pc, #304]	; (8002094 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f64:	60bb      	str	r3, [r7, #8]
      break;
 8001f66:	e08e      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f6a:	60bb      	str	r3, [r7, #8]
      break;
 8001f6c:	e08b      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f6e:	4948      	ldr	r1, [pc, #288]	; (8002090 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f70:	6849      	ldr	r1, [r1, #4]
 8001f72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f76:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f78:	4945      	ldr	r1, [pc, #276]	; (8002090 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f7a:	6849      	ldr	r1, [r1, #4]
 8001f7c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f80:	2900      	cmp	r1, #0
 8001f82:	d024      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f84:	4942      	ldr	r1, [pc, #264]	; (8002090 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f86:	6849      	ldr	r1, [r1, #4]
 8001f88:	0989      	lsrs	r1, r1, #6
 8001f8a:	4608      	mov	r0, r1
 8001f8c:	f04f 0100 	mov.w	r1, #0
 8001f90:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001f94:	f04f 0500 	mov.w	r5, #0
 8001f98:	ea00 0204 	and.w	r2, r0, r4
 8001f9c:	ea01 0305 	and.w	r3, r1, r5
 8001fa0:	493d      	ldr	r1, [pc, #244]	; (8002098 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fa2:	fb01 f003 	mul.w	r0, r1, r3
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	fb01 f102 	mul.w	r1, r1, r2
 8001fac:	1844      	adds	r4, r0, r1
 8001fae:	493a      	ldr	r1, [pc, #232]	; (8002098 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fb0:	fba2 0101 	umull	r0, r1, r2, r1
 8001fb4:	1863      	adds	r3, r4, r1
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	f7fe f97e 	bl	80002c0 <__aeabi_uldivmod>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e04a      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	ea02 0400 	and.w	r4, r2, r0
 8001fe6:	ea03 0501 	and.w	r5, r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	014b      	lsls	r3, r1, #5
 8001ff8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ffc:	0142      	lsls	r2, r0, #5
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	1b00      	subs	r0, r0, r4
 8002004:	eb61 0105 	sbc.w	r1, r1, r5
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	018b      	lsls	r3, r1, #6
 8002012:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002016:	0182      	lsls	r2, r0, #6
 8002018:	1a12      	subs	r2, r2, r0
 800201a:	eb63 0301 	sbc.w	r3, r3, r1
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	00d9      	lsls	r1, r3, #3
 8002028:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800202c:	00d0      	lsls	r0, r2, #3
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	1912      	adds	r2, r2, r4
 8002034:	eb45 0303 	adc.w	r3, r5, r3
 8002038:	f04f 0000 	mov.w	r0, #0
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	0299      	lsls	r1, r3, #10
 8002042:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002046:	0290      	lsls	r0, r2, #10
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	461a      	mov	r2, r3
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f7fe f932 	bl	80002c0 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4613      	mov	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_GetSysClockFreq+0x160>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	60bb      	str	r3, [r7, #8]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_GetSysClockFreq+0x164>)
 8002082:	60bb      	str	r3, [r7, #8]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	68bb      	ldr	r3, [r7, #8]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bdb0      	pop	{r4, r5, r7, pc}
 8002090:	40023800 	.word	0x40023800
 8002094:	00f42400 	.word	0x00f42400
 8002098:	017d7840 	.word	0x017d7840

0800209c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	0800588c 	.word	0x0800588c

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	0800588c 	.word	0x0800588c

08002104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d012      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002128:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a64      	ldr	r2, [pc, #400]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800212e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	4960      	ldr	r1, [pc, #384]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d017      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800215a:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002168:	4955      	ldr	r1, [pc, #340]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002178:	d101      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d017      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002196:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a4:	4946      	ldr	r1, [pc, #280]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b4:	d101      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80021b6:	2301      	movs	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 808b 	beq.w	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a39      	ldr	r2, [pc, #228]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	; 0x40
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7ff f83e 	bl	8001278 <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002200:	f7ff f83a 	bl	8001278 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e2bc      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d035      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d02e      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d114      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff f802 	bl	8001278 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fffe 	bl	8001278 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e27e      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ee      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a6:	d111      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80022b6:	400b      	ands	r3, r1
 80022b8:	4901      	ldr	r1, [pc, #4]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
 80022be:	e00b      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	0ffffcff 	.word	0x0ffffcff
 80022cc:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4aa3      	ldr	r2, [pc, #652]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	4ba1      	ldr	r3, [pc, #644]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	499e      	ldr	r1, [pc, #632]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022f6:	4b9a      	ldr	r3, [pc, #616]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fc:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80022fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002306:	4b96      	ldr	r3, [pc, #600]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002308:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4993      	ldr	r1, [pc, #588]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002324:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	498b      	ldr	r1, [pc, #556]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002346:	4b86      	ldr	r3, [pc, #536]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002354:	4982      	ldr	r1, [pc, #520]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002368:	4b7d      	ldr	r3, [pc, #500]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002376:	497a      	ldr	r1, [pc, #488]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238a:	4b75      	ldr	r3, [pc, #468]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	4971      	ldr	r1, [pc, #452]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ac:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f023 020c 	bic.w	r2, r3, #12
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4969      	ldr	r1, [pc, #420]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023dc:	4960      	ldr	r1, [pc, #384]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f0:	4b5b      	ldr	r3, [pc, #364]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	4958      	ldr	r1, [pc, #352]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002412:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	494f      	ldr	r1, [pc, #316]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002434:	4b4a      	ldr	r3, [pc, #296]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002442:	4947      	ldr	r1, [pc, #284]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002456:	4b42      	ldr	r3, [pc, #264]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	493e      	ldr	r1, [pc, #248]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002478:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d011      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	492d      	ldr	r1, [pc, #180]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b8:	d101      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d8:	4921      	ldr	r1, [pc, #132]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024ec:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024fa:	4919      	ldr	r1, [pc, #100]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800251c:	4910      	ldr	r1, [pc, #64]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d006      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 809d 	beq.w	8002672 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002538:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a08      	ldr	r2, [pc, #32]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800253e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002544:	f7fe fe98 	bl	8001278 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254a:	e00b      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800254c:	f7fe fe94 	bl	8001278 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d904      	bls.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e116      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x688>
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002564:	4b8b      	ldr	r3, [pc, #556]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ed      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d113      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002584:	4b83      	ldr	r3, [pc, #524]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	0e1b      	lsrs	r3, r3, #24
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	019a      	lsls	r2, r3, #6
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	071b      	lsls	r3, r3, #28
 80025a4:	497b      	ldr	r1, [pc, #492]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d6:	d11f      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025d8:	4b6e      	ldr	r3, [pc, #440]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025de:	0f1b      	lsrs	r3, r3, #28
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	019a      	lsls	r2, r3, #6
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	071b      	lsls	r3, r3, #28
 80025f8:	4966      	ldr	r1, [pc, #408]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002600:	4b64      	ldr	r3, [pc, #400]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002606:	f023 021f 	bic.w	r2, r3, #31
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	3b01      	subs	r3, #1
 8002610:	4960      	ldr	r1, [pc, #384]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	019a      	lsls	r2, r3, #6
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	061b      	lsls	r3, r3, #24
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	071b      	lsls	r3, r3, #28
 8002638:	4956      	ldr	r1, [pc, #344]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002640:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a53      	ldr	r2, [pc, #332]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800264a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800264c:	f7fe fe14 	bl	8001278 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002654:	f7fe fe10 	bl	8001278 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e092      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002666:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b01      	cmp	r3, #1
 8002676:	f040 8088 	bne.w	800278a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800267a:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002686:	f7fe fdf7 	bl	8001278 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800268e:	f7fe fdf3 	bl	8001278 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e075      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026a0:	4b3c      	ldr	r3, [pc, #240]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ac:	d0ef      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d024      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d120      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	019a      	lsls	r2, r3, #6
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4927      	ldr	r1, [pc, #156]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002704:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	3b01      	subs	r3, #1
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	4920      	ldr	r1, [pc, #128]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800272c:	d113      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800272e:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	0e1b      	lsrs	r3, r3, #24
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	019a      	lsls	r2, r3, #6
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	041b      	lsls	r3, r3, #16
 8002748:	431a      	orrs	r2, r3
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	4911      	ldr	r1, [pc, #68]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002762:	f7fe fd89 	bl	8001278 <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800276a:	f7fe fd85 	bl	8001278 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e007      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002788:	d1ef      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e09d      	b.n	80028e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d009      	beq.n	80027d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
 80027c2:	e005      	b.n	80027d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe faec 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002806:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002810:	d902      	bls.n	8002818 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e002      	b.n	800281e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002826:	d007      	beq.n	8002838 <HAL_SPI_Init+0xa0>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002830:	d002      	beq.n	8002838 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	ea42 0103 	orr.w	r1, r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	f003 0204 	and.w	r2, r3, #4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028b4:	ea42 0103 	orr.w	r1, r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b088      	sub	sp, #32
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_SPI_Transmit+0x22>
 800290c:	2302      	movs	r3, #2
 800290e:	e158      	b.n	8002bc2 <HAL_SPI_Transmit+0x2d4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002918:	f7fe fcae 	bl	8001278 <HAL_GetTick>
 800291c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002932:	e13d      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_SPI_Transmit+0x52>
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002944:	e134      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2203      	movs	r2, #3
 800294a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	d10f      	bne.n	80029b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d007      	beq.n	80029d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d8:	d94b      	bls.n	8002a72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0xfa>
 80029e2:	8afb      	ldrh	r3, [r7, #22]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d13e      	bne.n	8002a66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	1c9a      	adds	r2, r3, #2
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a0c:	e02b      	b.n	8002a66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d112      	bne.n	8002a42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a40:	e011      	b.n	8002a66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a42:	f7fe fc19 	bl	8001278 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d803      	bhi.n	8002a5a <HAL_SPI_Transmit+0x16c>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_Transmit+0x172>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a64:	e0a4      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ce      	bne.n	8002a0e <HAL_SPI_Transmit+0x120>
 8002a70:	e07c      	b.n	8002b6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Transmit+0x192>
 8002a7a:	8afb      	ldrh	r3, [r7, #22]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d170      	bne.n	8002b62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d912      	bls.n	8002ab0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	1c9a      	adds	r2, r3, #2
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b02      	subs	r3, #2
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aae:	e058      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ad6:	e044      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d12b      	bne.n	8002b3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d912      	bls.n	8002b16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	881a      	ldrh	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	1c9a      	adds	r2, r3, #2
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b02      	subs	r3, #2
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b14:	e025      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b3c:	e011      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3e:	f7fe fb9b 	bl	8001278 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d803      	bhi.n	8002b56 <HAL_SPI_Transmit+0x268>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d102      	bne.n	8002b5c <HAL_SPI_Transmit+0x26e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b60:	e026      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b5      	bne.n	8002ad8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb57 	bl	8003224 <SPI_EndRxTxTransaction>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e000      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b08a      	sub	sp, #40	; 0x28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x26>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e1fb      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x41e>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf8:	f7fe fb3e 	bl	8001278 <HAL_GetTick>
 8002bfc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c14:	7efb      	ldrb	r3, [r7, #27]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00e      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x6e>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c20:	d106      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x66>
 8002c2a:	7efb      	ldrb	r3, [r7, #27]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d003      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c36:	e1cd      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x80>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x80>
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c50:	e1c0      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	887a      	ldrh	r2, [r7, #2]
 8002c92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_SPI_TransmitReceive+0xe6>
 8002caa:	8a3b      	ldrh	r3, [r7, #16]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d908      	bls.n	8002cc2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	e007      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf8:	d97c      	bls.n	8002df4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x13e>
 8002d02:	8a7b      	ldrh	r3, [r7, #18]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d169      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2c:	e056      	b.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x1aa>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x1aa>
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d113      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	1c9a      	adds	r2, r3, #2
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d11c      	bne.n	8002dbc <HAL_SPI_TransmitReceive+0x1f2>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dbc:	f7fe fa5c 	bl	8001278 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d807      	bhi.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d003      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dda:	e0fb      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1a3      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x164>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19d      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x164>
 8002df2:	e0df      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x23a>
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 80cb 	bne.w	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d912      	bls.n	8002e34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	881a      	ldrh	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b02      	subs	r3, #2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e32:	e0b2      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5a:	e09e      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d134      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x30a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02f      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x30a>
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d12c      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d912      	bls.n	8002eaa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c9a      	adds	r2, r3, #2
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b02      	subs	r3, #2
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ea8:	e012      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d148      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x3aa>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d042      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d923      	bls.n	8002f42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	b292      	uxth	r2, r2
 8002f06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b02      	subs	r3, #2
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d81f      	bhi.n	8002f70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	e016      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f103 020c 	add.w	r2, r3, #12
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f74:	f7fe f980 	bl	8001278 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d803      	bhi.n	8002f8c <HAL_SPI_TransmitReceive+0x3c2>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d102      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x3c8>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f98:	e01c      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f af5b 	bne.w	8002e5c <HAL_SPI_TransmitReceive+0x292>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f47f af54 	bne.w	8002e5c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f933 	bl	8003224 <SPI_EndRxTxTransaction>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d006      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
 8002fd0:	e000      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002fd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3728      	adds	r7, #40	; 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003000:	f7fe f93a 	bl	8001278 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003010:	f7fe f932 	bl	8001278 <HAL_GetTick>
 8003014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	0d1b      	lsrs	r3, r3, #20
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003026:	e054      	b.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d050      	beq.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003030:	f7fe f922 	bl	8001278 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	d902      	bls.n	8003046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13d      	bne.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d111      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d004      	beq.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d107      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308c:	d10f      	bne.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e017      	b.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d19b      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800310e:	f7fe f8b3 	bl	8001278 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	4413      	add	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800311e:	f7fe f8ab 	bl	8001278 <HAL_GetTick>
 8003122:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00da      	lsls	r2, r3, #3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	0d1b      	lsrs	r3, r3, #20
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800313c:	e062      	b.n	8003204 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003144:	d109      	bne.n	800315a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003158:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d050      	beq.n	8003204 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003162:	f7fe f889 	bl	8001278 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	429a      	cmp	r2, r3
 8003170:	d902      	bls.n	8003178 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d13d      	bne.n	80031f4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003186:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003190:	d111      	bne.n	80031b6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800319a:	d004      	beq.n	80031a6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a4:	d107      	bne.n	80031b6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d10f      	bne.n	80031e0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e010      	b.n	8003216 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	3b01      	subs	r3, #1
 8003202:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d194      	bne.n	800313e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000000 	.word	0x20000000

08003224 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2200      	movs	r2, #0
 8003238:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ff5f 	bl	8003100 <SPI_WaitFifoStateUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e027      	b.n	80032a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7ff fec4 	bl	8002ff0 <SPI_WaitFlagStateUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e014      	b.n	80032a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff ff38 	bl	8003100 <SPI_WaitFifoStateUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e000      	b.n	80032a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e049      	b.n	8003356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd fdd8 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fa6c 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e049      	b.n	8003404 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f841 	bl	800340c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3304      	adds	r3, #4
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f000 fa15 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003436:	2302      	movs	r3, #2
 8003438:	e0fd      	b.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x216>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b14      	cmp	r3, #20
 8003446:	f200 80f0 	bhi.w	800362a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	080034a5 	.word	0x080034a5
 8003454:	0800362b 	.word	0x0800362b
 8003458:	0800362b 	.word	0x0800362b
 800345c:	0800362b 	.word	0x0800362b
 8003460:	080034e5 	.word	0x080034e5
 8003464:	0800362b 	.word	0x0800362b
 8003468:	0800362b 	.word	0x0800362b
 800346c:	0800362b 	.word	0x0800362b
 8003470:	08003527 	.word	0x08003527
 8003474:	0800362b 	.word	0x0800362b
 8003478:	0800362b 	.word	0x0800362b
 800347c:	0800362b 	.word	0x0800362b
 8003480:	08003567 	.word	0x08003567
 8003484:	0800362b 	.word	0x0800362b
 8003488:	0800362b 	.word	0x0800362b
 800348c:	0800362b 	.word	0x0800362b
 8003490:	080035a9 	.word	0x080035a9
 8003494:	0800362b 	.word	0x0800362b
 8003498:	0800362b 	.word	0x0800362b
 800349c:	0800362b 	.word	0x0800362b
 80034a0:	080035e9 	.word	0x080035e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fa2e 	bl	800390c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0208 	orr.w	r2, r2, #8
 80034be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6999      	ldr	r1, [r3, #24]
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
      break;
 80034e2:	e0a3      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fa80 	bl	80039f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6999      	ldr	r1, [r3, #24]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	021a      	lsls	r2, r3, #8
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	619a      	str	r2, [r3, #24]
      break;
 8003524:	e082      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fad7 	bl	8003ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0208 	orr.w	r2, r2, #8
 8003540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0204 	bic.w	r2, r2, #4
 8003550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69d9      	ldr	r1, [r3, #28]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	61da      	str	r2, [r3, #28]
      break;
 8003564:	e062      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68b9      	ldr	r1, [r7, #8]
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fb2d 	bl	8003bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69d9      	ldr	r1, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
      break;
 80035a6:	e041      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fb64 	bl	8003c7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80035e6:	e021      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fb96 	bl	8003d20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	021a      	lsls	r2, r3, #8
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003628:	e000      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800362a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop

08003640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIM_ConfigClockSource+0x18>
 8003654:	2302      	movs	r3, #2
 8003656:	e0b3      	b.n	80037c0 <HAL_TIM_ConfigClockSource+0x180>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	4b55      	ldr	r3, [pc, #340]	; (80037c8 <HAL_TIM_ConfigClockSource+0x188>)
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003690:	d03e      	beq.n	8003710 <HAL_TIM_ConfigClockSource+0xd0>
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003696:	f200 8087 	bhi.w	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800369e:	f000 8085 	beq.w	80037ac <HAL_TIM_ConfigClockSource+0x16c>
 80036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a6:	d87f      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036a8:	2b70      	cmp	r3, #112	; 0x70
 80036aa:	d01a      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0xa2>
 80036ac:	2b70      	cmp	r3, #112	; 0x70
 80036ae:	d87b      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036b0:	2b60      	cmp	r3, #96	; 0x60
 80036b2:	d050      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x116>
 80036b4:	2b60      	cmp	r3, #96	; 0x60
 80036b6:	d877      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036b8:	2b50      	cmp	r3, #80	; 0x50
 80036ba:	d03c      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0xf6>
 80036bc:	2b50      	cmp	r3, #80	; 0x50
 80036be:	d873      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d058      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x136>
 80036c4:	2b40      	cmp	r3, #64	; 0x40
 80036c6:	d86f      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036c8:	2b30      	cmp	r3, #48	; 0x30
 80036ca:	d064      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x156>
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d86b      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d060      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x156>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d867      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d05c      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x156>
 80036dc:	2b10      	cmp	r3, #16
 80036de:	d05a      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80036e0:	e062      	b.n	80037a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f000 fbe3 	bl	8003ebc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003704:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
      break;
 800370e:	e04e      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f000 fbcc 	bl	8003ebc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003732:	609a      	str	r2, [r3, #8]
      break;
 8003734:	e03b      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	461a      	mov	r2, r3
 8003744:	f000 fb40 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2150      	movs	r1, #80	; 0x50
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fb99 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003754:	e02b      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	461a      	mov	r2, r3
 8003764:	f000 fb5f 	bl	8003e26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2160      	movs	r1, #96	; 0x60
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fb89 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003774:	e01b      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	461a      	mov	r2, r3
 8003784:	f000 fb20 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2140      	movs	r1, #64	; 0x40
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb79 	bl	8003e86 <TIM_ITRx_SetConfig>
      break;
 8003794:	e00b      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f000 fb70 	bl	8003e86 <TIM_ITRx_SetConfig>
        break;
 80037a6:	e002      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80037ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fffeff88 	.word	0xfffeff88

080037cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <TIM_Base_SetConfig+0x114>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d00f      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a3d      	ldr	r2, [pc, #244]	; (80038e4 <TIM_Base_SetConfig+0x118>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <TIM_Base_SetConfig+0x11c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a3b      	ldr	r2, [pc, #236]	; (80038ec <TIM_Base_SetConfig+0x120>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_Base_SetConfig+0x40>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a3a      	ldr	r2, [pc, #232]	; (80038f0 <TIM_Base_SetConfig+0x124>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d108      	bne.n	800381e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <TIM_Base_SetConfig+0x114>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d02b      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d027      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <TIM_Base_SetConfig+0x118>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d023      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <TIM_Base_SetConfig+0x11c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d01f      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <TIM_Base_SetConfig+0x120>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01b      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <TIM_Base_SetConfig+0x124>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d017      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a28      	ldr	r2, [pc, #160]	; (80038f4 <TIM_Base_SetConfig+0x128>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a27      	ldr	r2, [pc, #156]	; (80038f8 <TIM_Base_SetConfig+0x12c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00f      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a26      	ldr	r2, [pc, #152]	; (80038fc <TIM_Base_SetConfig+0x130>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <TIM_Base_SetConfig+0x134>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a24      	ldr	r2, [pc, #144]	; (8003904 <TIM_Base_SetConfig+0x138>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_Base_SetConfig+0xb2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a23      	ldr	r2, [pc, #140]	; (8003908 <TIM_Base_SetConfig+0x13c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <TIM_Base_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0xf8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <TIM_Base_SetConfig+0x124>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d103      	bne.n	80038cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	615a      	str	r2, [r3, #20]
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40010400 	.word	0x40010400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800
 8003900:	40001800 	.word	0x40001800
 8003904:	40001c00 	.word	0x40001c00
 8003908:	40002000 	.word	0x40002000

0800390c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0201 	bic.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <TIM_OC1_SetConfig+0xd8>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f023 0302 	bic.w	r3, r3, #2
 8003954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a21      	ldr	r2, [pc, #132]	; (80039e8 <TIM_OC1_SetConfig+0xdc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_OC1_SetConfig+0x64>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a20      	ldr	r2, [pc, #128]	; (80039ec <TIM_OC1_SetConfig+0xe0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d10c      	bne.n	800398a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f023 0308 	bic.w	r3, r3, #8
 8003976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f023 0304 	bic.w	r3, r3, #4
 8003988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <TIM_OC1_SetConfig+0xdc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d003      	beq.n	800399a <TIM_OC1_SetConfig+0x8e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <TIM_OC1_SetConfig+0xe0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d111      	bne.n	80039be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	621a      	str	r2, [r3, #32]
}
 80039d8:	bf00      	nop
 80039da:	371c      	adds	r7, #28
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	fffeff8f 	.word	0xfffeff8f
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40010400 	.word	0x40010400

080039f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0210 	bic.w	r2, r3, #16
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <TIM_OC2_SetConfig+0xe4>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	021b      	lsls	r3, r3, #8
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 0320 	bic.w	r3, r3, #32
 8003a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <TIM_OC2_SetConfig+0xe8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC2_SetConfig+0x68>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a22      	ldr	r2, [pc, #136]	; (8003adc <TIM_OC2_SetConfig+0xec>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d10d      	bne.n	8003a74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <TIM_OC2_SetConfig+0xe8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d003      	beq.n	8003a84 <TIM_OC2_SetConfig+0x94>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <TIM_OC2_SetConfig+0xec>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d113      	bne.n	8003aac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	feff8fff 	.word	0xfeff8fff
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40010400 	.word	0x40010400

08003ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <TIM_OC3_SetConfig+0xe0>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <TIM_OC3_SetConfig+0xe4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <TIM_OC3_SetConfig+0x66>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <TIM_OC3_SetConfig+0xe8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <TIM_OC3_SetConfig+0xe4>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_OC3_SetConfig+0x92>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <TIM_OC3_SetConfig+0xe8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d113      	bne.n	8003b9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	621a      	str	r2, [r3, #32]
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	fffeff8f 	.word	0xfffeff8f
 8003bc4:	40010000 	.word	0x40010000
 8003bc8:	40010400 	.word	0x40010400

08003bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <TIM_OC4_SetConfig+0xa4>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <TIM_OC4_SetConfig+0xa8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_OC4_SetConfig+0x68>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <TIM_OC4_SetConfig+0xac>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d109      	bne.n	8003c48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	019b      	lsls	r3, r3, #6
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	feff8fff 	.word	0xfeff8fff
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400

08003c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <TIM_OC5_SetConfig+0x98>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	041b      	lsls	r3, r3, #16
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <TIM_OC5_SetConfig+0x9c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_OC5_SetConfig+0x5e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <TIM_OC5_SetConfig+0xa0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d109      	bne.n	8003cee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	021b      	lsls	r3, r3, #8
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	621a      	str	r2, [r3, #32]
}
 8003d08:	bf00      	nop
 8003d0a:	371c      	adds	r7, #28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	fffeff8f 	.word	0xfffeff8f
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40010400 	.word	0x40010400

08003d20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <TIM_OC6_SetConfig+0x9c>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	021b      	lsls	r3, r3, #8
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	051b      	lsls	r3, r3, #20
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a13      	ldr	r2, [pc, #76]	; (8003dc0 <TIM_OC6_SetConfig+0xa0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC6_SetConfig+0x60>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a12      	ldr	r2, [pc, #72]	; (8003dc4 <TIM_OC6_SetConfig+0xa4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	029b      	lsls	r3, r3, #10
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	621a      	str	r2, [r3, #32]
}
 8003dae:	bf00      	nop
 8003db0:	371c      	adds	r7, #28
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	feff8fff 	.word	0xfeff8fff
 8003dc0:	40010000 	.word	0x40010000
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f023 0201 	bic.w	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 030a 	bic.w	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	f023 0210 	bic.w	r2, r3, #16
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b085      	sub	sp, #20
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f043 0307 	orr.w	r3, r3, #7
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	609a      	str	r2, [r3, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e040      	b.n	8003f90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f80c 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2224      	movs	r2, #36	; 0x24
 8003f28:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8c0 	bl	80040c0 <UART_SetConfig>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e022      	b.n	8003f90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fb16 	bl	8004584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb9d 	bl	80046c8 <UART_CheckIdleState>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	f040 8081 	bne.w	80040b4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_UART_Transmit+0x26>
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e079      	b.n	80040b6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Transmit+0x38>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e072      	b.n	80040b6 <HAL_UART_Transmit+0x11e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2221      	movs	r2, #33	; 0x21
 8003fe4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe6:	f7fd f947 	bl	8001278 <HAL_GetTick>
 8003fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004004:	d108      	bne.n	8004018 <HAL_UART_Transmit+0x80>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d104      	bne.n	8004018 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	e003      	b.n	8004020 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004028:	e02c      	b.n	8004084 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fb7a 	bl	800472e <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e038      	b.n	80040b6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	3302      	adds	r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e007      	b.n	8004072 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1cc      	bne.n	800402a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fb47 	bl	800472e <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e005      	b.n	80040b6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4ba7      	ldr	r3, [pc, #668]	; (8004388 <UART_SetConfig+0x2c8>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	6979      	ldr	r1, [r7, #20]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	430a      	orrs	r2, r1
 8004130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a95      	ldr	r2, [pc, #596]	; (800438c <UART_SetConfig+0x2cc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d120      	bne.n	800417e <UART_SetConfig+0xbe>
 800413c:	4b94      	ldr	r3, [pc, #592]	; (8004390 <UART_SetConfig+0x2d0>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b03      	cmp	r3, #3
 8004148:	d816      	bhi.n	8004178 <UART_SetConfig+0xb8>
 800414a:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <UART_SetConfig+0x90>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	08004161 	.word	0x08004161
 8004154:	0800416d 	.word	0x0800416d
 8004158:	08004167 	.word	0x08004167
 800415c:	08004173 	.word	0x08004173
 8004160:	2301      	movs	r3, #1
 8004162:	77fb      	strb	r3, [r7, #31]
 8004164:	e14f      	b.n	8004406 <UART_SetConfig+0x346>
 8004166:	2302      	movs	r3, #2
 8004168:	77fb      	strb	r3, [r7, #31]
 800416a:	e14c      	b.n	8004406 <UART_SetConfig+0x346>
 800416c:	2304      	movs	r3, #4
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e149      	b.n	8004406 <UART_SetConfig+0x346>
 8004172:	2308      	movs	r3, #8
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e146      	b.n	8004406 <UART_SetConfig+0x346>
 8004178:	2310      	movs	r3, #16
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e143      	b.n	8004406 <UART_SetConfig+0x346>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a84      	ldr	r2, [pc, #528]	; (8004394 <UART_SetConfig+0x2d4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d132      	bne.n	80041ee <UART_SetConfig+0x12e>
 8004188:	4b81      	ldr	r3, [pc, #516]	; (8004390 <UART_SetConfig+0x2d0>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b0c      	cmp	r3, #12
 8004194:	d828      	bhi.n	80041e8 <UART_SetConfig+0x128>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0xdc>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	080041e9 	.word	0x080041e9
 80041a4:	080041e9 	.word	0x080041e9
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041dd 	.word	0x080041dd
 80041b0:	080041e9 	.word	0x080041e9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041e9 	.word	0x080041e9
 80041bc:	080041d7 	.word	0x080041d7
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041e9 	.word	0x080041e9
 80041cc:	080041e3 	.word	0x080041e3
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e117      	b.n	8004406 <UART_SetConfig+0x346>
 80041d6:	2302      	movs	r3, #2
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e114      	b.n	8004406 <UART_SetConfig+0x346>
 80041dc:	2304      	movs	r3, #4
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e111      	b.n	8004406 <UART_SetConfig+0x346>
 80041e2:	2308      	movs	r3, #8
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e10e      	b.n	8004406 <UART_SetConfig+0x346>
 80041e8:	2310      	movs	r3, #16
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e10b      	b.n	8004406 <UART_SetConfig+0x346>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a69      	ldr	r2, [pc, #420]	; (8004398 <UART_SetConfig+0x2d8>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d120      	bne.n	800423a <UART_SetConfig+0x17a>
 80041f8:	4b65      	ldr	r3, [pc, #404]	; (8004390 <UART_SetConfig+0x2d0>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004202:	2b30      	cmp	r3, #48	; 0x30
 8004204:	d013      	beq.n	800422e <UART_SetConfig+0x16e>
 8004206:	2b30      	cmp	r3, #48	; 0x30
 8004208:	d814      	bhi.n	8004234 <UART_SetConfig+0x174>
 800420a:	2b20      	cmp	r3, #32
 800420c:	d009      	beq.n	8004222 <UART_SetConfig+0x162>
 800420e:	2b20      	cmp	r3, #32
 8004210:	d810      	bhi.n	8004234 <UART_SetConfig+0x174>
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <UART_SetConfig+0x15c>
 8004216:	2b10      	cmp	r3, #16
 8004218:	d006      	beq.n	8004228 <UART_SetConfig+0x168>
 800421a:	e00b      	b.n	8004234 <UART_SetConfig+0x174>
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e0f1      	b.n	8004406 <UART_SetConfig+0x346>
 8004222:	2302      	movs	r3, #2
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e0ee      	b.n	8004406 <UART_SetConfig+0x346>
 8004228:	2304      	movs	r3, #4
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e0eb      	b.n	8004406 <UART_SetConfig+0x346>
 800422e:	2308      	movs	r3, #8
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e0e8      	b.n	8004406 <UART_SetConfig+0x346>
 8004234:	2310      	movs	r3, #16
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e0e5      	b.n	8004406 <UART_SetConfig+0x346>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a57      	ldr	r2, [pc, #348]	; (800439c <UART_SetConfig+0x2dc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d120      	bne.n	8004286 <UART_SetConfig+0x1c6>
 8004244:	4b52      	ldr	r3, [pc, #328]	; (8004390 <UART_SetConfig+0x2d0>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800424e:	2bc0      	cmp	r3, #192	; 0xc0
 8004250:	d013      	beq.n	800427a <UART_SetConfig+0x1ba>
 8004252:	2bc0      	cmp	r3, #192	; 0xc0
 8004254:	d814      	bhi.n	8004280 <UART_SetConfig+0x1c0>
 8004256:	2b80      	cmp	r3, #128	; 0x80
 8004258:	d009      	beq.n	800426e <UART_SetConfig+0x1ae>
 800425a:	2b80      	cmp	r3, #128	; 0x80
 800425c:	d810      	bhi.n	8004280 <UART_SetConfig+0x1c0>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <UART_SetConfig+0x1a8>
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d006      	beq.n	8004274 <UART_SetConfig+0x1b4>
 8004266:	e00b      	b.n	8004280 <UART_SetConfig+0x1c0>
 8004268:	2300      	movs	r3, #0
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e0cb      	b.n	8004406 <UART_SetConfig+0x346>
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e0c8      	b.n	8004406 <UART_SetConfig+0x346>
 8004274:	2304      	movs	r3, #4
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e0c5      	b.n	8004406 <UART_SetConfig+0x346>
 800427a:	2308      	movs	r3, #8
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e0c2      	b.n	8004406 <UART_SetConfig+0x346>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e0bf      	b.n	8004406 <UART_SetConfig+0x346>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a45      	ldr	r2, [pc, #276]	; (80043a0 <UART_SetConfig+0x2e0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d125      	bne.n	80042dc <UART_SetConfig+0x21c>
 8004290:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <UART_SetConfig+0x2d0>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800429e:	d017      	beq.n	80042d0 <UART_SetConfig+0x210>
 80042a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a4:	d817      	bhi.n	80042d6 <UART_SetConfig+0x216>
 80042a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042aa:	d00b      	beq.n	80042c4 <UART_SetConfig+0x204>
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b0:	d811      	bhi.n	80042d6 <UART_SetConfig+0x216>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <UART_SetConfig+0x1fe>
 80042b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ba:	d006      	beq.n	80042ca <UART_SetConfig+0x20a>
 80042bc:	e00b      	b.n	80042d6 <UART_SetConfig+0x216>
 80042be:	2300      	movs	r3, #0
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e0a0      	b.n	8004406 <UART_SetConfig+0x346>
 80042c4:	2302      	movs	r3, #2
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e09d      	b.n	8004406 <UART_SetConfig+0x346>
 80042ca:	2304      	movs	r3, #4
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e09a      	b.n	8004406 <UART_SetConfig+0x346>
 80042d0:	2308      	movs	r3, #8
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e097      	b.n	8004406 <UART_SetConfig+0x346>
 80042d6:	2310      	movs	r3, #16
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e094      	b.n	8004406 <UART_SetConfig+0x346>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a30      	ldr	r2, [pc, #192]	; (80043a4 <UART_SetConfig+0x2e4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d125      	bne.n	8004332 <UART_SetConfig+0x272>
 80042e6:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <UART_SetConfig+0x2d0>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f4:	d017      	beq.n	8004326 <UART_SetConfig+0x266>
 80042f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042fa:	d817      	bhi.n	800432c <UART_SetConfig+0x26c>
 80042fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004300:	d00b      	beq.n	800431a <UART_SetConfig+0x25a>
 8004302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004306:	d811      	bhi.n	800432c <UART_SetConfig+0x26c>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <UART_SetConfig+0x254>
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d006      	beq.n	8004320 <UART_SetConfig+0x260>
 8004312:	e00b      	b.n	800432c <UART_SetConfig+0x26c>
 8004314:	2301      	movs	r3, #1
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e075      	b.n	8004406 <UART_SetConfig+0x346>
 800431a:	2302      	movs	r3, #2
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e072      	b.n	8004406 <UART_SetConfig+0x346>
 8004320:	2304      	movs	r3, #4
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e06f      	b.n	8004406 <UART_SetConfig+0x346>
 8004326:	2308      	movs	r3, #8
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e06c      	b.n	8004406 <UART_SetConfig+0x346>
 800432c:	2310      	movs	r3, #16
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e069      	b.n	8004406 <UART_SetConfig+0x346>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1c      	ldr	r2, [pc, #112]	; (80043a8 <UART_SetConfig+0x2e8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d137      	bne.n	80043ac <UART_SetConfig+0x2ec>
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <UART_SetConfig+0x2d0>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800434a:	d017      	beq.n	800437c <UART_SetConfig+0x2bc>
 800434c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004350:	d817      	bhi.n	8004382 <UART_SetConfig+0x2c2>
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	d00b      	beq.n	8004370 <UART_SetConfig+0x2b0>
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435c:	d811      	bhi.n	8004382 <UART_SetConfig+0x2c2>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <UART_SetConfig+0x2aa>
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d006      	beq.n	8004376 <UART_SetConfig+0x2b6>
 8004368:	e00b      	b.n	8004382 <UART_SetConfig+0x2c2>
 800436a:	2300      	movs	r3, #0
 800436c:	77fb      	strb	r3, [r7, #31]
 800436e:	e04a      	b.n	8004406 <UART_SetConfig+0x346>
 8004370:	2302      	movs	r3, #2
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e047      	b.n	8004406 <UART_SetConfig+0x346>
 8004376:	2304      	movs	r3, #4
 8004378:	77fb      	strb	r3, [r7, #31]
 800437a:	e044      	b.n	8004406 <UART_SetConfig+0x346>
 800437c:	2308      	movs	r3, #8
 800437e:	77fb      	strb	r3, [r7, #31]
 8004380:	e041      	b.n	8004406 <UART_SetConfig+0x346>
 8004382:	2310      	movs	r3, #16
 8004384:	77fb      	strb	r3, [r7, #31]
 8004386:	e03e      	b.n	8004406 <UART_SetConfig+0x346>
 8004388:	efff69f3 	.word	0xefff69f3
 800438c:	40011000 	.word	0x40011000
 8004390:	40023800 	.word	0x40023800
 8004394:	40004400 	.word	0x40004400
 8004398:	40004800 	.word	0x40004800
 800439c:	40004c00 	.word	0x40004c00
 80043a0:	40005000 	.word	0x40005000
 80043a4:	40011400 	.word	0x40011400
 80043a8:	40007800 	.word	0x40007800
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a71      	ldr	r2, [pc, #452]	; (8004578 <UART_SetConfig+0x4b8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d125      	bne.n	8004402 <UART_SetConfig+0x342>
 80043b6:	4b71      	ldr	r3, [pc, #452]	; (800457c <UART_SetConfig+0x4bc>)
 80043b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043c4:	d017      	beq.n	80043f6 <UART_SetConfig+0x336>
 80043c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043ca:	d817      	bhi.n	80043fc <UART_SetConfig+0x33c>
 80043cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d0:	d00b      	beq.n	80043ea <UART_SetConfig+0x32a>
 80043d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d6:	d811      	bhi.n	80043fc <UART_SetConfig+0x33c>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x324>
 80043dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e0:	d006      	beq.n	80043f0 <UART_SetConfig+0x330>
 80043e2:	e00b      	b.n	80043fc <UART_SetConfig+0x33c>
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e00d      	b.n	8004406 <UART_SetConfig+0x346>
 80043ea:	2302      	movs	r3, #2
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e00a      	b.n	8004406 <UART_SetConfig+0x346>
 80043f0:	2304      	movs	r3, #4
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e007      	b.n	8004406 <UART_SetConfig+0x346>
 80043f6:	2308      	movs	r3, #8
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e004      	b.n	8004406 <UART_SetConfig+0x346>
 80043fc:	2310      	movs	r3, #16
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e001      	b.n	8004406 <UART_SetConfig+0x346>
 8004402:	2310      	movs	r3, #16
 8004404:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800440e:	d15b      	bne.n	80044c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004410:	7ffb      	ldrb	r3, [r7, #31]
 8004412:	2b08      	cmp	r3, #8
 8004414:	d827      	bhi.n	8004466 <UART_SetConfig+0x3a6>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <UART_SetConfig+0x35c>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004441 	.word	0x08004441
 8004420:	08004449 	.word	0x08004449
 8004424:	08004451 	.word	0x08004451
 8004428:	08004467 	.word	0x08004467
 800442c:	08004457 	.word	0x08004457
 8004430:	08004467 	.word	0x08004467
 8004434:	08004467 	.word	0x08004467
 8004438:	08004467 	.word	0x08004467
 800443c:	0800445f 	.word	0x0800445f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004440:	f7fd fe38 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8004444:	61b8      	str	r0, [r7, #24]
        break;
 8004446:	e013      	b.n	8004470 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004448:	f7fd fe48 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 800444c:	61b8      	str	r0, [r7, #24]
        break;
 800444e:	e00f      	b.n	8004470 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004450:	4b4b      	ldr	r3, [pc, #300]	; (8004580 <UART_SetConfig+0x4c0>)
 8004452:	61bb      	str	r3, [r7, #24]
        break;
 8004454:	e00c      	b.n	8004470 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004456:	f7fd fd6b 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 800445a:	61b8      	str	r0, [r7, #24]
        break;
 800445c:	e008      	b.n	8004470 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004462:	61bb      	str	r3, [r7, #24]
        break;
 8004464:	e004      	b.n	8004470 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	77bb      	strb	r3, [r7, #30]
        break;
 800446e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d074      	beq.n	8004560 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	005a      	lsls	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b0f      	cmp	r3, #15
 8004492:	d916      	bls.n	80044c2 <UART_SetConfig+0x402>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d212      	bcs.n	80044c2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f023 030f 	bic.w	r3, r3, #15
 80044a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	89fb      	ldrh	r3, [r7, #14]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	89fa      	ldrh	r2, [r7, #14]
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e04e      	b.n	8004560 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	77bb      	strb	r3, [r7, #30]
 80044c6:	e04b      	b.n	8004560 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d827      	bhi.n	800451e <UART_SetConfig+0x45e>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x414>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004509 	.word	0x08004509
 80044e0:	0800451f 	.word	0x0800451f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fd fddc 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61b8      	str	r0, [r7, #24]
        break;
 80044fe:	e013      	b.n	8004528 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fd fdec 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8004504:	61b8      	str	r0, [r7, #24]
        break;
 8004506:	e00f      	b.n	8004528 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <UART_SetConfig+0x4c0>)
 800450a:	61bb      	str	r3, [r7, #24]
        break;
 800450c:	e00c      	b.n	8004528 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fd fd0f 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8004512:	61b8      	str	r0, [r7, #24]
        break;
 8004514:	e008      	b.n	8004528 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451a:	61bb      	str	r3, [r7, #24]
        break;
 800451c:	e004      	b.n	8004528 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	77bb      	strb	r3, [r7, #30]
        break;
 8004526:	bf00      	nop
    }

    if (pclk != 0U)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d018      	beq.n	8004560 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	085a      	lsrs	r2, r3, #1
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	441a      	add	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	b29b      	uxth	r3, r3
 8004542:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d908      	bls.n	800455c <UART_SetConfig+0x49c>
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d204      	bcs.n	800455c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	60da      	str	r2, [r3, #12]
 800455a:	e001      	b.n	8004560 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800456c:	7fbb      	ldrb	r3, [r7, #30]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40007c00 	.word	0x40007c00
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400

08004584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004682:	d10a      	bne.n	800469a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046d8:	f7fc fdce 	bl	8001278 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d10e      	bne.n	800470a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f817 	bl	800472e <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e00d      	b.n	8004726 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	60f8      	str	r0, [r7, #12]
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800473e:	e05e      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d05a      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7fc fd96 	bl	8001278 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <UART_WaitOnFlagUntilTimeout+0x30>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d11b      	bne.n	8004796 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800476c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e043      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02c      	beq.n	80047fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d124      	bne.n	80047fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e00f      	b.n	800481e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	429a      	cmp	r2, r3
 800481a:	d091      	beq.n	8004740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <__errno>:
 8004828:	4b01      	ldr	r3, [pc, #4]	; (8004830 <__errno+0x8>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	2000000c 	.word	0x2000000c

08004834 <__libc_init_array>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4d0d      	ldr	r5, [pc, #52]	; (800486c <__libc_init_array+0x38>)
 8004838:	4c0d      	ldr	r4, [pc, #52]	; (8004870 <__libc_init_array+0x3c>)
 800483a:	1b64      	subs	r4, r4, r5
 800483c:	10a4      	asrs	r4, r4, #2
 800483e:	2600      	movs	r6, #0
 8004840:	42a6      	cmp	r6, r4
 8004842:	d109      	bne.n	8004858 <__libc_init_array+0x24>
 8004844:	4d0b      	ldr	r5, [pc, #44]	; (8004874 <__libc_init_array+0x40>)
 8004846:	4c0c      	ldr	r4, [pc, #48]	; (8004878 <__libc_init_array+0x44>)
 8004848:	f000 ffec 	bl	8005824 <_init>
 800484c:	1b64      	subs	r4, r4, r5
 800484e:	10a4      	asrs	r4, r4, #2
 8004850:	2600      	movs	r6, #0
 8004852:	42a6      	cmp	r6, r4
 8004854:	d105      	bne.n	8004862 <__libc_init_array+0x2e>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	f855 3b04 	ldr.w	r3, [r5], #4
 800485c:	4798      	blx	r3
 800485e:	3601      	adds	r6, #1
 8004860:	e7ee      	b.n	8004840 <__libc_init_array+0xc>
 8004862:	f855 3b04 	ldr.w	r3, [r5], #4
 8004866:	4798      	blx	r3
 8004868:	3601      	adds	r6, #1
 800486a:	e7f2      	b.n	8004852 <__libc_init_array+0x1e>
 800486c:	08005934 	.word	0x08005934
 8004870:	08005934 	.word	0x08005934
 8004874:	08005934 	.word	0x08005934
 8004878:	08005938 	.word	0x08005938

0800487c <memset>:
 800487c:	4402      	add	r2, r0
 800487e:	4603      	mov	r3, r0
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <memset+0xa>
 8004884:	4770      	bx	lr
 8004886:	f803 1b01 	strb.w	r1, [r3], #1
 800488a:	e7f9      	b.n	8004880 <memset+0x4>

0800488c <iprintf>:
 800488c:	b40f      	push	{r0, r1, r2, r3}
 800488e:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <iprintf+0x2c>)
 8004890:	b513      	push	{r0, r1, r4, lr}
 8004892:	681c      	ldr	r4, [r3, #0]
 8004894:	b124      	cbz	r4, 80048a0 <iprintf+0x14>
 8004896:	69a3      	ldr	r3, [r4, #24]
 8004898:	b913      	cbnz	r3, 80048a0 <iprintf+0x14>
 800489a:	4620      	mov	r0, r4
 800489c:	f000 fa5e 	bl	8004d5c <__sinit>
 80048a0:	ab05      	add	r3, sp, #20
 80048a2:	9a04      	ldr	r2, [sp, #16]
 80048a4:	68a1      	ldr	r1, [r4, #8]
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fc2f 	bl	800510c <_vfiprintf_r>
 80048ae:	b002      	add	sp, #8
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	b004      	add	sp, #16
 80048b6:	4770      	bx	lr
 80048b8:	2000000c 	.word	0x2000000c

080048bc <_puts_r>:
 80048bc:	b570      	push	{r4, r5, r6, lr}
 80048be:	460e      	mov	r6, r1
 80048c0:	4605      	mov	r5, r0
 80048c2:	b118      	cbz	r0, 80048cc <_puts_r+0x10>
 80048c4:	6983      	ldr	r3, [r0, #24]
 80048c6:	b90b      	cbnz	r3, 80048cc <_puts_r+0x10>
 80048c8:	f000 fa48 	bl	8004d5c <__sinit>
 80048cc:	69ab      	ldr	r3, [r5, #24]
 80048ce:	68ac      	ldr	r4, [r5, #8]
 80048d0:	b913      	cbnz	r3, 80048d8 <_puts_r+0x1c>
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 fa42 	bl	8004d5c <__sinit>
 80048d8:	4b2c      	ldr	r3, [pc, #176]	; (800498c <_puts_r+0xd0>)
 80048da:	429c      	cmp	r4, r3
 80048dc:	d120      	bne.n	8004920 <_puts_r+0x64>
 80048de:	686c      	ldr	r4, [r5, #4]
 80048e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e2:	07db      	lsls	r3, r3, #31
 80048e4:	d405      	bmi.n	80048f2 <_puts_r+0x36>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	0598      	lsls	r0, r3, #22
 80048ea:	d402      	bmi.n	80048f2 <_puts_r+0x36>
 80048ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ee:	f000 fad3 	bl	8004e98 <__retarget_lock_acquire_recursive>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	0719      	lsls	r1, r3, #28
 80048f6:	d51d      	bpl.n	8004934 <_puts_r+0x78>
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	b1db      	cbz	r3, 8004934 <_puts_r+0x78>
 80048fc:	3e01      	subs	r6, #1
 80048fe:	68a3      	ldr	r3, [r4, #8]
 8004900:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004904:	3b01      	subs	r3, #1
 8004906:	60a3      	str	r3, [r4, #8]
 8004908:	bb39      	cbnz	r1, 800495a <_puts_r+0x9e>
 800490a:	2b00      	cmp	r3, #0
 800490c:	da38      	bge.n	8004980 <_puts_r+0xc4>
 800490e:	4622      	mov	r2, r4
 8004910:	210a      	movs	r1, #10
 8004912:	4628      	mov	r0, r5
 8004914:	f000 f848 	bl	80049a8 <__swbuf_r>
 8004918:	3001      	adds	r0, #1
 800491a:	d011      	beq.n	8004940 <_puts_r+0x84>
 800491c:	250a      	movs	r5, #10
 800491e:	e011      	b.n	8004944 <_puts_r+0x88>
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <_puts_r+0xd4>)
 8004922:	429c      	cmp	r4, r3
 8004924:	d101      	bne.n	800492a <_puts_r+0x6e>
 8004926:	68ac      	ldr	r4, [r5, #8]
 8004928:	e7da      	b.n	80048e0 <_puts_r+0x24>
 800492a:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <_puts_r+0xd8>)
 800492c:	429c      	cmp	r4, r3
 800492e:	bf08      	it	eq
 8004930:	68ec      	ldreq	r4, [r5, #12]
 8004932:	e7d5      	b.n	80048e0 <_puts_r+0x24>
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f888 	bl	8004a4c <__swsetup_r>
 800493c:	2800      	cmp	r0, #0
 800493e:	d0dd      	beq.n	80048fc <_puts_r+0x40>
 8004940:	f04f 35ff 	mov.w	r5, #4294967295
 8004944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004946:	07da      	lsls	r2, r3, #31
 8004948:	d405      	bmi.n	8004956 <_puts_r+0x9a>
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	059b      	lsls	r3, r3, #22
 800494e:	d402      	bmi.n	8004956 <_puts_r+0x9a>
 8004950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004952:	f000 faa2 	bl	8004e9a <__retarget_lock_release_recursive>
 8004956:	4628      	mov	r0, r5
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	2b00      	cmp	r3, #0
 800495c:	da04      	bge.n	8004968 <_puts_r+0xac>
 800495e:	69a2      	ldr	r2, [r4, #24]
 8004960:	429a      	cmp	r2, r3
 8004962:	dc06      	bgt.n	8004972 <_puts_r+0xb6>
 8004964:	290a      	cmp	r1, #10
 8004966:	d004      	beq.n	8004972 <_puts_r+0xb6>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	7019      	strb	r1, [r3, #0]
 8004970:	e7c5      	b.n	80048fe <_puts_r+0x42>
 8004972:	4622      	mov	r2, r4
 8004974:	4628      	mov	r0, r5
 8004976:	f000 f817 	bl	80049a8 <__swbuf_r>
 800497a:	3001      	adds	r0, #1
 800497c:	d1bf      	bne.n	80048fe <_puts_r+0x42>
 800497e:	e7df      	b.n	8004940 <_puts_r+0x84>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	250a      	movs	r5, #10
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	6022      	str	r2, [r4, #0]
 8004988:	701d      	strb	r5, [r3, #0]
 800498a:	e7db      	b.n	8004944 <_puts_r+0x88>
 800498c:	080058b8 	.word	0x080058b8
 8004990:	080058d8 	.word	0x080058d8
 8004994:	08005898 	.word	0x08005898

08004998 <puts>:
 8004998:	4b02      	ldr	r3, [pc, #8]	; (80049a4 <puts+0xc>)
 800499a:	4601      	mov	r1, r0
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	f7ff bf8d 	b.w	80048bc <_puts_r>
 80049a2:	bf00      	nop
 80049a4:	2000000c 	.word	0x2000000c

080049a8 <__swbuf_r>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	460e      	mov	r6, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	4605      	mov	r5, r0
 80049b0:	b118      	cbz	r0, 80049ba <__swbuf_r+0x12>
 80049b2:	6983      	ldr	r3, [r0, #24]
 80049b4:	b90b      	cbnz	r3, 80049ba <__swbuf_r+0x12>
 80049b6:	f000 f9d1 	bl	8004d5c <__sinit>
 80049ba:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <__swbuf_r+0x98>)
 80049bc:	429c      	cmp	r4, r3
 80049be:	d12b      	bne.n	8004a18 <__swbuf_r+0x70>
 80049c0:	686c      	ldr	r4, [r5, #4]
 80049c2:	69a3      	ldr	r3, [r4, #24]
 80049c4:	60a3      	str	r3, [r4, #8]
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	071a      	lsls	r2, r3, #28
 80049ca:	d52f      	bpl.n	8004a2c <__swbuf_r+0x84>
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	b36b      	cbz	r3, 8004a2c <__swbuf_r+0x84>
 80049d0:	6923      	ldr	r3, [r4, #16]
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	6963      	ldr	r3, [r4, #20]
 80049d8:	b2f6      	uxtb	r6, r6
 80049da:	4283      	cmp	r3, r0
 80049dc:	4637      	mov	r7, r6
 80049de:	dc04      	bgt.n	80049ea <__swbuf_r+0x42>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f926 	bl	8004c34 <_fflush_r>
 80049e8:	bb30      	cbnz	r0, 8004a38 <__swbuf_r+0x90>
 80049ea:	68a3      	ldr	r3, [r4, #8]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	6022      	str	r2, [r4, #0]
 80049f6:	701e      	strb	r6, [r3, #0]
 80049f8:	6963      	ldr	r3, [r4, #20]
 80049fa:	3001      	adds	r0, #1
 80049fc:	4283      	cmp	r3, r0
 80049fe:	d004      	beq.n	8004a0a <__swbuf_r+0x62>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	07db      	lsls	r3, r3, #31
 8004a04:	d506      	bpl.n	8004a14 <__swbuf_r+0x6c>
 8004a06:	2e0a      	cmp	r6, #10
 8004a08:	d104      	bne.n	8004a14 <__swbuf_r+0x6c>
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 f911 	bl	8004c34 <_fflush_r>
 8004a12:	b988      	cbnz	r0, 8004a38 <__swbuf_r+0x90>
 8004a14:	4638      	mov	r0, r7
 8004a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a18:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <__swbuf_r+0x9c>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	d101      	bne.n	8004a22 <__swbuf_r+0x7a>
 8004a1e:	68ac      	ldr	r4, [r5, #8]
 8004a20:	e7cf      	b.n	80049c2 <__swbuf_r+0x1a>
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <__swbuf_r+0xa0>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	bf08      	it	eq
 8004a28:	68ec      	ldreq	r4, [r5, #12]
 8004a2a:	e7ca      	b.n	80049c2 <__swbuf_r+0x1a>
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f80c 	bl	8004a4c <__swsetup_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d0cb      	beq.n	80049d0 <__swbuf_r+0x28>
 8004a38:	f04f 37ff 	mov.w	r7, #4294967295
 8004a3c:	e7ea      	b.n	8004a14 <__swbuf_r+0x6c>
 8004a3e:	bf00      	nop
 8004a40:	080058b8 	.word	0x080058b8
 8004a44:	080058d8 	.word	0x080058d8
 8004a48:	08005898 	.word	0x08005898

08004a4c <__swsetup_r>:
 8004a4c:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <__swsetup_r+0xcc>)
 8004a4e:	b570      	push	{r4, r5, r6, lr}
 8004a50:	681d      	ldr	r5, [r3, #0]
 8004a52:	4606      	mov	r6, r0
 8004a54:	460c      	mov	r4, r1
 8004a56:	b125      	cbz	r5, 8004a62 <__swsetup_r+0x16>
 8004a58:	69ab      	ldr	r3, [r5, #24]
 8004a5a:	b913      	cbnz	r3, 8004a62 <__swsetup_r+0x16>
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f97d 	bl	8004d5c <__sinit>
 8004a62:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <__swsetup_r+0xd0>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	d10f      	bne.n	8004a88 <__swsetup_r+0x3c>
 8004a68:	686c      	ldr	r4, [r5, #4]
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a70:	0719      	lsls	r1, r3, #28
 8004a72:	d42c      	bmi.n	8004ace <__swsetup_r+0x82>
 8004a74:	06dd      	lsls	r5, r3, #27
 8004a76:	d411      	bmi.n	8004a9c <__swsetup_r+0x50>
 8004a78:	2309      	movs	r3, #9
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	e03e      	b.n	8004b06 <__swsetup_r+0xba>
 8004a88:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <__swsetup_r+0xd4>)
 8004a8a:	429c      	cmp	r4, r3
 8004a8c:	d101      	bne.n	8004a92 <__swsetup_r+0x46>
 8004a8e:	68ac      	ldr	r4, [r5, #8]
 8004a90:	e7eb      	b.n	8004a6a <__swsetup_r+0x1e>
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <__swsetup_r+0xd8>)
 8004a94:	429c      	cmp	r4, r3
 8004a96:	bf08      	it	eq
 8004a98:	68ec      	ldreq	r4, [r5, #12]
 8004a9a:	e7e6      	b.n	8004a6a <__swsetup_r+0x1e>
 8004a9c:	0758      	lsls	r0, r3, #29
 8004a9e:	d512      	bpl.n	8004ac6 <__swsetup_r+0x7a>
 8004aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa2:	b141      	cbz	r1, 8004ab6 <__swsetup_r+0x6a>
 8004aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	d002      	beq.n	8004ab2 <__swsetup_r+0x66>
 8004aac:	4630      	mov	r0, r6
 8004aae:	f000 fa59 	bl	8004f64 <_free_r>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	b94b      	cbnz	r3, 8004ae6 <__swsetup_r+0x9a>
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d003      	beq.n	8004ae6 <__swsetup_r+0x9a>
 8004ade:	4621      	mov	r1, r4
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f000 f9ff 	bl	8004ee4 <__smakebuf_r>
 8004ae6:	89a0      	ldrh	r0, [r4, #12]
 8004ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004aec:	f010 0301 	ands.w	r3, r0, #1
 8004af0:	d00a      	beq.n	8004b08 <__swsetup_r+0xbc>
 8004af2:	2300      	movs	r3, #0
 8004af4:	60a3      	str	r3, [r4, #8]
 8004af6:	6963      	ldr	r3, [r4, #20]
 8004af8:	425b      	negs	r3, r3
 8004afa:	61a3      	str	r3, [r4, #24]
 8004afc:	6923      	ldr	r3, [r4, #16]
 8004afe:	b943      	cbnz	r3, 8004b12 <__swsetup_r+0xc6>
 8004b00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b04:	d1ba      	bne.n	8004a7c <__swsetup_r+0x30>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	0781      	lsls	r1, r0, #30
 8004b0a:	bf58      	it	pl
 8004b0c:	6963      	ldrpl	r3, [r4, #20]
 8004b0e:	60a3      	str	r3, [r4, #8]
 8004b10:	e7f4      	b.n	8004afc <__swsetup_r+0xb0>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e7f7      	b.n	8004b06 <__swsetup_r+0xba>
 8004b16:	bf00      	nop
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	080058b8 	.word	0x080058b8
 8004b20:	080058d8 	.word	0x080058d8
 8004b24:	08005898 	.word	0x08005898

08004b28 <__sflush_r>:
 8004b28:	898a      	ldrh	r2, [r1, #12]
 8004b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2e:	4605      	mov	r5, r0
 8004b30:	0710      	lsls	r0, r2, #28
 8004b32:	460c      	mov	r4, r1
 8004b34:	d458      	bmi.n	8004be8 <__sflush_r+0xc0>
 8004b36:	684b      	ldr	r3, [r1, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	dc05      	bgt.n	8004b48 <__sflush_r+0x20>
 8004b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dc02      	bgt.n	8004b48 <__sflush_r+0x20>
 8004b42:	2000      	movs	r0, #0
 8004b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b4a:	2e00      	cmp	r6, #0
 8004b4c:	d0f9      	beq.n	8004b42 <__sflush_r+0x1a>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b54:	682f      	ldr	r7, [r5, #0]
 8004b56:	602b      	str	r3, [r5, #0]
 8004b58:	d032      	beq.n	8004bc0 <__sflush_r+0x98>
 8004b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	075a      	lsls	r2, r3, #29
 8004b60:	d505      	bpl.n	8004b6e <__sflush_r+0x46>
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	1ac0      	subs	r0, r0, r3
 8004b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b68:	b10b      	cbz	r3, 8004b6e <__sflush_r+0x46>
 8004b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b6c:	1ac0      	subs	r0, r0, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4602      	mov	r2, r0
 8004b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b74:	6a21      	ldr	r1, [r4, #32]
 8004b76:	4628      	mov	r0, r5
 8004b78:	47b0      	blx	r6
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	d106      	bne.n	8004b8e <__sflush_r+0x66>
 8004b80:	6829      	ldr	r1, [r5, #0]
 8004b82:	291d      	cmp	r1, #29
 8004b84:	d82c      	bhi.n	8004be0 <__sflush_r+0xb8>
 8004b86:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <__sflush_r+0x108>)
 8004b88:	40ca      	lsrs	r2, r1
 8004b8a:	07d6      	lsls	r6, r2, #31
 8004b8c:	d528      	bpl.n	8004be0 <__sflush_r+0xb8>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	6062      	str	r2, [r4, #4]
 8004b92:	04d9      	lsls	r1, r3, #19
 8004b94:	6922      	ldr	r2, [r4, #16]
 8004b96:	6022      	str	r2, [r4, #0]
 8004b98:	d504      	bpl.n	8004ba4 <__sflush_r+0x7c>
 8004b9a:	1c42      	adds	r2, r0, #1
 8004b9c:	d101      	bne.n	8004ba2 <__sflush_r+0x7a>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	b903      	cbnz	r3, 8004ba4 <__sflush_r+0x7c>
 8004ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8004ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ba6:	602f      	str	r7, [r5, #0]
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d0ca      	beq.n	8004b42 <__sflush_r+0x1a>
 8004bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	d002      	beq.n	8004bba <__sflush_r+0x92>
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f9d5 	bl	8004f64 <_free_r>
 8004bba:	2000      	movs	r0, #0
 8004bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8004bbe:	e7c1      	b.n	8004b44 <__sflush_r+0x1c>
 8004bc0:	6a21      	ldr	r1, [r4, #32]
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b0      	blx	r6
 8004bc8:	1c41      	adds	r1, r0, #1
 8004bca:	d1c7      	bne.n	8004b5c <__sflush_r+0x34>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0c4      	beq.n	8004b5c <__sflush_r+0x34>
 8004bd2:	2b1d      	cmp	r3, #29
 8004bd4:	d001      	beq.n	8004bda <__sflush_r+0xb2>
 8004bd6:	2b16      	cmp	r3, #22
 8004bd8:	d101      	bne.n	8004bde <__sflush_r+0xb6>
 8004bda:	602f      	str	r7, [r5, #0]
 8004bdc:	e7b1      	b.n	8004b42 <__sflush_r+0x1a>
 8004bde:	89a3      	ldrh	r3, [r4, #12]
 8004be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	e7ad      	b.n	8004b44 <__sflush_r+0x1c>
 8004be8:	690f      	ldr	r7, [r1, #16]
 8004bea:	2f00      	cmp	r7, #0
 8004bec:	d0a9      	beq.n	8004b42 <__sflush_r+0x1a>
 8004bee:	0793      	lsls	r3, r2, #30
 8004bf0:	680e      	ldr	r6, [r1, #0]
 8004bf2:	bf08      	it	eq
 8004bf4:	694b      	ldreq	r3, [r1, #20]
 8004bf6:	600f      	str	r7, [r1, #0]
 8004bf8:	bf18      	it	ne
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	eba6 0807 	sub.w	r8, r6, r7
 8004c00:	608b      	str	r3, [r1, #8]
 8004c02:	f1b8 0f00 	cmp.w	r8, #0
 8004c06:	dd9c      	ble.n	8004b42 <__sflush_r+0x1a>
 8004c08:	6a21      	ldr	r1, [r4, #32]
 8004c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	463a      	mov	r2, r7
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b0      	blx	r6
 8004c14:	2800      	cmp	r0, #0
 8004c16:	dc06      	bgt.n	8004c26 <__sflush_r+0xfe>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	e78e      	b.n	8004b44 <__sflush_r+0x1c>
 8004c26:	4407      	add	r7, r0
 8004c28:	eba8 0800 	sub.w	r8, r8, r0
 8004c2c:	e7e9      	b.n	8004c02 <__sflush_r+0xda>
 8004c2e:	bf00      	nop
 8004c30:	20400001 	.word	0x20400001

08004c34 <_fflush_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	690b      	ldr	r3, [r1, #16]
 8004c38:	4605      	mov	r5, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	b913      	cbnz	r3, 8004c44 <_fflush_r+0x10>
 8004c3e:	2500      	movs	r5, #0
 8004c40:	4628      	mov	r0, r5
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	b118      	cbz	r0, 8004c4e <_fflush_r+0x1a>
 8004c46:	6983      	ldr	r3, [r0, #24]
 8004c48:	b90b      	cbnz	r3, 8004c4e <_fflush_r+0x1a>
 8004c4a:	f000 f887 	bl	8004d5c <__sinit>
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <_fflush_r+0x6c>)
 8004c50:	429c      	cmp	r4, r3
 8004c52:	d11b      	bne.n	8004c8c <_fflush_r+0x58>
 8004c54:	686c      	ldr	r4, [r5, #4]
 8004c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ef      	beq.n	8004c3e <_fflush_r+0xa>
 8004c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c60:	07d0      	lsls	r0, r2, #31
 8004c62:	d404      	bmi.n	8004c6e <_fflush_r+0x3a>
 8004c64:	0599      	lsls	r1, r3, #22
 8004c66:	d402      	bmi.n	8004c6e <_fflush_r+0x3a>
 8004c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c6a:	f000 f915 	bl	8004e98 <__retarget_lock_acquire_recursive>
 8004c6e:	4628      	mov	r0, r5
 8004c70:	4621      	mov	r1, r4
 8004c72:	f7ff ff59 	bl	8004b28 <__sflush_r>
 8004c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c78:	07da      	lsls	r2, r3, #31
 8004c7a:	4605      	mov	r5, r0
 8004c7c:	d4e0      	bmi.n	8004c40 <_fflush_r+0xc>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	059b      	lsls	r3, r3, #22
 8004c82:	d4dd      	bmi.n	8004c40 <_fflush_r+0xc>
 8004c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c86:	f000 f908 	bl	8004e9a <__retarget_lock_release_recursive>
 8004c8a:	e7d9      	b.n	8004c40 <_fflush_r+0xc>
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <_fflush_r+0x70>)
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d101      	bne.n	8004c96 <_fflush_r+0x62>
 8004c92:	68ac      	ldr	r4, [r5, #8]
 8004c94:	e7df      	b.n	8004c56 <_fflush_r+0x22>
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <_fflush_r+0x74>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	bf08      	it	eq
 8004c9c:	68ec      	ldreq	r4, [r5, #12]
 8004c9e:	e7da      	b.n	8004c56 <_fflush_r+0x22>
 8004ca0:	080058b8 	.word	0x080058b8
 8004ca4:	080058d8 	.word	0x080058d8
 8004ca8:	08005898 	.word	0x08005898

08004cac <std>:
 8004cac:	2300      	movs	r3, #0
 8004cae:	b510      	push	{r4, lr}
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004cb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cba:	6083      	str	r3, [r0, #8]
 8004cbc:	8181      	strh	r1, [r0, #12]
 8004cbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004cc0:	81c2      	strh	r2, [r0, #14]
 8004cc2:	6183      	str	r3, [r0, #24]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	305c      	adds	r0, #92	; 0x5c
 8004cca:	f7ff fdd7 	bl	800487c <memset>
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <std+0x38>)
 8004cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <std+0x3c>)
 8004cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <std+0x40>)
 8004cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <std+0x44>)
 8004cdc:	6224      	str	r4, [r4, #32]
 8004cde:	6323      	str	r3, [r4, #48]	; 0x30
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	bf00      	nop
 8004ce4:	080056b5 	.word	0x080056b5
 8004ce8:	080056d7 	.word	0x080056d7
 8004cec:	0800570f 	.word	0x0800570f
 8004cf0:	08005733 	.word	0x08005733

08004cf4 <_cleanup_r>:
 8004cf4:	4901      	ldr	r1, [pc, #4]	; (8004cfc <_cleanup_r+0x8>)
 8004cf6:	f000 b8af 	b.w	8004e58 <_fwalk_reent>
 8004cfa:	bf00      	nop
 8004cfc:	08004c35 	.word	0x08004c35

08004d00 <__sfmoreglue>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	1e4a      	subs	r2, r1, #1
 8004d04:	2568      	movs	r5, #104	; 0x68
 8004d06:	4355      	muls	r5, r2
 8004d08:	460e      	mov	r6, r1
 8004d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d0e:	f000 f979 	bl	8005004 <_malloc_r>
 8004d12:	4604      	mov	r4, r0
 8004d14:	b140      	cbz	r0, 8004d28 <__sfmoreglue+0x28>
 8004d16:	2100      	movs	r1, #0
 8004d18:	e9c0 1600 	strd	r1, r6, [r0]
 8004d1c:	300c      	adds	r0, #12
 8004d1e:	60a0      	str	r0, [r4, #8]
 8004d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d24:	f7ff fdaa 	bl	800487c <memset>
 8004d28:	4620      	mov	r0, r4
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}

08004d2c <__sfp_lock_acquire>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	; (8004d34 <__sfp_lock_acquire+0x8>)
 8004d2e:	f000 b8b3 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 8004d32:	bf00      	nop
 8004d34:	200001d8 	.word	0x200001d8

08004d38 <__sfp_lock_release>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__sfp_lock_release+0x8>)
 8004d3a:	f000 b8ae 	b.w	8004e9a <__retarget_lock_release_recursive>
 8004d3e:	bf00      	nop
 8004d40:	200001d8 	.word	0x200001d8

08004d44 <__sinit_lock_acquire>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__sinit_lock_acquire+0x8>)
 8004d46:	f000 b8a7 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	200001d3 	.word	0x200001d3

08004d50 <__sinit_lock_release>:
 8004d50:	4801      	ldr	r0, [pc, #4]	; (8004d58 <__sinit_lock_release+0x8>)
 8004d52:	f000 b8a2 	b.w	8004e9a <__retarget_lock_release_recursive>
 8004d56:	bf00      	nop
 8004d58:	200001d3 	.word	0x200001d3

08004d5c <__sinit>:
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	4604      	mov	r4, r0
 8004d60:	f7ff fff0 	bl	8004d44 <__sinit_lock_acquire>
 8004d64:	69a3      	ldr	r3, [r4, #24]
 8004d66:	b11b      	cbz	r3, 8004d70 <__sinit+0x14>
 8004d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6c:	f7ff bff0 	b.w	8004d50 <__sinit_lock_release>
 8004d70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d74:	6523      	str	r3, [r4, #80]	; 0x50
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <__sinit+0x68>)
 8004d78:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <__sinit+0x6c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d7e:	42a3      	cmp	r3, r4
 8004d80:	bf04      	itt	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	61a3      	streq	r3, [r4, #24]
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 f820 	bl	8004dcc <__sfp>
 8004d8c:	6060      	str	r0, [r4, #4]
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 f81c 	bl	8004dcc <__sfp>
 8004d94:	60a0      	str	r0, [r4, #8]
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 f818 	bl	8004dcc <__sfp>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	60e0      	str	r0, [r4, #12]
 8004da0:	2104      	movs	r1, #4
 8004da2:	6860      	ldr	r0, [r4, #4]
 8004da4:	f7ff ff82 	bl	8004cac <std>
 8004da8:	68a0      	ldr	r0, [r4, #8]
 8004daa:	2201      	movs	r2, #1
 8004dac:	2109      	movs	r1, #9
 8004dae:	f7ff ff7d 	bl	8004cac <std>
 8004db2:	68e0      	ldr	r0, [r4, #12]
 8004db4:	2202      	movs	r2, #2
 8004db6:	2112      	movs	r1, #18
 8004db8:	f7ff ff78 	bl	8004cac <std>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	61a3      	str	r3, [r4, #24]
 8004dc0:	e7d2      	b.n	8004d68 <__sinit+0xc>
 8004dc2:	bf00      	nop
 8004dc4:	08005894 	.word	0x08005894
 8004dc8:	08004cf5 	.word	0x08004cf5

08004dcc <__sfp>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	4607      	mov	r7, r0
 8004dd0:	f7ff ffac 	bl	8004d2c <__sfp_lock_acquire>
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <__sfp+0x84>)
 8004dd6:	681e      	ldr	r6, [r3, #0]
 8004dd8:	69b3      	ldr	r3, [r6, #24]
 8004dda:	b913      	cbnz	r3, 8004de2 <__sfp+0x16>
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f7ff ffbd 	bl	8004d5c <__sinit>
 8004de2:	3648      	adds	r6, #72	; 0x48
 8004de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	d503      	bpl.n	8004df4 <__sfp+0x28>
 8004dec:	6833      	ldr	r3, [r6, #0]
 8004dee:	b30b      	cbz	r3, 8004e34 <__sfp+0x68>
 8004df0:	6836      	ldr	r6, [r6, #0]
 8004df2:	e7f7      	b.n	8004de4 <__sfp+0x18>
 8004df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004df8:	b9d5      	cbnz	r5, 8004e30 <__sfp+0x64>
 8004dfa:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <__sfp+0x88>)
 8004dfc:	60e3      	str	r3, [r4, #12]
 8004dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e02:	6665      	str	r5, [r4, #100]	; 0x64
 8004e04:	f000 f847 	bl	8004e96 <__retarget_lock_init_recursive>
 8004e08:	f7ff ff96 	bl	8004d38 <__sfp_lock_release>
 8004e0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e14:	6025      	str	r5, [r4, #0]
 8004e16:	61a5      	str	r5, [r4, #24]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e20:	f7ff fd2c 	bl	800487c <memset>
 8004e24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e30:	3468      	adds	r4, #104	; 0x68
 8004e32:	e7d9      	b.n	8004de8 <__sfp+0x1c>
 8004e34:	2104      	movs	r1, #4
 8004e36:	4638      	mov	r0, r7
 8004e38:	f7ff ff62 	bl	8004d00 <__sfmoreglue>
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	6030      	str	r0, [r6, #0]
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d1d5      	bne.n	8004df0 <__sfp+0x24>
 8004e44:	f7ff ff78 	bl	8004d38 <__sfp_lock_release>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	e7ee      	b.n	8004e2c <__sfp+0x60>
 8004e4e:	bf00      	nop
 8004e50:	08005894 	.word	0x08005894
 8004e54:	ffff0001 	.word	0xffff0001

08004e58 <_fwalk_reent>:
 8004e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	4688      	mov	r8, r1
 8004e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e64:	2700      	movs	r7, #0
 8004e66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e6a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e6e:	d505      	bpl.n	8004e7c <_fwalk_reent+0x24>
 8004e70:	6824      	ldr	r4, [r4, #0]
 8004e72:	2c00      	cmp	r4, #0
 8004e74:	d1f7      	bne.n	8004e66 <_fwalk_reent+0xe>
 8004e76:	4638      	mov	r0, r7
 8004e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e7c:	89ab      	ldrh	r3, [r5, #12]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d907      	bls.n	8004e92 <_fwalk_reent+0x3a>
 8004e82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e86:	3301      	adds	r3, #1
 8004e88:	d003      	beq.n	8004e92 <_fwalk_reent+0x3a>
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	47c0      	blx	r8
 8004e90:	4307      	orrs	r7, r0
 8004e92:	3568      	adds	r5, #104	; 0x68
 8004e94:	e7e9      	b.n	8004e6a <_fwalk_reent+0x12>

08004e96 <__retarget_lock_init_recursive>:
 8004e96:	4770      	bx	lr

08004e98 <__retarget_lock_acquire_recursive>:
 8004e98:	4770      	bx	lr

08004e9a <__retarget_lock_release_recursive>:
 8004e9a:	4770      	bx	lr

08004e9c <__swhatbuf_r>:
 8004e9c:	b570      	push	{r4, r5, r6, lr}
 8004e9e:	460e      	mov	r6, r1
 8004ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	b096      	sub	sp, #88	; 0x58
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	461d      	mov	r5, r3
 8004eac:	da07      	bge.n	8004ebe <__swhatbuf_r+0x22>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	602b      	str	r3, [r5, #0]
 8004eb2:	89b3      	ldrh	r3, [r6, #12]
 8004eb4:	061a      	lsls	r2, r3, #24
 8004eb6:	d410      	bmi.n	8004eda <__swhatbuf_r+0x3e>
 8004eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ebc:	e00e      	b.n	8004edc <__swhatbuf_r+0x40>
 8004ebe:	466a      	mov	r2, sp
 8004ec0:	f000 fc5e 	bl	8005780 <_fstat_r>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	dbf2      	blt.n	8004eae <__swhatbuf_r+0x12>
 8004ec8:	9a01      	ldr	r2, [sp, #4]
 8004eca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ed2:	425a      	negs	r2, r3
 8004ed4:	415a      	adcs	r2, r3
 8004ed6:	602a      	str	r2, [r5, #0]
 8004ed8:	e7ee      	b.n	8004eb8 <__swhatbuf_r+0x1c>
 8004eda:	2340      	movs	r3, #64	; 0x40
 8004edc:	2000      	movs	r0, #0
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	b016      	add	sp, #88	; 0x58
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}

08004ee4 <__smakebuf_r>:
 8004ee4:	898b      	ldrh	r3, [r1, #12]
 8004ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ee8:	079d      	lsls	r5, r3, #30
 8004eea:	4606      	mov	r6, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	d507      	bpl.n	8004f00 <__smakebuf_r+0x1c>
 8004ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	6123      	str	r3, [r4, #16]
 8004ef8:	2301      	movs	r3, #1
 8004efa:	6163      	str	r3, [r4, #20]
 8004efc:	b002      	add	sp, #8
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	ab01      	add	r3, sp, #4
 8004f02:	466a      	mov	r2, sp
 8004f04:	f7ff ffca 	bl	8004e9c <__swhatbuf_r>
 8004f08:	9900      	ldr	r1, [sp, #0]
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f000 f879 	bl	8005004 <_malloc_r>
 8004f12:	b948      	cbnz	r0, 8004f28 <__smakebuf_r+0x44>
 8004f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f18:	059a      	lsls	r2, r3, #22
 8004f1a:	d4ef      	bmi.n	8004efc <__smakebuf_r+0x18>
 8004f1c:	f023 0303 	bic.w	r3, r3, #3
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	e7e3      	b.n	8004ef0 <__smakebuf_r+0xc>
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <__smakebuf_r+0x7c>)
 8004f2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	6020      	str	r0, [r4, #0]
 8004f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	9b00      	ldr	r3, [sp, #0]
 8004f38:	6163      	str	r3, [r4, #20]
 8004f3a:	9b01      	ldr	r3, [sp, #4]
 8004f3c:	6120      	str	r0, [r4, #16]
 8004f3e:	b15b      	cbz	r3, 8004f58 <__smakebuf_r+0x74>
 8004f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 fc2d 	bl	80057a4 <_isatty_r>
 8004f4a:	b128      	cbz	r0, 8004f58 <__smakebuf_r+0x74>
 8004f4c:	89a3      	ldrh	r3, [r4, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	89a0      	ldrh	r0, [r4, #12]
 8004f5a:	4305      	orrs	r5, r0
 8004f5c:	81a5      	strh	r5, [r4, #12]
 8004f5e:	e7cd      	b.n	8004efc <__smakebuf_r+0x18>
 8004f60:	08004cf5 	.word	0x08004cf5

08004f64 <_free_r>:
 8004f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f66:	2900      	cmp	r1, #0
 8004f68:	d048      	beq.n	8004ffc <_free_r+0x98>
 8004f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6e:	9001      	str	r0, [sp, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f1a1 0404 	sub.w	r4, r1, #4
 8004f76:	bfb8      	it	lt
 8004f78:	18e4      	addlt	r4, r4, r3
 8004f7a:	f000 fc35 	bl	80057e8 <__malloc_lock>
 8004f7e:	4a20      	ldr	r2, [pc, #128]	; (8005000 <_free_r+0x9c>)
 8004f80:	9801      	ldr	r0, [sp, #4]
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	4615      	mov	r5, r2
 8004f86:	b933      	cbnz	r3, 8004f96 <_free_r+0x32>
 8004f88:	6063      	str	r3, [r4, #4]
 8004f8a:	6014      	str	r4, [r2, #0]
 8004f8c:	b003      	add	sp, #12
 8004f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f92:	f000 bc2f 	b.w	80057f4 <__malloc_unlock>
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	d90b      	bls.n	8004fb2 <_free_r+0x4e>
 8004f9a:	6821      	ldr	r1, [r4, #0]
 8004f9c:	1862      	adds	r2, r4, r1
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf04      	itt	eq
 8004fa2:	681a      	ldreq	r2, [r3, #0]
 8004fa4:	685b      	ldreq	r3, [r3, #4]
 8004fa6:	6063      	str	r3, [r4, #4]
 8004fa8:	bf04      	itt	eq
 8004faa:	1852      	addeq	r2, r2, r1
 8004fac:	6022      	streq	r2, [r4, #0]
 8004fae:	602c      	str	r4, [r5, #0]
 8004fb0:	e7ec      	b.n	8004f8c <_free_r+0x28>
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	b10b      	cbz	r3, 8004fbc <_free_r+0x58>
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	d9fa      	bls.n	8004fb2 <_free_r+0x4e>
 8004fbc:	6811      	ldr	r1, [r2, #0]
 8004fbe:	1855      	adds	r5, r2, r1
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d10b      	bne.n	8004fdc <_free_r+0x78>
 8004fc4:	6824      	ldr	r4, [r4, #0]
 8004fc6:	4421      	add	r1, r4
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	d1dd      	bne.n	8004f8c <_free_r+0x28>
 8004fd0:	681c      	ldr	r4, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	6053      	str	r3, [r2, #4]
 8004fd6:	4421      	add	r1, r4
 8004fd8:	6011      	str	r1, [r2, #0]
 8004fda:	e7d7      	b.n	8004f8c <_free_r+0x28>
 8004fdc:	d902      	bls.n	8004fe4 <_free_r+0x80>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	6003      	str	r3, [r0, #0]
 8004fe2:	e7d3      	b.n	8004f8c <_free_r+0x28>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1961      	adds	r1, r4, r5
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf04      	itt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	6063      	str	r3, [r4, #4]
 8004ff2:	bf04      	itt	eq
 8004ff4:	1949      	addeq	r1, r1, r5
 8004ff6:	6021      	streq	r1, [r4, #0]
 8004ff8:	6054      	str	r4, [r2, #4]
 8004ffa:	e7c7      	b.n	8004f8c <_free_r+0x28>
 8004ffc:	b003      	add	sp, #12
 8004ffe:	bd30      	pop	{r4, r5, pc}
 8005000:	20000090 	.word	0x20000090

08005004 <_malloc_r>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	1ccd      	adds	r5, r1, #3
 8005008:	f025 0503 	bic.w	r5, r5, #3
 800500c:	3508      	adds	r5, #8
 800500e:	2d0c      	cmp	r5, #12
 8005010:	bf38      	it	cc
 8005012:	250c      	movcc	r5, #12
 8005014:	2d00      	cmp	r5, #0
 8005016:	4606      	mov	r6, r0
 8005018:	db01      	blt.n	800501e <_malloc_r+0x1a>
 800501a:	42a9      	cmp	r1, r5
 800501c:	d903      	bls.n	8005026 <_malloc_r+0x22>
 800501e:	230c      	movs	r3, #12
 8005020:	6033      	str	r3, [r6, #0]
 8005022:	2000      	movs	r0, #0
 8005024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005026:	f000 fbdf 	bl	80057e8 <__malloc_lock>
 800502a:	4921      	ldr	r1, [pc, #132]	; (80050b0 <_malloc_r+0xac>)
 800502c:	680a      	ldr	r2, [r1, #0]
 800502e:	4614      	mov	r4, r2
 8005030:	b99c      	cbnz	r4, 800505a <_malloc_r+0x56>
 8005032:	4f20      	ldr	r7, [pc, #128]	; (80050b4 <_malloc_r+0xb0>)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b923      	cbnz	r3, 8005042 <_malloc_r+0x3e>
 8005038:	4621      	mov	r1, r4
 800503a:	4630      	mov	r0, r6
 800503c:	f000 fb2a 	bl	8005694 <_sbrk_r>
 8005040:	6038      	str	r0, [r7, #0]
 8005042:	4629      	mov	r1, r5
 8005044:	4630      	mov	r0, r6
 8005046:	f000 fb25 	bl	8005694 <_sbrk_r>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d123      	bne.n	8005096 <_malloc_r+0x92>
 800504e:	230c      	movs	r3, #12
 8005050:	6033      	str	r3, [r6, #0]
 8005052:	4630      	mov	r0, r6
 8005054:	f000 fbce 	bl	80057f4 <__malloc_unlock>
 8005058:	e7e3      	b.n	8005022 <_malloc_r+0x1e>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	1b5b      	subs	r3, r3, r5
 800505e:	d417      	bmi.n	8005090 <_malloc_r+0x8c>
 8005060:	2b0b      	cmp	r3, #11
 8005062:	d903      	bls.n	800506c <_malloc_r+0x68>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	441c      	add	r4, r3
 8005068:	6025      	str	r5, [r4, #0]
 800506a:	e004      	b.n	8005076 <_malloc_r+0x72>
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	42a2      	cmp	r2, r4
 8005070:	bf0c      	ite	eq
 8005072:	600b      	streq	r3, [r1, #0]
 8005074:	6053      	strne	r3, [r2, #4]
 8005076:	4630      	mov	r0, r6
 8005078:	f000 fbbc 	bl	80057f4 <__malloc_unlock>
 800507c:	f104 000b 	add.w	r0, r4, #11
 8005080:	1d23      	adds	r3, r4, #4
 8005082:	f020 0007 	bic.w	r0, r0, #7
 8005086:	1ac2      	subs	r2, r0, r3
 8005088:	d0cc      	beq.n	8005024 <_malloc_r+0x20>
 800508a:	1a1b      	subs	r3, r3, r0
 800508c:	50a3      	str	r3, [r4, r2]
 800508e:	e7c9      	b.n	8005024 <_malloc_r+0x20>
 8005090:	4622      	mov	r2, r4
 8005092:	6864      	ldr	r4, [r4, #4]
 8005094:	e7cc      	b.n	8005030 <_malloc_r+0x2c>
 8005096:	1cc4      	adds	r4, r0, #3
 8005098:	f024 0403 	bic.w	r4, r4, #3
 800509c:	42a0      	cmp	r0, r4
 800509e:	d0e3      	beq.n	8005068 <_malloc_r+0x64>
 80050a0:	1a21      	subs	r1, r4, r0
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 faf6 	bl	8005694 <_sbrk_r>
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1dd      	bne.n	8005068 <_malloc_r+0x64>
 80050ac:	e7cf      	b.n	800504e <_malloc_r+0x4a>
 80050ae:	bf00      	nop
 80050b0:	20000090 	.word	0x20000090
 80050b4:	20000094 	.word	0x20000094

080050b8 <__sfputc_r>:
 80050b8:	6893      	ldr	r3, [r2, #8]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	b410      	push	{r4}
 80050c0:	6093      	str	r3, [r2, #8]
 80050c2:	da08      	bge.n	80050d6 <__sfputc_r+0x1e>
 80050c4:	6994      	ldr	r4, [r2, #24]
 80050c6:	42a3      	cmp	r3, r4
 80050c8:	db01      	blt.n	80050ce <__sfputc_r+0x16>
 80050ca:	290a      	cmp	r1, #10
 80050cc:	d103      	bne.n	80050d6 <__sfputc_r+0x1e>
 80050ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050d2:	f7ff bc69 	b.w	80049a8 <__swbuf_r>
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	1c58      	adds	r0, r3, #1
 80050da:	6010      	str	r0, [r2, #0]
 80050dc:	7019      	strb	r1, [r3, #0]
 80050de:	4608      	mov	r0, r1
 80050e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <__sfputs_r>:
 80050e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e8:	4606      	mov	r6, r0
 80050ea:	460f      	mov	r7, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	18d5      	adds	r5, r2, r3
 80050f0:	42ac      	cmp	r4, r5
 80050f2:	d101      	bne.n	80050f8 <__sfputs_r+0x12>
 80050f4:	2000      	movs	r0, #0
 80050f6:	e007      	b.n	8005108 <__sfputs_r+0x22>
 80050f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050fc:	463a      	mov	r2, r7
 80050fe:	4630      	mov	r0, r6
 8005100:	f7ff ffda 	bl	80050b8 <__sfputc_r>
 8005104:	1c43      	adds	r3, r0, #1
 8005106:	d1f3      	bne.n	80050f0 <__sfputs_r+0xa>
 8005108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800510c <_vfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	460d      	mov	r5, r1
 8005112:	b09d      	sub	sp, #116	; 0x74
 8005114:	4614      	mov	r4, r2
 8005116:	4698      	mov	r8, r3
 8005118:	4606      	mov	r6, r0
 800511a:	b118      	cbz	r0, 8005124 <_vfiprintf_r+0x18>
 800511c:	6983      	ldr	r3, [r0, #24]
 800511e:	b90b      	cbnz	r3, 8005124 <_vfiprintf_r+0x18>
 8005120:	f7ff fe1c 	bl	8004d5c <__sinit>
 8005124:	4b89      	ldr	r3, [pc, #548]	; (800534c <_vfiprintf_r+0x240>)
 8005126:	429d      	cmp	r5, r3
 8005128:	d11b      	bne.n	8005162 <_vfiprintf_r+0x56>
 800512a:	6875      	ldr	r5, [r6, #4]
 800512c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800512e:	07d9      	lsls	r1, r3, #31
 8005130:	d405      	bmi.n	800513e <_vfiprintf_r+0x32>
 8005132:	89ab      	ldrh	r3, [r5, #12]
 8005134:	059a      	lsls	r2, r3, #22
 8005136:	d402      	bmi.n	800513e <_vfiprintf_r+0x32>
 8005138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800513a:	f7ff fead 	bl	8004e98 <__retarget_lock_acquire_recursive>
 800513e:	89ab      	ldrh	r3, [r5, #12]
 8005140:	071b      	lsls	r3, r3, #28
 8005142:	d501      	bpl.n	8005148 <_vfiprintf_r+0x3c>
 8005144:	692b      	ldr	r3, [r5, #16]
 8005146:	b9eb      	cbnz	r3, 8005184 <_vfiprintf_r+0x78>
 8005148:	4629      	mov	r1, r5
 800514a:	4630      	mov	r0, r6
 800514c:	f7ff fc7e 	bl	8004a4c <__swsetup_r>
 8005150:	b1c0      	cbz	r0, 8005184 <_vfiprintf_r+0x78>
 8005152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005154:	07dc      	lsls	r4, r3, #31
 8005156:	d50e      	bpl.n	8005176 <_vfiprintf_r+0x6a>
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
 800515c:	b01d      	add	sp, #116	; 0x74
 800515e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005162:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <_vfiprintf_r+0x244>)
 8005164:	429d      	cmp	r5, r3
 8005166:	d101      	bne.n	800516c <_vfiprintf_r+0x60>
 8005168:	68b5      	ldr	r5, [r6, #8]
 800516a:	e7df      	b.n	800512c <_vfiprintf_r+0x20>
 800516c:	4b79      	ldr	r3, [pc, #484]	; (8005354 <_vfiprintf_r+0x248>)
 800516e:	429d      	cmp	r5, r3
 8005170:	bf08      	it	eq
 8005172:	68f5      	ldreq	r5, [r6, #12]
 8005174:	e7da      	b.n	800512c <_vfiprintf_r+0x20>
 8005176:	89ab      	ldrh	r3, [r5, #12]
 8005178:	0598      	lsls	r0, r3, #22
 800517a:	d4ed      	bmi.n	8005158 <_vfiprintf_r+0x4c>
 800517c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800517e:	f7ff fe8c 	bl	8004e9a <__retarget_lock_release_recursive>
 8005182:	e7e9      	b.n	8005158 <_vfiprintf_r+0x4c>
 8005184:	2300      	movs	r3, #0
 8005186:	9309      	str	r3, [sp, #36]	; 0x24
 8005188:	2320      	movs	r3, #32
 800518a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800518e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005192:	2330      	movs	r3, #48	; 0x30
 8005194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005358 <_vfiprintf_r+0x24c>
 8005198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800519c:	f04f 0901 	mov.w	r9, #1
 80051a0:	4623      	mov	r3, r4
 80051a2:	469a      	mov	sl, r3
 80051a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a8:	b10a      	cbz	r2, 80051ae <_vfiprintf_r+0xa2>
 80051aa:	2a25      	cmp	r2, #37	; 0x25
 80051ac:	d1f9      	bne.n	80051a2 <_vfiprintf_r+0x96>
 80051ae:	ebba 0b04 	subs.w	fp, sl, r4
 80051b2:	d00b      	beq.n	80051cc <_vfiprintf_r+0xc0>
 80051b4:	465b      	mov	r3, fp
 80051b6:	4622      	mov	r2, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	4630      	mov	r0, r6
 80051bc:	f7ff ff93 	bl	80050e6 <__sfputs_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	f000 80aa 	beq.w	800531a <_vfiprintf_r+0x20e>
 80051c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051c8:	445a      	add	r2, fp
 80051ca:	9209      	str	r2, [sp, #36]	; 0x24
 80051cc:	f89a 3000 	ldrb.w	r3, [sl]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80a2 	beq.w	800531a <_vfiprintf_r+0x20e>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051e0:	f10a 0a01 	add.w	sl, sl, #1
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	9307      	str	r3, [sp, #28]
 80051e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051ec:	931a      	str	r3, [sp, #104]	; 0x68
 80051ee:	4654      	mov	r4, sl
 80051f0:	2205      	movs	r2, #5
 80051f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f6:	4858      	ldr	r0, [pc, #352]	; (8005358 <_vfiprintf_r+0x24c>)
 80051f8:	f7fb f812 	bl	8000220 <memchr>
 80051fc:	9a04      	ldr	r2, [sp, #16]
 80051fe:	b9d8      	cbnz	r0, 8005238 <_vfiprintf_r+0x12c>
 8005200:	06d1      	lsls	r1, r2, #27
 8005202:	bf44      	itt	mi
 8005204:	2320      	movmi	r3, #32
 8005206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800520a:	0713      	lsls	r3, r2, #28
 800520c:	bf44      	itt	mi
 800520e:	232b      	movmi	r3, #43	; 0x2b
 8005210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005214:	f89a 3000 	ldrb.w	r3, [sl]
 8005218:	2b2a      	cmp	r3, #42	; 0x2a
 800521a:	d015      	beq.n	8005248 <_vfiprintf_r+0x13c>
 800521c:	9a07      	ldr	r2, [sp, #28]
 800521e:	4654      	mov	r4, sl
 8005220:	2000      	movs	r0, #0
 8005222:	f04f 0c0a 	mov.w	ip, #10
 8005226:	4621      	mov	r1, r4
 8005228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800522c:	3b30      	subs	r3, #48	; 0x30
 800522e:	2b09      	cmp	r3, #9
 8005230:	d94e      	bls.n	80052d0 <_vfiprintf_r+0x1c4>
 8005232:	b1b0      	cbz	r0, 8005262 <_vfiprintf_r+0x156>
 8005234:	9207      	str	r2, [sp, #28]
 8005236:	e014      	b.n	8005262 <_vfiprintf_r+0x156>
 8005238:	eba0 0308 	sub.w	r3, r0, r8
 800523c:	fa09 f303 	lsl.w	r3, r9, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	46a2      	mov	sl, r4
 8005246:	e7d2      	b.n	80051ee <_vfiprintf_r+0xe2>
 8005248:	9b03      	ldr	r3, [sp, #12]
 800524a:	1d19      	adds	r1, r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	9103      	str	r1, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	bfbb      	ittet	lt
 8005254:	425b      	neglt	r3, r3
 8005256:	f042 0202 	orrlt.w	r2, r2, #2
 800525a:	9307      	strge	r3, [sp, #28]
 800525c:	9307      	strlt	r3, [sp, #28]
 800525e:	bfb8      	it	lt
 8005260:	9204      	strlt	r2, [sp, #16]
 8005262:	7823      	ldrb	r3, [r4, #0]
 8005264:	2b2e      	cmp	r3, #46	; 0x2e
 8005266:	d10c      	bne.n	8005282 <_vfiprintf_r+0x176>
 8005268:	7863      	ldrb	r3, [r4, #1]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d135      	bne.n	80052da <_vfiprintf_r+0x1ce>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	1d1a      	adds	r2, r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9203      	str	r2, [sp, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfb8      	it	lt
 800527a:	f04f 33ff 	movlt.w	r3, #4294967295
 800527e:	3402      	adds	r4, #2
 8005280:	9305      	str	r3, [sp, #20]
 8005282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005368 <_vfiprintf_r+0x25c>
 8005286:	7821      	ldrb	r1, [r4, #0]
 8005288:	2203      	movs	r2, #3
 800528a:	4650      	mov	r0, sl
 800528c:	f7fa ffc8 	bl	8000220 <memchr>
 8005290:	b140      	cbz	r0, 80052a4 <_vfiprintf_r+0x198>
 8005292:	2340      	movs	r3, #64	; 0x40
 8005294:	eba0 000a 	sub.w	r0, r0, sl
 8005298:	fa03 f000 	lsl.w	r0, r3, r0
 800529c:	9b04      	ldr	r3, [sp, #16]
 800529e:	4303      	orrs	r3, r0
 80052a0:	3401      	adds	r4, #1
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052a8:	482c      	ldr	r0, [pc, #176]	; (800535c <_vfiprintf_r+0x250>)
 80052aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ae:	2206      	movs	r2, #6
 80052b0:	f7fa ffb6 	bl	8000220 <memchr>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d03f      	beq.n	8005338 <_vfiprintf_r+0x22c>
 80052b8:	4b29      	ldr	r3, [pc, #164]	; (8005360 <_vfiprintf_r+0x254>)
 80052ba:	bb1b      	cbnz	r3, 8005304 <_vfiprintf_r+0x1f8>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	3307      	adds	r3, #7
 80052c0:	f023 0307 	bic.w	r3, r3, #7
 80052c4:	3308      	adds	r3, #8
 80052c6:	9303      	str	r3, [sp, #12]
 80052c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ca:	443b      	add	r3, r7
 80052cc:	9309      	str	r3, [sp, #36]	; 0x24
 80052ce:	e767      	b.n	80051a0 <_vfiprintf_r+0x94>
 80052d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052d4:	460c      	mov	r4, r1
 80052d6:	2001      	movs	r0, #1
 80052d8:	e7a5      	b.n	8005226 <_vfiprintf_r+0x11a>
 80052da:	2300      	movs	r3, #0
 80052dc:	3401      	adds	r4, #1
 80052de:	9305      	str	r3, [sp, #20]
 80052e0:	4619      	mov	r1, r3
 80052e2:	f04f 0c0a 	mov.w	ip, #10
 80052e6:	4620      	mov	r0, r4
 80052e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052ec:	3a30      	subs	r2, #48	; 0x30
 80052ee:	2a09      	cmp	r2, #9
 80052f0:	d903      	bls.n	80052fa <_vfiprintf_r+0x1ee>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0c5      	beq.n	8005282 <_vfiprintf_r+0x176>
 80052f6:	9105      	str	r1, [sp, #20]
 80052f8:	e7c3      	b.n	8005282 <_vfiprintf_r+0x176>
 80052fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80052fe:	4604      	mov	r4, r0
 8005300:	2301      	movs	r3, #1
 8005302:	e7f0      	b.n	80052e6 <_vfiprintf_r+0x1da>
 8005304:	ab03      	add	r3, sp, #12
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	462a      	mov	r2, r5
 800530a:	4b16      	ldr	r3, [pc, #88]	; (8005364 <_vfiprintf_r+0x258>)
 800530c:	a904      	add	r1, sp, #16
 800530e:	4630      	mov	r0, r6
 8005310:	f3af 8000 	nop.w
 8005314:	4607      	mov	r7, r0
 8005316:	1c78      	adds	r0, r7, #1
 8005318:	d1d6      	bne.n	80052c8 <_vfiprintf_r+0x1bc>
 800531a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800531c:	07d9      	lsls	r1, r3, #31
 800531e:	d405      	bmi.n	800532c <_vfiprintf_r+0x220>
 8005320:	89ab      	ldrh	r3, [r5, #12]
 8005322:	059a      	lsls	r2, r3, #22
 8005324:	d402      	bmi.n	800532c <_vfiprintf_r+0x220>
 8005326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005328:	f7ff fdb7 	bl	8004e9a <__retarget_lock_release_recursive>
 800532c:	89ab      	ldrh	r3, [r5, #12]
 800532e:	065b      	lsls	r3, r3, #25
 8005330:	f53f af12 	bmi.w	8005158 <_vfiprintf_r+0x4c>
 8005334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005336:	e711      	b.n	800515c <_vfiprintf_r+0x50>
 8005338:	ab03      	add	r3, sp, #12
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	462a      	mov	r2, r5
 800533e:	4b09      	ldr	r3, [pc, #36]	; (8005364 <_vfiprintf_r+0x258>)
 8005340:	a904      	add	r1, sp, #16
 8005342:	4630      	mov	r0, r6
 8005344:	f000 f880 	bl	8005448 <_printf_i>
 8005348:	e7e4      	b.n	8005314 <_vfiprintf_r+0x208>
 800534a:	bf00      	nop
 800534c:	080058b8 	.word	0x080058b8
 8005350:	080058d8 	.word	0x080058d8
 8005354:	08005898 	.word	0x08005898
 8005358:	080058f8 	.word	0x080058f8
 800535c:	08005902 	.word	0x08005902
 8005360:	00000000 	.word	0x00000000
 8005364:	080050e7 	.word	0x080050e7
 8005368:	080058fe 	.word	0x080058fe

0800536c <_printf_common>:
 800536c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005370:	4616      	mov	r6, r2
 8005372:	4699      	mov	r9, r3
 8005374:	688a      	ldr	r2, [r1, #8]
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800537c:	4293      	cmp	r3, r2
 800537e:	bfb8      	it	lt
 8005380:	4613      	movlt	r3, r2
 8005382:	6033      	str	r3, [r6, #0]
 8005384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005388:	4607      	mov	r7, r0
 800538a:	460c      	mov	r4, r1
 800538c:	b10a      	cbz	r2, 8005392 <_printf_common+0x26>
 800538e:	3301      	adds	r3, #1
 8005390:	6033      	str	r3, [r6, #0]
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	0699      	lsls	r1, r3, #26
 8005396:	bf42      	ittt	mi
 8005398:	6833      	ldrmi	r3, [r6, #0]
 800539a:	3302      	addmi	r3, #2
 800539c:	6033      	strmi	r3, [r6, #0]
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	f015 0506 	ands.w	r5, r5, #6
 80053a4:	d106      	bne.n	80053b4 <_printf_common+0x48>
 80053a6:	f104 0a19 	add.w	sl, r4, #25
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	42ab      	cmp	r3, r5
 80053b2:	dc26      	bgt.n	8005402 <_printf_common+0x96>
 80053b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b8:	1e13      	subs	r3, r2, #0
 80053ba:	6822      	ldr	r2, [r4, #0]
 80053bc:	bf18      	it	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	0692      	lsls	r2, r2, #26
 80053c2:	d42b      	bmi.n	800541c <_printf_common+0xb0>
 80053c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c8:	4649      	mov	r1, r9
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d01e      	beq.n	8005410 <_printf_common+0xa4>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	68e5      	ldr	r5, [r4, #12]
 80053d6:	6832      	ldr	r2, [r6, #0]
 80053d8:	f003 0306 	and.w	r3, r3, #6
 80053dc:	2b04      	cmp	r3, #4
 80053de:	bf08      	it	eq
 80053e0:	1aad      	subeq	r5, r5, r2
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	6922      	ldr	r2, [r4, #16]
 80053e6:	bf0c      	ite	eq
 80053e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053ec:	2500      	movne	r5, #0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bfc4      	itt	gt
 80053f2:	1a9b      	subgt	r3, r3, r2
 80053f4:	18ed      	addgt	r5, r5, r3
 80053f6:	2600      	movs	r6, #0
 80053f8:	341a      	adds	r4, #26
 80053fa:	42b5      	cmp	r5, r6
 80053fc:	d11a      	bne.n	8005434 <_printf_common+0xc8>
 80053fe:	2000      	movs	r0, #0
 8005400:	e008      	b.n	8005414 <_printf_common+0xa8>
 8005402:	2301      	movs	r3, #1
 8005404:	4652      	mov	r2, sl
 8005406:	4649      	mov	r1, r9
 8005408:	4638      	mov	r0, r7
 800540a:	47c0      	blx	r8
 800540c:	3001      	adds	r0, #1
 800540e:	d103      	bne.n	8005418 <_printf_common+0xac>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005418:	3501      	adds	r5, #1
 800541a:	e7c6      	b.n	80053aa <_printf_common+0x3e>
 800541c:	18e1      	adds	r1, r4, r3
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	2030      	movs	r0, #48	; 0x30
 8005422:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005426:	4422      	add	r2, r4
 8005428:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800542c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005430:	3302      	adds	r3, #2
 8005432:	e7c7      	b.n	80053c4 <_printf_common+0x58>
 8005434:	2301      	movs	r3, #1
 8005436:	4622      	mov	r2, r4
 8005438:	4649      	mov	r1, r9
 800543a:	4638      	mov	r0, r7
 800543c:	47c0      	blx	r8
 800543e:	3001      	adds	r0, #1
 8005440:	d0e6      	beq.n	8005410 <_printf_common+0xa4>
 8005442:	3601      	adds	r6, #1
 8005444:	e7d9      	b.n	80053fa <_printf_common+0x8e>
	...

08005448 <_printf_i>:
 8005448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	4691      	mov	r9, r2
 8005450:	7e27      	ldrb	r7, [r4, #24]
 8005452:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005454:	2f78      	cmp	r7, #120	; 0x78
 8005456:	4680      	mov	r8, r0
 8005458:	469a      	mov	sl, r3
 800545a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800545e:	d807      	bhi.n	8005470 <_printf_i+0x28>
 8005460:	2f62      	cmp	r7, #98	; 0x62
 8005462:	d80a      	bhi.n	800547a <_printf_i+0x32>
 8005464:	2f00      	cmp	r7, #0
 8005466:	f000 80d8 	beq.w	800561a <_printf_i+0x1d2>
 800546a:	2f58      	cmp	r7, #88	; 0x58
 800546c:	f000 80a3 	beq.w	80055b6 <_printf_i+0x16e>
 8005470:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005478:	e03a      	b.n	80054f0 <_printf_i+0xa8>
 800547a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800547e:	2b15      	cmp	r3, #21
 8005480:	d8f6      	bhi.n	8005470 <_printf_i+0x28>
 8005482:	a001      	add	r0, pc, #4	; (adr r0, 8005488 <_printf_i+0x40>)
 8005484:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005488:	080054e1 	.word	0x080054e1
 800548c:	080054f5 	.word	0x080054f5
 8005490:	08005471 	.word	0x08005471
 8005494:	08005471 	.word	0x08005471
 8005498:	08005471 	.word	0x08005471
 800549c:	08005471 	.word	0x08005471
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005471 	.word	0x08005471
 80054a8:	08005471 	.word	0x08005471
 80054ac:	08005471 	.word	0x08005471
 80054b0:	08005471 	.word	0x08005471
 80054b4:	08005601 	.word	0x08005601
 80054b8:	08005525 	.word	0x08005525
 80054bc:	080055e3 	.word	0x080055e3
 80054c0:	08005471 	.word	0x08005471
 80054c4:	08005471 	.word	0x08005471
 80054c8:	08005623 	.word	0x08005623
 80054cc:	08005471 	.word	0x08005471
 80054d0:	08005525 	.word	0x08005525
 80054d4:	08005471 	.word	0x08005471
 80054d8:	08005471 	.word	0x08005471
 80054dc:	080055eb 	.word	0x080055eb
 80054e0:	680b      	ldr	r3, [r1, #0]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	600a      	str	r2, [r1, #0]
 80054e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0a3      	b.n	800563c <_printf_i+0x1f4>
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	6808      	ldr	r0, [r1, #0]
 80054f8:	062e      	lsls	r6, r5, #24
 80054fa:	f100 0304 	add.w	r3, r0, #4
 80054fe:	d50a      	bpl.n	8005516 <_printf_i+0xce>
 8005500:	6805      	ldr	r5, [r0, #0]
 8005502:	600b      	str	r3, [r1, #0]
 8005504:	2d00      	cmp	r5, #0
 8005506:	da03      	bge.n	8005510 <_printf_i+0xc8>
 8005508:	232d      	movs	r3, #45	; 0x2d
 800550a:	426d      	negs	r5, r5
 800550c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005510:	485e      	ldr	r0, [pc, #376]	; (800568c <_printf_i+0x244>)
 8005512:	230a      	movs	r3, #10
 8005514:	e019      	b.n	800554a <_printf_i+0x102>
 8005516:	f015 0f40 	tst.w	r5, #64	; 0x40
 800551a:	6805      	ldr	r5, [r0, #0]
 800551c:	600b      	str	r3, [r1, #0]
 800551e:	bf18      	it	ne
 8005520:	b22d      	sxthne	r5, r5
 8005522:	e7ef      	b.n	8005504 <_printf_i+0xbc>
 8005524:	680b      	ldr	r3, [r1, #0]
 8005526:	6825      	ldr	r5, [r4, #0]
 8005528:	1d18      	adds	r0, r3, #4
 800552a:	6008      	str	r0, [r1, #0]
 800552c:	0628      	lsls	r0, r5, #24
 800552e:	d501      	bpl.n	8005534 <_printf_i+0xec>
 8005530:	681d      	ldr	r5, [r3, #0]
 8005532:	e002      	b.n	800553a <_printf_i+0xf2>
 8005534:	0669      	lsls	r1, r5, #25
 8005536:	d5fb      	bpl.n	8005530 <_printf_i+0xe8>
 8005538:	881d      	ldrh	r5, [r3, #0]
 800553a:	4854      	ldr	r0, [pc, #336]	; (800568c <_printf_i+0x244>)
 800553c:	2f6f      	cmp	r7, #111	; 0x6f
 800553e:	bf0c      	ite	eq
 8005540:	2308      	moveq	r3, #8
 8005542:	230a      	movne	r3, #10
 8005544:	2100      	movs	r1, #0
 8005546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800554a:	6866      	ldr	r6, [r4, #4]
 800554c:	60a6      	str	r6, [r4, #8]
 800554e:	2e00      	cmp	r6, #0
 8005550:	bfa2      	ittt	ge
 8005552:	6821      	ldrge	r1, [r4, #0]
 8005554:	f021 0104 	bicge.w	r1, r1, #4
 8005558:	6021      	strge	r1, [r4, #0]
 800555a:	b90d      	cbnz	r5, 8005560 <_printf_i+0x118>
 800555c:	2e00      	cmp	r6, #0
 800555e:	d04d      	beq.n	80055fc <_printf_i+0x1b4>
 8005560:	4616      	mov	r6, r2
 8005562:	fbb5 f1f3 	udiv	r1, r5, r3
 8005566:	fb03 5711 	mls	r7, r3, r1, r5
 800556a:	5dc7      	ldrb	r7, [r0, r7]
 800556c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005570:	462f      	mov	r7, r5
 8005572:	42bb      	cmp	r3, r7
 8005574:	460d      	mov	r5, r1
 8005576:	d9f4      	bls.n	8005562 <_printf_i+0x11a>
 8005578:	2b08      	cmp	r3, #8
 800557a:	d10b      	bne.n	8005594 <_printf_i+0x14c>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	07df      	lsls	r7, r3, #31
 8005580:	d508      	bpl.n	8005594 <_printf_i+0x14c>
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	6861      	ldr	r1, [r4, #4]
 8005586:	4299      	cmp	r1, r3
 8005588:	bfde      	ittt	le
 800558a:	2330      	movle	r3, #48	; 0x30
 800558c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005590:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005594:	1b92      	subs	r2, r2, r6
 8005596:	6122      	str	r2, [r4, #16]
 8005598:	f8cd a000 	str.w	sl, [sp]
 800559c:	464b      	mov	r3, r9
 800559e:	aa03      	add	r2, sp, #12
 80055a0:	4621      	mov	r1, r4
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7ff fee2 	bl	800536c <_printf_common>
 80055a8:	3001      	adds	r0, #1
 80055aa:	d14c      	bne.n	8005646 <_printf_i+0x1fe>
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	b004      	add	sp, #16
 80055b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b6:	4835      	ldr	r0, [pc, #212]	; (800568c <_printf_i+0x244>)
 80055b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	680e      	ldr	r6, [r1, #0]
 80055c0:	061f      	lsls	r7, r3, #24
 80055c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80055c6:	600e      	str	r6, [r1, #0]
 80055c8:	d514      	bpl.n	80055f4 <_printf_i+0x1ac>
 80055ca:	07d9      	lsls	r1, r3, #31
 80055cc:	bf44      	itt	mi
 80055ce:	f043 0320 	orrmi.w	r3, r3, #32
 80055d2:	6023      	strmi	r3, [r4, #0]
 80055d4:	b91d      	cbnz	r5, 80055de <_printf_i+0x196>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	f023 0320 	bic.w	r3, r3, #32
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	2310      	movs	r3, #16
 80055e0:	e7b0      	b.n	8005544 <_printf_i+0xfc>
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	f043 0320 	orr.w	r3, r3, #32
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	2378      	movs	r3, #120	; 0x78
 80055ec:	4828      	ldr	r0, [pc, #160]	; (8005690 <_printf_i+0x248>)
 80055ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055f2:	e7e3      	b.n	80055bc <_printf_i+0x174>
 80055f4:	065e      	lsls	r6, r3, #25
 80055f6:	bf48      	it	mi
 80055f8:	b2ad      	uxthmi	r5, r5
 80055fa:	e7e6      	b.n	80055ca <_printf_i+0x182>
 80055fc:	4616      	mov	r6, r2
 80055fe:	e7bb      	b.n	8005578 <_printf_i+0x130>
 8005600:	680b      	ldr	r3, [r1, #0]
 8005602:	6826      	ldr	r6, [r4, #0]
 8005604:	6960      	ldr	r0, [r4, #20]
 8005606:	1d1d      	adds	r5, r3, #4
 8005608:	600d      	str	r5, [r1, #0]
 800560a:	0635      	lsls	r5, r6, #24
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	d501      	bpl.n	8005614 <_printf_i+0x1cc>
 8005610:	6018      	str	r0, [r3, #0]
 8005612:	e002      	b.n	800561a <_printf_i+0x1d2>
 8005614:	0671      	lsls	r1, r6, #25
 8005616:	d5fb      	bpl.n	8005610 <_printf_i+0x1c8>
 8005618:	8018      	strh	r0, [r3, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	4616      	mov	r6, r2
 8005620:	e7ba      	b.n	8005598 <_printf_i+0x150>
 8005622:	680b      	ldr	r3, [r1, #0]
 8005624:	1d1a      	adds	r2, r3, #4
 8005626:	600a      	str	r2, [r1, #0]
 8005628:	681e      	ldr	r6, [r3, #0]
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	2100      	movs	r1, #0
 800562e:	4630      	mov	r0, r6
 8005630:	f7fa fdf6 	bl	8000220 <memchr>
 8005634:	b108      	cbz	r0, 800563a <_printf_i+0x1f2>
 8005636:	1b80      	subs	r0, r0, r6
 8005638:	6060      	str	r0, [r4, #4]
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	2300      	movs	r3, #0
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005644:	e7a8      	b.n	8005598 <_printf_i+0x150>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	4632      	mov	r2, r6
 800564a:	4649      	mov	r1, r9
 800564c:	4640      	mov	r0, r8
 800564e:	47d0      	blx	sl
 8005650:	3001      	adds	r0, #1
 8005652:	d0ab      	beq.n	80055ac <_printf_i+0x164>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	079b      	lsls	r3, r3, #30
 8005658:	d413      	bmi.n	8005682 <_printf_i+0x23a>
 800565a:	68e0      	ldr	r0, [r4, #12]
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	4298      	cmp	r0, r3
 8005660:	bfb8      	it	lt
 8005662:	4618      	movlt	r0, r3
 8005664:	e7a4      	b.n	80055b0 <_printf_i+0x168>
 8005666:	2301      	movs	r3, #1
 8005668:	4632      	mov	r2, r6
 800566a:	4649      	mov	r1, r9
 800566c:	4640      	mov	r0, r8
 800566e:	47d0      	blx	sl
 8005670:	3001      	adds	r0, #1
 8005672:	d09b      	beq.n	80055ac <_printf_i+0x164>
 8005674:	3501      	adds	r5, #1
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	9903      	ldr	r1, [sp, #12]
 800567a:	1a5b      	subs	r3, r3, r1
 800567c:	42ab      	cmp	r3, r5
 800567e:	dcf2      	bgt.n	8005666 <_printf_i+0x21e>
 8005680:	e7eb      	b.n	800565a <_printf_i+0x212>
 8005682:	2500      	movs	r5, #0
 8005684:	f104 0619 	add.w	r6, r4, #25
 8005688:	e7f5      	b.n	8005676 <_printf_i+0x22e>
 800568a:	bf00      	nop
 800568c:	08005909 	.word	0x08005909
 8005690:	0800591a 	.word	0x0800591a

08005694 <_sbrk_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d06      	ldr	r5, [pc, #24]	; (80056b0 <_sbrk_r+0x1c>)
 8005698:	2300      	movs	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	f7fb fd28 	bl	80010f4 <_sbrk>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_sbrk_r+0x1a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_sbrk_r+0x1a>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	200001dc 	.word	0x200001dc

080056b4 <__sread>:
 80056b4:	b510      	push	{r4, lr}
 80056b6:	460c      	mov	r4, r1
 80056b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056bc:	f000 f8a0 	bl	8005800 <_read_r>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	bfab      	itete	ge
 80056c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056c6:	89a3      	ldrhlt	r3, [r4, #12]
 80056c8:	181b      	addge	r3, r3, r0
 80056ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056ce:	bfac      	ite	ge
 80056d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80056d2:	81a3      	strhlt	r3, [r4, #12]
 80056d4:	bd10      	pop	{r4, pc}

080056d6 <__swrite>:
 80056d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056da:	461f      	mov	r7, r3
 80056dc:	898b      	ldrh	r3, [r1, #12]
 80056de:	05db      	lsls	r3, r3, #23
 80056e0:	4605      	mov	r5, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	4616      	mov	r6, r2
 80056e6:	d505      	bpl.n	80056f4 <__swrite+0x1e>
 80056e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ec:	2302      	movs	r3, #2
 80056ee:	2200      	movs	r2, #0
 80056f0:	f000 f868 	bl	80057c4 <_lseek_r>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	4632      	mov	r2, r6
 8005702:	463b      	mov	r3, r7
 8005704:	4628      	mov	r0, r5
 8005706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800570a:	f000 b817 	b.w	800573c <_write_r>

0800570e <__sseek>:
 800570e:	b510      	push	{r4, lr}
 8005710:	460c      	mov	r4, r1
 8005712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005716:	f000 f855 	bl	80057c4 <_lseek_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	bf15      	itete	ne
 8005720:	6560      	strne	r0, [r4, #84]	; 0x54
 8005722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800572a:	81a3      	strheq	r3, [r4, #12]
 800572c:	bf18      	it	ne
 800572e:	81a3      	strhne	r3, [r4, #12]
 8005730:	bd10      	pop	{r4, pc}

08005732 <__sclose>:
 8005732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005736:	f000 b813 	b.w	8005760 <_close_r>
	...

0800573c <_write_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d07      	ldr	r5, [pc, #28]	; (800575c <_write_r+0x20>)
 8005740:	4604      	mov	r4, r0
 8005742:	4608      	mov	r0, r1
 8005744:	4611      	mov	r1, r2
 8005746:	2200      	movs	r2, #0
 8005748:	602a      	str	r2, [r5, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	f7fb fc81 	bl	8001052 <_write>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_write_r+0x1e>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b103      	cbz	r3, 800575a <_write_r+0x1e>
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	200001dc 	.word	0x200001dc

08005760 <_close_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d06      	ldr	r5, [pc, #24]	; (800577c <_close_r+0x1c>)
 8005764:	2300      	movs	r3, #0
 8005766:	4604      	mov	r4, r0
 8005768:	4608      	mov	r0, r1
 800576a:	602b      	str	r3, [r5, #0]
 800576c:	f7fb fc8d 	bl	800108a <_close>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_close_r+0x1a>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_close_r+0x1a>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	200001dc 	.word	0x200001dc

08005780 <_fstat_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_fstat_r+0x20>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	4611      	mov	r1, r2
 800578c:	602b      	str	r3, [r5, #0]
 800578e:	f7fb fc88 	bl	80010a2 <_fstat>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	d102      	bne.n	800579c <_fstat_r+0x1c>
 8005796:	682b      	ldr	r3, [r5, #0]
 8005798:	b103      	cbz	r3, 800579c <_fstat_r+0x1c>
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	bd38      	pop	{r3, r4, r5, pc}
 800579e:	bf00      	nop
 80057a0:	200001dc 	.word	0x200001dc

080057a4 <_isatty_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d06      	ldr	r5, [pc, #24]	; (80057c0 <_isatty_r+0x1c>)
 80057a8:	2300      	movs	r3, #0
 80057aa:	4604      	mov	r4, r0
 80057ac:	4608      	mov	r0, r1
 80057ae:	602b      	str	r3, [r5, #0]
 80057b0:	f7fb fc87 	bl	80010c2 <_isatty>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_isatty_r+0x1a>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_isatty_r+0x1a>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	200001dc 	.word	0x200001dc

080057c4 <_lseek_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d07      	ldr	r5, [pc, #28]	; (80057e4 <_lseek_r+0x20>)
 80057c8:	4604      	mov	r4, r0
 80057ca:	4608      	mov	r0, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	602a      	str	r2, [r5, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f7fb fc80 	bl	80010d8 <_lseek>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_lseek_r+0x1e>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_lseek_r+0x1e>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	200001dc 	.word	0x200001dc

080057e8 <__malloc_lock>:
 80057e8:	4801      	ldr	r0, [pc, #4]	; (80057f0 <__malloc_lock+0x8>)
 80057ea:	f7ff bb55 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 80057ee:	bf00      	nop
 80057f0:	200001d4 	.word	0x200001d4

080057f4 <__malloc_unlock>:
 80057f4:	4801      	ldr	r0, [pc, #4]	; (80057fc <__malloc_unlock+0x8>)
 80057f6:	f7ff bb50 	b.w	8004e9a <__retarget_lock_release_recursive>
 80057fa:	bf00      	nop
 80057fc:	200001d4 	.word	0x200001d4

08005800 <_read_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d07      	ldr	r5, [pc, #28]	; (8005820 <_read_r+0x20>)
 8005804:	4604      	mov	r4, r0
 8005806:	4608      	mov	r0, r1
 8005808:	4611      	mov	r1, r2
 800580a:	2200      	movs	r2, #0
 800580c:	602a      	str	r2, [r5, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	f7fb fc02 	bl	8001018 <_read>
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	d102      	bne.n	800581e <_read_r+0x1e>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	b103      	cbz	r3, 800581e <_read_r+0x1e>
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bd38      	pop	{r3, r4, r5, pc}
 8005820:	200001dc 	.word	0x200001dc

08005824 <_init>:
 8005824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005826:	bf00      	nop
 8005828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582a:	bc08      	pop	{r3}
 800582c:	469e      	mov	lr, r3
 800582e:	4770      	bx	lr

08005830 <_fini>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr
