
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002264  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080023fc  080023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002404  08002404  00012404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002408  08002408  00012408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800240c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00001000  200000c4  200000c4  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000097fe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000014ee  00000000  00000000  0002983a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000af0  00000000  00000000  0002ad28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a38  00000000  00000000  0002b818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004684  00000000  00000000  0002c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000034b2  00000000  00000000  000308d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00033d86  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002dec  00000000  00000000  00033e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023d4 	.word	0x080023d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023d4 	.word	0x080023d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f90b 	bl	800071c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f001 fe00 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f915 	bl	800076a <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f8eb 	bl	8000732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000028 	.word	0x20000028

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	db0a      	blt.n	800064a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	490d      	ldr	r1, [pc, #52]	; (800066c <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	0112      	lsls	r2, r2, #4
 8000640:	b2d2      	uxtb	r2, r2
 8000642:	440b      	add	r3, r1
 8000644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000648:	e00a      	b.n	8000660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064a:	4909      	ldr	r1, [pc, #36]	; (8000670 <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	0112      	lsls	r2, r2, #4
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	440b      	add	r3, r1
 800065e:	761a      	strb	r2, [r3, #24]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000e100 	.word	0xe000e100
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000674:	b480      	push	{r7}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	f1c3 0307 	rsb	r3, r3, #7
 800068e:	2b04      	cmp	r3, #4
 8000690:	bf28      	it	cs
 8000692:	2304      	movcs	r3, #4
 8000694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3304      	adds	r3, #4
 800069a:	2b06      	cmp	r3, #6
 800069c:	d902      	bls.n	80006a4 <NVIC_EncodePriority+0x30>
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	3b03      	subs	r3, #3
 80006a2:	e000      	b.n	80006a6 <NVIC_EncodePriority+0x32>
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	2201      	movs	r2, #1
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	401a      	ands	r2, r3
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ba:	2101      	movs	r1, #1
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	1e59      	subs	r1, r3, #1
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	; 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
	...

080006d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e8:	d301      	bcc.n	80006ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00f      	b.n	800070e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <SysTick_Config+0x40>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006f6:	210f      	movs	r1, #15
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f7ff ff90 	bl	8000620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <SysTick_Config+0x40>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <SysTick_Config+0x40>)
 8000708:	2207      	movs	r2, #7
 800070a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	e000e010 	.word	0xe000e010

0800071c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff49 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	4603      	mov	r3, r0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000744:	f7ff ff5e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	68b9      	ldr	r1, [r7, #8]
 800074e:	6978      	ldr	r0, [r7, #20]
 8000750:	f7ff ff90 	bl	8000674 <NVIC_EncodePriority>
 8000754:	4602      	mov	r2, r0
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff5f 	bl	8000620 <__NVIC_SetPriority>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffb0 	bl	80006d8 <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000784:	b480      	push	{r7}
 8000786:	b089      	sub	sp, #36	; 0x24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
 800079e:	e16b      	b.n	8000a78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007a0:	2201      	movs	r2, #1
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	4013      	ands	r3, r2
 80007b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007b4:	693a      	ldr	r2, [r7, #16]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	f040 815a 	bne.w	8000a72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d00b      	beq.n	80007de <HAL_GPIO_Init+0x5a>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d007      	beq.n	80007de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d2:	2b11      	cmp	r3, #17
 80007d4:	d003      	beq.n	80007de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	2b12      	cmp	r3, #18
 80007dc:	d130      	bne.n	8000840 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2203      	movs	r2, #3
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	69ba      	ldr	r2, [r7, #24]
 80007f2:	4013      	ands	r3, r2
 80007f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	4313      	orrs	r3, r2
 8000806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69ba      	ldr	r2, [r7, #24]
 800080c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000814:	2201      	movs	r2, #1
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	fa02 f303 	lsl.w	r3, r2, r3
 800081c:	43db      	mvns	r3, r3
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	4013      	ands	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	f003 0201 	and.w	r2, r3, #1
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	4313      	orrs	r3, r2
 8000838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	2203      	movs	r2, #3
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4313      	orrs	r3, r2
 8000868:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d003      	beq.n	8000880 <HAL_GPIO_Init+0xfc>
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b12      	cmp	r3, #18
 800087e:	d123      	bne.n	80008c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	08da      	lsrs	r2, r3, #3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3208      	adds	r2, #8
 8000888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800088c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	220f      	movs	r2, #15
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	691a      	ldr	r2, [r3, #16]
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	08da      	lsrs	r2, r3, #3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3208      	adds	r2, #8
 80008c2:	69b9      	ldr	r1, [r7, #24]
 80008c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0203 	and.w	r2, r3, #3
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	2b00      	cmp	r3, #0
 8000906:	f000 80b4 	beq.w	8000a72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <HAL_GPIO_Init+0x308>)
 8000910:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <HAL_GPIO_Init+0x308>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b5c      	ldr	r3, [pc, #368]	; (8000a8c <HAL_GPIO_Init+0x308>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000926:	4a5a      	ldr	r2, [pc, #360]	; (8000a90 <HAL_GPIO_Init+0x30c>)
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	3302      	adds	r3, #2
 800092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	220f      	movs	r2, #15
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4013      	ands	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <HAL_GPIO_Init+0x310>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d02b      	beq.n	80009aa <HAL_GPIO_Init+0x226>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a50      	ldr	r2, [pc, #320]	; (8000a98 <HAL_GPIO_Init+0x314>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d025      	beq.n	80009a6 <HAL_GPIO_Init+0x222>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a4f      	ldr	r2, [pc, #316]	; (8000a9c <HAL_GPIO_Init+0x318>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d01f      	beq.n	80009a2 <HAL_GPIO_Init+0x21e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a4e      	ldr	r2, [pc, #312]	; (8000aa0 <HAL_GPIO_Init+0x31c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x21a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a4d      	ldr	r2, [pc, #308]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x216>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4c      	ldr	r2, [pc, #304]	; (8000aa8 <HAL_GPIO_Init+0x324>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x212>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4b      	ldr	r2, [pc, #300]	; (8000aac <HAL_GPIO_Init+0x328>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x20e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4a      	ldr	r2, [pc, #296]	; (8000ab0 <HAL_GPIO_Init+0x32c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x20a>
 800098a:	2307      	movs	r3, #7
 800098c:	e00e      	b.n	80009ac <HAL_GPIO_Init+0x228>
 800098e:	2308      	movs	r3, #8
 8000990:	e00c      	b.n	80009ac <HAL_GPIO_Init+0x228>
 8000992:	2306      	movs	r3, #6
 8000994:	e00a      	b.n	80009ac <HAL_GPIO_Init+0x228>
 8000996:	2305      	movs	r3, #5
 8000998:	e008      	b.n	80009ac <HAL_GPIO_Init+0x228>
 800099a:	2304      	movs	r3, #4
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x228>
 800099e:	2303      	movs	r3, #3
 80009a0:	e004      	b.n	80009ac <HAL_GPIO_Init+0x228>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x228>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x228>
 80009aa:	2300      	movs	r3, #0
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	f002 0203 	and.w	r2, r2, #3
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009bc:	4934      	ldr	r1, [pc, #208]	; (8000a90 <HAL_GPIO_Init+0x30c>)
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ee:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a18:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a6c:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_GPIO_Init+0x330>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	f67f ae90 	bls.w	80007a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a80:	bf00      	nop
 8000a82:	3724      	adds	r7, #36	; 0x24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40013c00 	.word	0x40013c00

08000ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	807b      	strh	r3, [r7, #2]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac8:	787b      	ldrb	r3, [r7, #1]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ace:	887a      	ldrh	r2, [r7, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ad4:	e003      	b.n	8000ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	041a      	lsls	r2, r3, #16
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	619a      	str	r2, [r3, #24]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
	...

08000aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e25b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d075      	beq.n	8000bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 030c 	and.w	r3, r3, #12
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d00c      	beq.n	8000b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b16:	4ba0      	ldr	r3, [pc, #640]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d112      	bne.n	8000b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b22:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b2e:	d10b      	bne.n	8000b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b30:	4b99      	ldr	r3, [pc, #612]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d05b      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x108>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d157      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e236      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b50:	d106      	bne.n	8000b60 <HAL_RCC_OscConfig+0x74>
 8000b52:	4a91      	ldr	r2, [pc, #580]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b54:	4b90      	ldr	r3, [pc, #576]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e01d      	b.n	8000b9c <HAL_RCC_OscConfig+0xb0>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b68:	d10c      	bne.n	8000b84 <HAL_RCC_OscConfig+0x98>
 8000b6a:	4a8b      	ldr	r2, [pc, #556]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	4b8a      	ldr	r3, [pc, #552]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	4a88      	ldr	r2, [pc, #544]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b78:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e00b      	b.n	8000b9c <HAL_RCC_OscConfig+0xb0>
 8000b84:	4a84      	ldr	r2, [pc, #528]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b86:	4b84      	ldr	r3, [pc, #528]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4a81      	ldr	r2, [pc, #516]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b92:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d013      	beq.n	8000bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fcfe 	bl	80005a4 <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fcfa 	bl	80005a4 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e1fb      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbe:	4b76      	ldr	r3, [pc, #472]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f0      	beq.n	8000bac <HAL_RCC_OscConfig+0xc0>
 8000bca:	e014      	b.n	8000bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fcea 	bl	80005a4 <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fce6 	bl	80005a4 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	; 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1e7      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000be6:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f0      	bne.n	8000bd4 <HAL_RCC_OscConfig+0xe8>
 8000bf2:	e000      	b.n	8000bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d063      	beq.n	8000cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c02:	4b65      	ldr	r3, [pc, #404]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00b      	beq.n	8000c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c0e:	4b62      	ldr	r3, [pc, #392]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d11c      	bne.n	8000c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d116      	bne.n	8000c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c26:	4b5c      	ldr	r3, [pc, #368]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d005      	beq.n	8000c3e <HAL_RCC_OscConfig+0x152>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e1bb      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	4956      	ldr	r1, [pc, #344]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	4b55      	ldr	r3, [pc, #340]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c52:	e03a      	b.n	8000cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d020      	beq.n	8000c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <HAL_RCC_OscConfig+0x2b0>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c62:	f7ff fc9f 	bl	80005a4 <HAL_GetTick>
 8000c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c68:	e008      	b.n	8000c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6a:	f7ff fc9b 	bl	80005a4 <HAL_GetTick>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d901      	bls.n	8000c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e19c      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7c:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f0      	beq.n	8000c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c88:	4943      	ldr	r1, [pc, #268]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e015      	b.n	8000cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <HAL_RCC_OscConfig+0x2b0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc7e 	bl	80005a4 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc7a 	bl	80005a4 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e17b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d030      	beq.n	8000d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d016      	beq.n	8000d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <HAL_RCC_OscConfig+0x2b4>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ce4:	f7ff fc5e 	bl	80005a4 <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cec:	f7ff fc5a 	bl	80005a4 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e15b      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <HAL_RCC_OscConfig+0x200>
 8000d0a:	e015      	b.n	8000d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <HAL_RCC_OscConfig+0x2b4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d12:	f7ff fc47 	bl	80005a4 <HAL_GetTick>
 8000d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc43 	bl	80005a4 <HAL_GetTick>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e144      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f0      	bne.n	8000d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	f000 80a0 	beq.w	8000e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d4a:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10f      	bne.n	8000d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d72:	2301      	movs	r3, #1
 8000d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_RCC_OscConfig+0x2b8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d121      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_RCC_OscConfig+0x2b8>)
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_RCC_OscConfig+0x2b8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fc09 	bl	80005a4 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d94:	e011      	b.n	8000dba <HAL_RCC_OscConfig+0x2ce>
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	42470000 	.word	0x42470000
 8000da0:	42470e80 	.word	0x42470e80
 8000da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000da8:	f7ff fbfc 	bl	80005a4 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e0fd      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dba:	4b81      	ldr	r3, [pc, #516]	; (8000fc0 <HAL_RCC_OscConfig+0x4d4>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f0      	beq.n	8000da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d106      	bne.n	8000ddc <HAL_RCC_OscConfig+0x2f0>
 8000dce:	4a7d      	ldr	r2, [pc, #500]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8000dda:	e01c      	b.n	8000e16 <HAL_RCC_OscConfig+0x32a>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x312>
 8000de4:	4a77      	ldr	r2, [pc, #476]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000de6:	4b77      	ldr	r3, [pc, #476]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6713      	str	r3, [r2, #112]	; 0x70
 8000df0:	4a74      	ldr	r2, [pc, #464]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000df2:	4b74      	ldr	r3, [pc, #464]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfc:	e00b      	b.n	8000e16 <HAL_RCC_OscConfig+0x32a>
 8000dfe:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e00:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6713      	str	r3, [r2, #112]	; 0x70
 8000e0a:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e0c:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d015      	beq.n	8000e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fbc1 	bl	80005a4 <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e24:	e00a      	b.n	8000e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f7ff fbbd 	bl	80005a4 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e0bc      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0ee      	beq.n	8000e26 <HAL_RCC_OscConfig+0x33a>
 8000e48:	e014      	b.n	8000e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fbab 	bl	80005a4 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e50:	e00a      	b.n	8000e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f7ff fba7 	bl	80005a4 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e0a6      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1ee      	bne.n	8000e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d105      	bne.n	8000e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7a:	4a52      	ldr	r2, [pc, #328]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e7c:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8092 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e90:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d05c      	beq.n	8000f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d141      	bne.n	8000f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea4:	4b48      	ldr	r3, [pc, #288]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fb7b 	bl	80005a4 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb2:	f7ff fb77 	bl	80005a4 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e078      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec4:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f0      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ed0:	493c      	ldr	r1, [pc, #240]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69da      	ldr	r2, [r3, #28]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	019b      	lsls	r3, r3, #6
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	085b      	lsrs	r3, r3, #1
 8000eea:	3b01      	subs	r3, #1
 8000eec:	041b      	lsls	r3, r3, #16
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	061b      	lsls	r3, r3, #24
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb50 	bl	80005a4 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f08:	f7ff fb4c 	bl	80005a4 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e04d      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x41c>
 8000f26:	e045      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb39 	bl	80005a4 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fb35 	bl	80005a4 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e036      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f48:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x44a>
 8000f54:	e02e      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e029      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d11c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d115      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d10d      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d001      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40007000 	.word	0x40007000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	42470060 	.word	0x42470060

08000fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d101      	bne.n	8000fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0cc      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe0:	4b68      	ldr	r3, [pc, #416]	; (8001184 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 020f 	and.w	r2, r3, #15
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d20c      	bcs.n	8001008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fee:	4b65      	ldr	r3, [pc, #404]	; (8001184 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ff6:	4b63      	ldr	r3, [pc, #396]	; (8001184 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 020f 	and.w	r2, r3, #15
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d001      	beq.n	8001008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e0b8      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001020:	4a59      	ldr	r2, [pc, #356]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	4b59      	ldr	r3, [pc, #356]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800102a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d005      	beq.n	8001044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001038:	4a53      	ldr	r2, [pc, #332]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001044:	4950      	ldr	r1, [pc, #320]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001046:	4b50      	ldr	r3, [pc, #320]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	4313      	orrs	r3, r2
 8001054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d044      	beq.n	80010ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106a:	4b47      	ldr	r3, [pc, #284]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d119      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e07f      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d003      	beq.n	800108a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001086:	2b03      	cmp	r3, #3
 8001088:	d107      	bne.n	800109a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108a:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d109      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e06f      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109a:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e067      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010aa:	4937      	ldr	r1, [pc, #220]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 0203 	bic.w	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010bc:	f7ff fa72 	bl	80005a4 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c2:	e00a      	b.n	80010da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c4:	f7ff fa6e 	bl	80005a4 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e04f      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 020c 	and.w	r2, r3, #12
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d1eb      	bne.n	80010c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 020f 	and.w	r2, r3, #15
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90c      	bls.n	8001114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 020f 	and.w	r2, r3, #15
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e032      	b.n	800117a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001120:	4919      	ldr	r1, [pc, #100]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800113e:	4912      	ldr	r1, [pc, #72]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4313      	orrs	r3, r2
 8001150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001152:	f000 f821 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 8001156:	4601      	mov	r1, r0
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	fa21 f303 	lsr.w	r3, r1, r3
 800116a:	4a09      	ldr	r2, [pc, #36]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_RCC_ClockConfig+0x1c8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9d2 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00
 8001188:	40023800 	.word	0x40023800
 800118c:	080023ec 	.word	0x080023ec
 8001190:	20000008 	.word	0x20000008
 8001194:	20000000 	.word	0x20000000

08001198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119c:	b087      	sub	sp, #28
 800119e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011a0:	2200      	movs	r2, #0
 80011a2:	60fa      	str	r2, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	617a      	str	r2, [r7, #20]
 80011a8:	2200      	movs	r2, #0
 80011aa:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 80011ac:	2200      	movs	r2, #0
 80011ae:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b0:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011b2:	6892      	ldr	r2, [r2, #8]
 80011b4:	f002 020c 	and.w	r2, r2, #12
 80011b8:	2a04      	cmp	r2, #4
 80011ba:	d007      	beq.n	80011cc <HAL_RCC_GetSysClockFreq+0x34>
 80011bc:	2a08      	cmp	r2, #8
 80011be:	d008      	beq.n	80011d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8090 	bne.w	80012e6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011c6:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_RCC_GetSysClockFreq+0x164>)
 80011c8:	613b      	str	r3, [r7, #16]
       break;
 80011ca:	e08f      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011cc:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <HAL_RCC_GetSysClockFreq+0x168>)
 80011ce:	613b      	str	r3, [r7, #16]
      break;
 80011d0:	e08c      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011d2:	4a49      	ldr	r2, [pc, #292]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011d4:	6852      	ldr	r2, [r2, #4]
 80011d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011da:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011de:	6852      	ldr	r2, [r2, #4]
 80011e0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d023      	beq.n	8001230 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011e8:	4b43      	ldr	r3, [pc, #268]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	099b      	lsrs	r3, r3, #6
 80011ee:	f04f 0400 	mov.w	r4, #0
 80011f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	ea03 0301 	and.w	r3, r3, r1
 80011fe:	ea04 0402 	and.w	r4, r4, r2
 8001202:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <HAL_RCC_GetSysClockFreq+0x168>)
 8001204:	fb02 f104 	mul.w	r1, r2, r4
 8001208:	2200      	movs	r2, #0
 800120a:	fb02 f203 	mul.w	r2, r2, r3
 800120e:	440a      	add	r2, r1
 8001210:	493b      	ldr	r1, [pc, #236]	; (8001300 <HAL_RCC_GetSysClockFreq+0x168>)
 8001212:	fba3 0101 	umull	r0, r1, r3, r1
 8001216:	1853      	adds	r3, r2, r1
 8001218:	4619      	mov	r1, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f04f 0400 	mov.w	r4, #0
 8001220:	461a      	mov	r2, r3
 8001222:	4623      	mov	r3, r4
 8001224:	f7fe ffd0 	bl	80001c8 <__aeabi_uldivmod>
 8001228:	4603      	mov	r3, r0
 800122a:	460c      	mov	r4, r1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e04c      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001230:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001232:	6852      	ldr	r2, [r2, #4]
 8001234:	0992      	lsrs	r2, r2, #6
 8001236:	4611      	mov	r1, r2
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	f240 15ff 	movw	r5, #511	; 0x1ff
 8001240:	f04f 0600 	mov.w	r6, #0
 8001244:	ea05 0501 	and.w	r5, r5, r1
 8001248:	ea06 0602 	and.w	r6, r6, r2
 800124c:	4629      	mov	r1, r5
 800124e:	4632      	mov	r2, r6
 8001250:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8001254:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8001258:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 800125c:	4651      	mov	r1, sl
 800125e:	465a      	mov	r2, fp
 8001260:	46aa      	mov	sl, r5
 8001262:	46b3      	mov	fp, r6
 8001264:	4655      	mov	r5, sl
 8001266:	465e      	mov	r6, fp
 8001268:	1b4d      	subs	r5, r1, r5
 800126a:	eb62 0606 	sbc.w	r6, r2, r6
 800126e:	4629      	mov	r1, r5
 8001270:	4632      	mov	r2, r6
 8001272:	0194      	lsls	r4, r2, #6
 8001274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001278:	018b      	lsls	r3, r1, #6
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	eb64 0402 	sbc.w	r4, r4, r2
 8001280:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8001284:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8001288:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 800128c:	4643      	mov	r3, r8
 800128e:	464c      	mov	r4, r9
 8001290:	4655      	mov	r5, sl
 8001292:	465e      	mov	r6, fp
 8001294:	18ed      	adds	r5, r5, r3
 8001296:	eb46 0604 	adc.w	r6, r6, r4
 800129a:	462b      	mov	r3, r5
 800129c:	4634      	mov	r4, r6
 800129e:	02a2      	lsls	r2, r4, #10
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	029b      	lsls	r3, r3, #10
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	e897 0018 	ldmia.w	r7, {r3, r4}
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f04f 0400 	mov.w	r4, #0
 80012bc:	461a      	mov	r2, r3
 80012be:	4623      	mov	r3, r4
 80012c0:	f7fe ff82 	bl	80001c8 <__aeabi_uldivmod>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0c1b      	lsrs	r3, r3, #16
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	3301      	adds	r3, #1
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	613b      	str	r3, [r7, #16]
      break;
 80012e4:	e002      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_GetSysClockFreq+0x164>)
 80012e8:	613b      	str	r3, [r7, #16]
      break;
 80012ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ec:	693b      	ldr	r3, [r7, #16]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	371c      	adds	r7, #28
 80012f2:	46bd      	mov	sp, r7
 80012f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	00f42400 	.word	0x00f42400
 8001300:	017d7840 	.word	0x017d7840

08001304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e055      	b.n	80013c2 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d106      	bne.n	8001336 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 ff15 	bl	8002160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2202      	movs	r2, #2
 800133a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800134c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6851      	ldr	r1, [r2, #4]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6892      	ldr	r2, [r2, #8]
 800135a:	4311      	orrs	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	68d2      	ldr	r2, [r2, #12]
 8001360:	4311      	orrs	r1, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6912      	ldr	r2, [r2, #16]
 8001366:	4311      	orrs	r1, r2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6952      	ldr	r2, [r2, #20]
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6992      	ldr	r2, [r2, #24]
 8001372:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001376:	4311      	orrs	r1, r2
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	69d2      	ldr	r2, [r2, #28]
 800137c:	4311      	orrs	r1, r2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6a12      	ldr	r2, [r2, #32]
 8001382:	4311      	orrs	r1, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6992      	ldr	r2, [r2, #24]
 8001394:	0c12      	lsrs	r2, r2, #16
 8001396:	f002 0104 	and.w	r1, r2, #4
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800139e:	430a      	orrs	r2, r1
 80013a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	69d2      	ldr	r2, [r2, #28]
 80013ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e01d      	b.n	8001418 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d106      	bne.n	80013f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fefd 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4610      	mov	r0, r2
 800140a:	f000 f9bd 	bl	8001788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e01d      	b.n	800146e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f815 	bl	8001476 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f000 f992 	bl	8001788 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e0b4      	b.n	8001610 <HAL_TIM_PWM_ConfigChannel+0x184>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2202      	movs	r2, #2
 80014b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	f200 809f 	bhi.w	80015fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014f9 	.word	0x080014f9
 80014c8:	080015fd 	.word	0x080015fd
 80014cc:	080015fd 	.word	0x080015fd
 80014d0:	080015fd 	.word	0x080015fd
 80014d4:	08001539 	.word	0x08001539
 80014d8:	080015fd 	.word	0x080015fd
 80014dc:	080015fd 	.word	0x080015fd
 80014e0:	080015fd 	.word	0x080015fd
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	080015fd 	.word	0x080015fd
 80014ec:	080015fd 	.word	0x080015fd
 80014f0:	080015fd 	.word	0x080015fd
 80014f4:	080015bb 	.word	0x080015bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f9e2 	bl	80018c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	6992      	ldr	r2, [r2, #24]
 800150e:	f042 0208 	orr.w	r2, r2, #8
 8001512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	6992      	ldr	r2, [r2, #24]
 800151e:	f022 0204 	bic.w	r2, r2, #4
 8001522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	6991      	ldr	r1, [r2, #24]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	6912      	ldr	r2, [r2, #16]
 8001532:	430a      	orrs	r2, r1
 8001534:	619a      	str	r2, [r3, #24]
      break;
 8001536:	e062      	b.n	80015fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	4618      	mov	r0, r3
 8001540:	f000 fa32 	bl	80019a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	6992      	ldr	r2, [r2, #24]
 800154e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	6992      	ldr	r2, [r2, #24]
 800155e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	6991      	ldr	r1, [r2, #24]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	6912      	ldr	r2, [r2, #16]
 8001572:	0212      	lsls	r2, r2, #8
 8001574:	430a      	orrs	r2, r1
 8001576:	619a      	str	r2, [r3, #24]
      break;
 8001578:	e041      	b.n	80015fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fa87 	bl	8001a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	69d2      	ldr	r2, [r2, #28]
 8001590:	f042 0208 	orr.w	r2, r2, #8
 8001594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	69d2      	ldr	r2, [r2, #28]
 80015a0:	f022 0204 	bic.w	r2, r2, #4
 80015a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	69d1      	ldr	r1, [r2, #28]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	6912      	ldr	r2, [r2, #16]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	61da      	str	r2, [r3, #28]
      break;
 80015b8:	e021      	b.n	80015fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fadb 	bl	8001b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	69d2      	ldr	r2, [r2, #28]
 80015d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	69d2      	ldr	r2, [r2, #28]
 80015e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	69d1      	ldr	r1, [r2, #28]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	6912      	ldr	r2, [r2, #16]
 80015f4:	0212      	lsls	r2, r2, #8
 80015f6:	430a      	orrs	r2, r1
 80015f8:	61da      	str	r2, [r3, #28]
      break;
 80015fa:	e000      	b.n	80015fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80015fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_TIM_ConfigClockSource+0x18>
 800162c:	2302      	movs	r3, #2
 800162e:	e0a6      	b.n	800177e <HAL_TIM_ConfigClockSource+0x166>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800164e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001656:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b40      	cmp	r3, #64	; 0x40
 8001666:	d067      	beq.n	8001738 <HAL_TIM_ConfigClockSource+0x120>
 8001668:	2b40      	cmp	r3, #64	; 0x40
 800166a:	d80b      	bhi.n	8001684 <HAL_TIM_ConfigClockSource+0x6c>
 800166c:	2b10      	cmp	r3, #16
 800166e:	d073      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x140>
 8001670:	2b10      	cmp	r3, #16
 8001672:	d802      	bhi.n	800167a <HAL_TIM_ConfigClockSource+0x62>
 8001674:	2b00      	cmp	r3, #0
 8001676:	d06f      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001678:	e078      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800167a:	2b20      	cmp	r3, #32
 800167c:	d06c      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x140>
 800167e:	2b30      	cmp	r3, #48	; 0x30
 8001680:	d06a      	beq.n	8001758 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001682:	e073      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001684:	2b70      	cmp	r3, #112	; 0x70
 8001686:	d00d      	beq.n	80016a4 <HAL_TIM_ConfigClockSource+0x8c>
 8001688:	2b70      	cmp	r3, #112	; 0x70
 800168a:	d804      	bhi.n	8001696 <HAL_TIM_ConfigClockSource+0x7e>
 800168c:	2b50      	cmp	r3, #80	; 0x50
 800168e:	d033      	beq.n	80016f8 <HAL_TIM_ConfigClockSource+0xe0>
 8001690:	2b60      	cmp	r3, #96	; 0x60
 8001692:	d041      	beq.n	8001718 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001694:	e06a      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169a:	d066      	beq.n	800176a <HAL_TIM_ConfigClockSource+0x152>
 800169c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a0:	d017      	beq.n	80016d2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80016a2:	e063      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f000 fb32 	bl	8001d1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80016c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]
      break;
 80016d0:	e04c      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6899      	ldr	r1, [r3, #8]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f000 fb1b 	bl	8001d1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	6892      	ldr	r2, [r2, #8]
 80016f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f4:	609a      	str	r2, [r3, #8]
      break;
 80016f6:	e039      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	461a      	mov	r2, r3
 8001706:	f000 fa8f 	bl	8001c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2150      	movs	r1, #80	; 0x50
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fae8 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001716:	e029      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	461a      	mov	r2, r3
 8001726:	f000 faae 	bl	8001c86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2160      	movs	r1, #96	; 0x60
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fad8 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001736:	e019      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	461a      	mov	r2, r3
 8001746:	f000 fa6f 	bl	8001c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fac8 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001756:	e009      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 fabf 	bl	8001ce6 <TIM_ITRx_SetConfig>
      break;
 8001768:	e000      	b.n	800176c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800176a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a40      	ldr	r2, [pc, #256]	; (800189c <TIM_Base_SetConfig+0x114>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <TIM_Base_SetConfig+0x40>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a6:	d00f      	beq.n	80017c8 <TIM_Base_SetConfig+0x40>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a3d      	ldr	r2, [pc, #244]	; (80018a0 <TIM_Base_SetConfig+0x118>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00b      	beq.n	80017c8 <TIM_Base_SetConfig+0x40>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a3c      	ldr	r2, [pc, #240]	; (80018a4 <TIM_Base_SetConfig+0x11c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <TIM_Base_SetConfig+0x40>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <TIM_Base_SetConfig+0x120>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d003      	beq.n	80017c8 <TIM_Base_SetConfig+0x40>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <TIM_Base_SetConfig+0x124>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <TIM_Base_SetConfig+0x114>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d02b      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e8:	d027      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a2c      	ldr	r2, [pc, #176]	; (80018a0 <TIM_Base_SetConfig+0x118>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d023      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a2b      	ldr	r2, [pc, #172]	; (80018a4 <TIM_Base_SetConfig+0x11c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01f      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <TIM_Base_SetConfig+0x120>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01b      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <TIM_Base_SetConfig+0x124>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d017      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <TIM_Base_SetConfig+0x128>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <TIM_Base_SetConfig+0x12c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00f      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <TIM_Base_SetConfig+0x130>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00b      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a25      	ldr	r2, [pc, #148]	; (80018bc <TIM_Base_SetConfig+0x134>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <TIM_Base_SetConfig+0x138>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d003      	beq.n	800183a <TIM_Base_SetConfig+0xb2>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <TIM_Base_SetConfig+0x13c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d108      	bne.n	800184c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <TIM_Base_SetConfig+0x114>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d003      	beq.n	8001880 <TIM_Base_SetConfig+0xf8>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <TIM_Base_SetConfig+0x124>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d103      	bne.n	8001888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	615a      	str	r2, [r3, #20]
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40010000 	.word	0x40010000
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40000800 	.word	0x40000800
 80018a8:	40000c00 	.word	0x40000c00
 80018ac:	40010400 	.word	0x40010400
 80018b0:	40014000 	.word	0x40014000
 80018b4:	40014400 	.word	0x40014400
 80018b8:	40014800 	.word	0x40014800
 80018bc:	40001800 	.word	0x40001800
 80018c0:	40001c00 	.word	0x40001c00
 80018c4:	40002000 	.word	0x40002000

080018c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	f023 0201 	bic.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f023 0302 	bic.w	r3, r3, #2
 8001910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <TIM_OC1_SetConfig+0xd8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d003      	beq.n	800192c <TIM_OC1_SetConfig+0x64>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <TIM_OC1_SetConfig+0xdc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d10c      	bne.n	8001946 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f023 0308 	bic.w	r3, r3, #8
 8001932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	4313      	orrs	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <TIM_OC1_SetConfig+0xd8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d003      	beq.n	8001956 <TIM_OC1_SetConfig+0x8e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <TIM_OC1_SetConfig+0xdc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d111      	bne.n	800197a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	621a      	str	r2, [r3, #32]
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010400 	.word	0x40010400

080019a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	f023 0210 	bic.w	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 0320 	bic.w	r3, r3, #32
 80019f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a22      	ldr	r2, [pc, #136]	; (8001a8c <TIM_OC2_SetConfig+0xe4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d003      	beq.n	8001a10 <TIM_OC2_SetConfig+0x68>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a21      	ldr	r2, [pc, #132]	; (8001a90 <TIM_OC2_SetConfig+0xe8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d10d      	bne.n	8001a2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <TIM_OC2_SetConfig+0xe4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d003      	beq.n	8001a3c <TIM_OC2_SetConfig+0x94>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <TIM_OC2_SetConfig+0xe8>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d113      	bne.n	8001a64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	621a      	str	r2, [r3, #32]
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40010400 	.word	0x40010400

08001a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f023 0303 	bic.w	r3, r3, #3
 8001aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <TIM_OC3_SetConfig+0xe0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d003      	beq.n	8001afa <TIM_OC3_SetConfig+0x66>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <TIM_OC3_SetConfig+0xe4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10d      	bne.n	8001b16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <TIM_OC3_SetConfig+0xe0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d003      	beq.n	8001b26 <TIM_OC3_SetConfig+0x92>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <TIM_OC3_SetConfig+0xe4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d113      	bne.n	8001b4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	621a      	str	r2, [r3, #32]
}
 8001b68:	bf00      	nop
 8001b6a:	371c      	adds	r7, #28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40010400 	.word	0x40010400

08001b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	031b      	lsls	r3, r3, #12
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <TIM_OC4_SetConfig+0xa4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d003      	beq.n	8001be4 <TIM_OC4_SetConfig+0x68>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <TIM_OC4_SetConfig+0xa8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d109      	bne.n	8001bf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	019b      	lsls	r3, r3, #6
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	621a      	str	r2, [r3, #32]
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010400 	.word	0x40010400

08001c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f023 0201 	bic.w	r2, r3, #1
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f023 030a 	bic.w	r3, r3, #10
 8001c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	621a      	str	r2, [r3, #32]
}
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b087      	sub	sp, #28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f023 0210 	bic.w	r2, r3, #16
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	031b      	lsls	r3, r3, #12
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	621a      	str	r2, [r3, #32]
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f043 0307 	orr.w	r3, r3, #7
 8001d08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	021a      	lsls	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	609a      	str	r2, [r3, #8]
}
 8001d50:	bf00      	nop
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d101      	bne.n	8001d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d70:	2302      	movs	r3, #2
 8001d72:	e05a      	b.n	8001e2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc0:	d01d      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d018      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1b      	ldr	r2, [pc, #108]	; (8001e40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1a      	ldr	r2, [pc, #104]	; (8001e44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d00e      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d009      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d004      	beq.n	8001dfe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d10c      	bne.n	8001e18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40001800 	.word	0x40001800

08001e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e58:	f7fe fb3e 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5c:	f000 f808 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e60:	f000 f910 	bl	8002084 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e64:	f000 f862 	bl	8001f2c <MX_SPI1_Init>
  MX_TIM3_Init();
 8001e68:	f000 f896 	bl	8001f98 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <main+0x18>
	...

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b094      	sub	sp, #80	; 0x50
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2230      	movs	r2, #48	; 0x30
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 faa0 	bl	80023c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <SystemClock_Config+0xb4>)
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <SystemClock_Config+0xb4>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <SystemClock_Config+0xb4>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <SystemClock_Config+0xb8>)
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <SystemClock_Config+0xb8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <SystemClock_Config+0xb8>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001edc:	f107 0320 	add.w	r3, r7, #32
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fe03 	bl	8000aec <HAL_RCC_OscConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001eec:	f000 f90c 	bl	8002108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f85e 	bl	8000fcc <HAL_RCC_ClockConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f16:	f000 f8f7 	bl	8002108 <Error_Handler>
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3750      	adds	r7, #80	; 0x50
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40007000 	.word	0x40007000

08001f2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f32:	4a18      	ldr	r2, [pc, #96]	; (8001f94 <MX_SPI1_Init+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f78:	220a      	movs	r2, #10
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <MX_SPI1_Init+0x64>)
 8001f7e:	f7ff f9c1 	bl	8001304 <HAL_SPI_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f88:	f000 f8be 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000006c 	.word	0x2000006c
 8001f94:	40013000 	.word	0x40013000

08001f98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fac:	f107 0320 	add.w	r3, r7, #32
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
 8001fc4:	615a      	str	r2, [r3, #20]
 8001fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <MX_TIM3_Init+0xe4>)
 8001fca:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <MX_TIM3_Init+0xe8>)
 8001fcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <MX_TIM3_Init+0xe4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <MX_TIM3_Init+0xe4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <MX_TIM3_Init+0xe4>)
 8001fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <MX_TIM3_Init+0xe4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <MX_TIM3_Init+0xe4>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fee:	4823      	ldr	r0, [pc, #140]	; (800207c <MX_TIM3_Init+0xe4>)
 8001ff0:	f7ff f9eb 	bl	80013ca <HAL_TIM_Base_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ffa:	f000 f885 	bl	8002108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002008:	4619      	mov	r1, r3
 800200a:	481c      	ldr	r0, [pc, #112]	; (800207c <MX_TIM3_Init+0xe4>)
 800200c:	f7ff fb04 	bl	8001618 <HAL_TIM_ConfigClockSource>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002016:	f000 f877 	bl	8002108 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <MX_TIM3_Init+0xe4>)
 800201c:	f7ff fa00 	bl	8001420 <HAL_TIM_PWM_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002026:	f000 f86f 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	4619      	mov	r1, r3
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <MX_TIM3_Init+0xe4>)
 800203a:	f7ff fe8f 	bl	8001d5c <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002044:	f000 f860 	bl	8002108 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	; 0x60
 800204a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2204      	movs	r2, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <MX_TIM3_Init+0xe4>)
 8002060:	f7ff fa14 	bl	800148c <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800206a:	f000 f84d 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800206e:	4803      	ldr	r0, [pc, #12]	; (800207c <MX_TIM3_Init+0xe4>)
 8002070:	f000 f8e0 	bl	8002234 <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3738      	adds	r7, #56	; 0x38
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000002c 	.word	0x2000002c
 8002080:	40000400 	.word	0x40000400

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <MX_GPIO_Init+0x7c>)
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <MX_GPIO_Init+0x7c>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_GPIO_Init+0x7c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <MX_GPIO_Init+0x7c>)
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_GPIO_Init+0x7c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <MX_GPIO_Init+0x7c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2110      	movs	r1, #16
 80020d6:	480b      	ldr	r0, [pc, #44]	; (8002104 <MX_GPIO_Init+0x80>)
 80020d8:	f7fe fcee 	bl	8000ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80020dc:	2310      	movs	r3, #16
 80020de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4619      	mov	r1, r3
 80020f2:	4804      	ldr	r0, [pc, #16]	; (8002104 <MX_GPIO_Init+0x80>)
 80020f4:	f7fe fb46 	bl	8000784 <HAL_GPIO_Init>

}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	40020800 	.word	0x40020800

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210e:	e7fe      	b.n	800210e <Error_Handler+0x6>

08002110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_MspInit+0x4c>)
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_MspInit+0x4c>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_MspInit+0x4c>)
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <HAL_MspInit+0x4c>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_SPI_MspInit+0x84>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12b      	bne.n	80021da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 80021a4:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <HAL_SPI_MspInit+0x88>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021ba:	23e0      	movs	r3, #224	; 0xe0
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c6:	2303      	movs	r3, #3
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ca:	2305      	movs	r3, #5
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <HAL_SPI_MspInit+0x8c>)
 80021d6:	f7fe fad5 	bl	8000784 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021da:	bf00      	nop
 80021dc:	3728      	adds	r7, #40	; 0x28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40013000 	.word	0x40013000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020000 	.word	0x40020000

080021f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_TIM_Base_MspInit+0x3c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10d      	bne.n	800221e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_TIM_Base_MspInit+0x40>)
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_TIM_Base_MspInit+0x40>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0302 	orr.w	r3, r3, #2
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_TIM_Base_MspInit+0x40>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40000400 	.word	0x40000400
 8002230:	40023800 	.word	0x40023800

08002234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_TIM_MspPostInit+0x68>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d11d      	bne.n	8002292 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_TIM_MspPostInit+0x6c>)
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_TIM_MspPostInit+0x6c>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6313      	str	r3, [r2, #48]	; 0x30
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_TIM_MspPostInit+0x6c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002282:	2302      	movs	r3, #2
 8002284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <HAL_TIM_MspPostInit+0x70>)
 800228e:	f7fe fa79 	bl	8000784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002292:	bf00      	nop
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40000400 	.word	0x40000400
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020800 	.word	0x40020800

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler+0x4>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f4:	f7fe f942 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002300:	4a08      	ldr	r2, [pc, #32]	; (8002324 <SystemInit+0x28>)
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <SystemInit+0x28>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800230c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SystemInit+0x28>)
 8002312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002316:	609a      	str	r2, [r3, #8]
#endif
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800232c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800232e:	e003      	b.n	8002338 <LoopCopyDataInit>

08002330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002336:	3104      	adds	r1, #4

08002338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002338:	480b      	ldr	r0, [pc, #44]	; (8002368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800233c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800233e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002340:	d3f6      	bcc.n	8002330 <CopyDataInit>
  ldr  r2, =_sbss
 8002342:	4a0b      	ldr	r2, [pc, #44]	; (8002370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002344:	e002      	b.n	800234c <LoopFillZerobss>

08002346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002348:	f842 3b04 	str.w	r3, [r2], #4

0800234c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800234e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002350:	d3f9      	bcc.n	8002346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002352:	f7ff ffd3 	bl	80022fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002356:	f000 f811 	bl	800237c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235a:	f7ff fd7b 	bl	8001e54 <main>
  bx  lr    
 800235e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002360:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002364:	0800240c 	.word	0x0800240c
  ldr  r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800236c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002370:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002374:	200000c4 	.word	0x200000c4

08002378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002378:	e7fe      	b.n	8002378 <ADC_IRQHandler>
	...

0800237c <__libc_init_array>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	4e0d      	ldr	r6, [pc, #52]	; (80023b4 <__libc_init_array+0x38>)
 8002380:	4c0d      	ldr	r4, [pc, #52]	; (80023b8 <__libc_init_array+0x3c>)
 8002382:	1ba4      	subs	r4, r4, r6
 8002384:	10a4      	asrs	r4, r4, #2
 8002386:	2500      	movs	r5, #0
 8002388:	42a5      	cmp	r5, r4
 800238a:	d109      	bne.n	80023a0 <__libc_init_array+0x24>
 800238c:	4e0b      	ldr	r6, [pc, #44]	; (80023bc <__libc_init_array+0x40>)
 800238e:	4c0c      	ldr	r4, [pc, #48]	; (80023c0 <__libc_init_array+0x44>)
 8002390:	f000 f820 	bl	80023d4 <_init>
 8002394:	1ba4      	subs	r4, r4, r6
 8002396:	10a4      	asrs	r4, r4, #2
 8002398:	2500      	movs	r5, #0
 800239a:	42a5      	cmp	r5, r4
 800239c:	d105      	bne.n	80023aa <__libc_init_array+0x2e>
 800239e:	bd70      	pop	{r4, r5, r6, pc}
 80023a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023a4:	4798      	blx	r3
 80023a6:	3501      	adds	r5, #1
 80023a8:	e7ee      	b.n	8002388 <__libc_init_array+0xc>
 80023aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023ae:	4798      	blx	r3
 80023b0:	3501      	adds	r5, #1
 80023b2:	e7f2      	b.n	800239a <__libc_init_array+0x1e>
 80023b4:	08002404 	.word	0x08002404
 80023b8:	08002404 	.word	0x08002404
 80023bc:	08002404 	.word	0x08002404
 80023c0:	08002408 	.word	0x08002408

080023c4 <memset>:
 80023c4:	4402      	add	r2, r0
 80023c6:	4603      	mov	r3, r0
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d100      	bne.n	80023ce <memset+0xa>
 80023cc:	4770      	bx	lr
 80023ce:	f803 1b01 	strb.w	r1, [r3], #1
 80023d2:	e7f9      	b.n	80023c8 <memset+0x4>

080023d4 <_init>:
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	bf00      	nop
 80023d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023da:	bc08      	pop	{r3}
 80023dc:	469e      	mov	lr, r3
 80023de:	4770      	bx	lr

080023e0 <_fini>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr
